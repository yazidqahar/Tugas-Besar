
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\CRC32.as
package nochump.util.zip{import flash.utils.ByteArray;/**
* Computes CRC32 data checksum of a data stream.
	 * The actual CRC32 algorithm is described in RFC 1952
	 * (GZIP file format specification version 4.3).
	 * 
	 * @author David Chang
	 * @date January 2, 2007.
*/
public class CRC32{/**
The crc data checksum so far.
*/
private var crc : uint;/**
The fast CRC table. Computed once when the CRC32 class is loaded.
*/
private static var crcTable : Array;/**
Make the table for a fast CRC.
*/
private static function makeCrcTable () : Array;/**
* Returns the CRC32 data checksum computed so far.
*/
public function getValue () : uint;/**
* Resets the CRC32 data checksum as if no update was ever called.
*/
public function reset () : void;/**
* Adds the complete byte array to the data checksum.
		 * 
		 * @param buf the buffer which contains the data
*/
public function update (buf:ByteArray) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\Deflater.as
package nochump.util.zip{import flash.utils.ByteArray;/**
* This is the Deflater class.  The deflater class compresses input
	 * with the deflate algorithm described in RFC 1951.  It uses the
	 * ByteArray compress method to deflate.
	 * 
	 * @author David Chang
*/
public class Deflater{private var buf : ByteArray;private var compressed : Boolean;private var totalIn : uint;private var totalOut : uint;/**
* Creates a new deflater.
*/
public function Deflater ();/**
* Resets the deflater.  The deflater acts afterwards as if it was
		 * just created.
*/
public function reset () : void;/**
* Sets the data which should be compressed next.
		 * 
		 * @param input the buffer containing the input data.
*/
public function setInput (input:ByteArray) : void;/**
* Deflates the current input block to the given array.
		 * 
		 * @param output the buffer where to write the compressed data.
*/
public function deflate (output:ByteArray) : uint;/**
* Gets the number of input bytes.
*/
public function getBytesRead () : uint;/**
* Gets the number of output bytes.
*/
public function getBytesWritten () : uint;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\Inflater.as
package nochump.util.zip{import flash.utils.Endian;import flash.utils.ByteArray;/**
* Inflater is used to decompress data that has been compressed according 
	 * to the "deflate" standard described in rfc1950.
	 *
	 * The usage is as following.  First you have to set some input with
	 * <code>setInput()</code>, then inflate() it.
	 * 
	 * This implementation is a port of Puff by Mark Addler that comes with
	 * the zlip data compression library.  It is not the fastest routine as
	 * he intended it for learning purposes, his actual optimized inflater code
	 * is very different.  I went with this approach basically because I got a
	 * headache looking at the optimized inflater code and porting this
	 * was a breeze.  The speed should be adequate but there is plenty of room
	 * for improvements here.
	 * 
	 * @author dchang
*/
public class Inflater{private static const MAXBITS : int;private static const MAXLCODES : int;private static const MAXDCODES : int;private static const MAXCODES : int;private static const FIXLCODES : int;private static const LENS : Array;private static const LEXT : Array;private static const DISTS : Array;private static const DEXT : Array;private var inbuf : ByteArray;private var incnt : uint;private var bitbuf : int;private var bitcnt : int;private var lencode : Object;private var distcode : Object;/**
* Sets the input.
		 * 
		 * @param buf the input.
*/
public function setInput (buf:ByteArray) : void;/**
* Inflates the compressed stream to the output buffer.
		 * 
		 * @param buf the output buffer.
*/
public function inflate (buf:ByteArray) : uint;private function bits (need:int) : int;private function construct (h:Object, length:Array, n:int) : int;private function decode (h:Object) : int;private function codes (buf:ByteArray) : int;private function stored (buf:ByteArray) : void;private function constructFixedTables () : void;private function constructDynamicTables () : int;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\ZipConstants.as
package nochump.util.zip{internal class ZipConstants{/**
The local file header
*/
internal static const LOCSIG : uint;internal static const LOCHDR : uint;internal static const LOCVER : uint;internal static const LOCNAM : uint;/**
The Data descriptor
*/
internal static const EXTSIG : uint;internal static const EXTHDR : uint;/**
The central directory file header
*/
internal static const CENSIG : uint;internal static const CENHDR : uint;internal static const CENVER : uint;internal static const CENNAM : uint;internal static const CENOFF : uint;/**
The entries in the end of central directory
*/
internal static const ENDSIG : uint;internal static const ENDHDR : uint;internal static const ENDTOT : uint;internal static const ENDOFF : uint;/**
Compression methods
*/
internal static const STORED : uint;internal static const DEFLATED : uint;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\ZipEntry.as
package nochump.util.zip{import flash.utils.ByteArray;/**
* This class represents a member of a zip archive.  ZipFile
	 * will give you instances of this class as information
	 * about the members in an archive.  On the other hand ZipOutput
	 * needs an instance of this class to create a new member.
	 *
	 * @author David Chang
*/
public class ZipEntry{private var _name : String;private var _size : int;private var _compressedSize : int;private var _crc : uint;/**
@private
*/
internal var dostime : uint;private var _method : int;private var _extra : ByteArray;private var _comment : String;/**
@private
*/
internal var flag : int;/**
@private
*/
internal var version : int;/**
@private
*/
internal var offset : int;/**
* Returns the entry name.  The path components in the entry are
		 * always separated by slashes ('/').
*/
public function get name () : String;/**
* Gets the time of last modification of the entry.
		 * @return the time of last modification of the entry, or -1 if unknown.
*/
public function get time () : Number;/**
* Sets the time of last modification of the entry.
		 * @time the time of last modification of the entry.
*/
public function set time (time:Number) : Void;/**
* Gets the size of the uncompressed data.
*/
public function get size () : int;/**
* Sets the size of the uncompressed data.
*/
public function set size (size:int) : Void;/**
* Gets the size of the compressed data.
*/
public function get compressedSize () : int;/**
* Sets the size of the compressed data.
*/
public function set compressedSize (csize:int) : Void;/**
* Gets the crc of the uncompressed data.
*/
public function get crc () : uint;/**
* Sets the crc of the uncompressed data.
*/
public function set crc (crc:uint) : Void;/**
* Gets the compression method.
*/
public function get method () : int;/**
* Sets the compression method.  Only DEFLATED and STORED are
		 * supported.
*/
public function set method (method:int) : Void;/**
* Gets the extra data.
*/
public function get extra () : ByteArray;/**
* Sets the extra data.
*/
public function set extra (extra:ByteArray) : Void;/**
* Gets the extra data.
*/
public function get comment () : String;/**
* Sets the entry comment.
*/
public function set comment (comment:String) : Void;/**
* Creates a zip entry with the given name.
		 * @param name the name. May include directory components separated
		 * by '/'.
*/
public function ZipEntry (name:String);/**
* Gets true, if the entry is a directory.  This is solely
		 * determined by the name, a trailing slash '/' marks a directory.
*/
public function isDirectory () : Boolean;/**
* Gets the string representation of this ZipEntry.  This is just
		 * the name as returned by name.
*/
public function toString () : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\ZipError.as
package nochump.util.zip{import flash.errors.IOError;/**
* Thrown during the creation or input of a zip file.
*/
public class ZipError extends IOError{public function ZipError (message:String = "", id:int = 0);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\ZipFile.as
package nochump.util.zip{import flash.utils.ByteArray;import flash.utils.Dictionary;import flash.utils.Endian;import flash.utils.IDataInput;/**
* This class represents a Zip archive.  You can ask for the contained
	 * entries, or get an input stream for a file entry.  The entry is
	 * automatically decompressed.
	 * 
	 * @author David Chang
*/
public class ZipFile{private var buf : ByteArray;private var entryList : Array;private var entryTable : Dictionary;private var locOffsetTable : Dictionary;/**
* Returns an array of all Zip entries in this Zip file.
*/
public function get entries () : Array;/**
* Returns the number of entries in this zip file.
*/
public function get size () : uint;/**
* Opens a Zip file reading the given data.
		 * 
		 * @param data
*/
public function ZipFile (data:IDataInput);/**
* Searches for a zip entry in this archive with the given name.
		 *
		 * @param name the name. May contain directory components separated by
		 * slashes ('/').
		 * @return the zip entry, or null if no entry with that name exists.
*/
public function getEntry (name:String) : ZipEntry;/**
* Creates a byte array reading the given zip entry as
		 * uncompressed data.  Normally zip entry should be an entry
		 * returned by getEntry() or entries().
		 * 
		 * @param entry the entry to create a byte array for.
		 * @return the byte array, or null if the requested entry does not exist.
*/
public function getInput (entry:ZipEntry) : ByteArray;/**
* Read the central directory of a zip file and fill the entries
		 * array.  This is called exactly once when first needed.
*/
private function readEntries () : void;/**
* Reads the total number of entries in the central dir and
		 * positions buf at the start of the central directory.
*/
private function readEND () : void;private function findEND () : uint;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\ZipOutput.as
package nochump.util.zip{import flash.utils.Dictionary;import flash.utils.Endian;import flash.utils.ByteArray;public class ZipOutput{private var _entry : ZipEntry;private var _entries : Array;private var _names : Dictionary;private var _def : Deflater;private var _crc : CRC32;private var _buf : ByteArray;private var _comment : String;/**
* Returns the number of entries in this zip file.
*/
public function get size () : uint;/**
* Returns the byte array of the finished zip.
*/
public function get byteArray () : ByteArray;/**
*
*/
public function set comment (value:String) : Void;public function ZipOutput ();public function putNextEntry (e:ZipEntry) : void;public function write (b:ByteArray) : void;public function closeEntry () : void;public function finish () : void;private function writeLOC (e:ZipEntry) : void;/**
* Writes extra data descriptor (EXT) for specified entry.
*/
private function writeEXT (e:ZipEntry) : void;/**
* Write central directory (CEN) header for specified entry.
		 * REMIND: add support for file attributes
*/
private function writeCEN (e:ZipEntry) : void;/**
* Writes end of central directory (END) header.
*/
private function writeEND (off:uint, len:uint) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\ASCollada.as
package org.ascollada{/**
*
*/
public class ASCollada{public static const DAE_PROFILE_COMMON_ELEMENT : String;public static const DAE_DATA_ELEMENT : String;public static const DAE_NAMESPACE_ATTRIBUTE : String;public static const DAE_SCHEMA_LOCATION : String;public static const DAE_VERSION_ATTRIBUTE : String;public static const DAE_SCHEMA_VERSION : String;public static const DAE_LIBRARY_ANIMATION_ELEMENT : String;public static const DAE_LIBRARY_ANIMATION_CLIP_ELEMENT : String;public static const DAE_LIBRARY_CAMERA_ELEMENT : String;public static const DAE_LIBRARY_CONTROLLER_ELEMENT : String;public static const DAE_LIBRARY_EFFECT_ELEMENT : String;public static const DAE_LIBRARY_FFIELDS_ELEMENT : String;public static const DAE_LIBRARY_GEOMETRY_ELEMENT : String;public static const DAE_LIBRARY_IMAGE_ELEMENT : String;public static const DAE_LIBRARY_LIGHT_ELEMENT : String;public static const DAE_LIBRARY_MATERIAL_ELEMENT : String;public static const DAE_LIBRARY_NODE_ELEMENT : String;public static const DAE_LIBRARY_PMATERIAL_ELEMENT : String;public static const DAE_LIBRARY_PMODEL_ELEMENT : String;public static const DAE_LIBRARY_PSCENE_ELEMENT : String;public static const DAE_LIBRARY_VSCENE_ELEMENT : String;public static const DAE_INSTANCE_ANIMATION_ELEMENT : String;public static const DAE_INSTANCE_CAMERA_ELEMENT : String;public static const DAE_INSTANCE_CONTROLLER_ELEMENT : String;public static const DAE_INSTANCE_EFFECT_ELEMENT : String;public static const DAE_INSTANCE_GEOMETRY_ELEMENT : String;public static const DAE_INSTANCE_LIGHT_ELEMENT : String;public static const DAE_INSTANCE_MATERIAL_ELEMENT : String;public static const DAE_INSTANCE_NODE_ELEMENT : String;public static const DAE_INSTANCE_VSCENE_ELEMENT : String;public static const DAE_ANIMCLIP_ELEMENT : String;public static const DAE_BIND_ELEMENT : String;public static const DAE_BIND_VERTEX_INPUT : String;public static const DAE_BIND_TEXTURE_SURFACE_ELEMENT : String;public static const DAE_BINDMATERIAL_ELEMENT : String;public static const DAE_COLOR_ELEMENT : String;public static const DAE_CONTROL_VERTICES_ELEMENT : String;public static const DAE_EFFECT_ELEMENT : String;public static const DAE_MIP_LEVELS : String;public static const DAE_MIPMAP_GENERATE : String;public static const DAE_SAMPLER_ELEMENT : String;public static const DAE_SKELETON_ELEMENT : String;public static const DAE_TARGETS_ELEMENT : String;public static const DAE_TECHNIQUE_COMMON_ELEMENT : String;public static const DAE_VIEWPORT_RATIO : String;public static const DAE_VSCENE_ELEMENT : String;public static const DAE_WEIGHTS_ELEMENT : String;public static const DAE_VERTEXCOUNT_ELEMENT : String;public static const DAE_INITASNULL_ELEMENT : String;public static const DAE_INITASTARGET_ELEMENT : String;public static const DAE_INITCUBE_ELEMENT : String;public static const DAE_INITVOLUME_ELEMENT : String;public static const DAE_INITPLANAR_ELEMENT : String;public static const DAE_INITFROM_ELEMENT : String;public static const DAE_ALL_ELEMENT : String;public static const DAE_PRIMARY_ELEMENT : String;public static const DAE_FACE_ELEMENT : String;public static const DAE_ORDER_ELEMENT : String;public static const DAE_FXCMN_ANNOTATE_ELEMENT : String;public static const DAE_FXCMN_BIND_ELEMENT : String;public static const DAE_FXCMN_BOOL_ELEMENT : String;public static const DAE_FXCMN_CODE_ELEMENT : String;public static const DAE_FXCMN_COMPILERTARGET_ELEMENT : String;public static const DAE_FXCMN_COMPILEROPTIONS_ELEMENT : String;public static const DAE_FXCMN_INT_ELEMENT : String;public static const DAE_FXCMN_HALF_ELEMENT : String;public static const DAE_FXCMN_HALF2_ELEMENT : String;public static const DAE_FXCMN_HALF3_ELEMENT : String;public static const DAE_FXCMN_HALF4_ELEMENT : String;public static const DAE_FXCMN_HALF4X4_ELEMENT : String;public static const DAE_FXCMN_FLOAT_ELEMENT : String;public static const DAE_FXCMN_FLOAT2_ELEMENT : String;public static const DAE_FXCMN_FLOAT3_ELEMENT : String;public static const DAE_FXCMN_FLOAT4_ELEMENT : String;public static const DAE_FXCMN_FLOAT4X4_ELEMENT : String;public static const DAE_FXCMN_HINT_ELEMENT : String;public static const DAE_FXCMN_INCLUDE_ELEMENT : String;public static const DAE_FXCMN_SURFACE_ELEMENT : String;public static const DAE_FXCMN_SAMPLER1D_ELEMENT : String;public static const DAE_FXCMN_SAMPLER2D_ELEMENT : String;public static const DAE_FXCMN_SAMPLER3D_ELEMENT : String;public static const DAE_FXCMN_SAMPLERCUBE_ELEMENT : String;public static const DAE_FXCMN_SEMANTIC_ELEMENT : String;public static const DAE_FXCMN_SETPARAM_ELEMENT : String;public static const DAE_FXCMN_NEWPARAM_ELEMENT : String;public static const DAE_FXCMN_STRING_ELEMENT : String;public static const DAE_FXCMN_NAME_ELEMENT : String;public static const DAE_FXCMN_VERTEX_SHADER : String;public static const DAE_FXCMN_FRAGMENT_SHADER : String;public static const DAE_FXSTD_CONSTANT_ELEMENT : String;public static const DAE_FXSTD_LAMBERT_ELEMENT : String;public static const DAE_FXSTD_PHONG_ELEMENT : String;public static const DAE_FXSTD_BLINN_ELEMENT : String;public static const DAE_FXSTD_COLOR_ELEMENT : String;public static const DAE_FXSTD_FLOAT_ELEMENT : String;public static const DAE_FXSTD_TEXTURE_ELEMENT : String;public static const DAE_FXSTD_TEXTURE_ATTRIBUTE : String;public static const DAE_FXSTD_TEXTURESET_ATTRIBUTE : String;public static const DAE_FXSTD_STATE_ALPHA_ELEMENT : String;public static const DAE_FXSTD_STATE_BACK_ELEMENT : String;public static const DAE_FXSTD_STATE_DEST_ELEMENT : String;public static const DAE_FXSTD_STATE_DESTALPHA_ELEMENT : String;public static const DAE_FXSTD_STATE_DESTRGB_ELEMENT : String;public static const DAE_FXSTD_STATE_FACE_ELEMENT : String;public static const DAE_FXSTD_STATE_FAIL_ELEMENT : String;public static const DAE_FXSTD_STATE_FUNC_ELEMENT : String;public static const DAE_FXSTD_STATE_FRONT_ELEMENT : String;public static const DAE_FXSTD_STATE_MASK_ELEMENT : String;public static const DAE_FXSTD_STATE_MODE_ELEMENT : String;public static const DAE_FXSTD_STATE_REF_ELEMENT : String;public static const DAE_FXSTD_STATE_RGB_ELEMENT : String;public static const DAE_FXSTD_STATE_SRC_ELEMENT : String;public static const DAE_FXSTD_STATE_SRCALPHA_ELEMENT : String;public static const DAE_FXSTD_STATE_SRCRGB_ELEMENT : String;public static const DAE_FXSTD_STATE_VALUE : String;public static const DAE_FXSTD_STATE_ZFAIL_ELEMENT : String;public static const DAE_FXSTD_STATE_ZPASS_ELEMENT : String;public static const DAE_CONTROLLER_SKIN_ELEMENT : String;public static const DAE_CONTROLLER_MORPH_ELEMENT : String;public static const DAE_CAMERA_PERSP_ELEMENT : String;public static const DAE_CAMERA_ORTHO_ELEMENT : String;public static const DAE_RGB_ZERO_ELEMENT : String;public static const DAE_A_ONE_ELEMENT : String;public static const DAE_ASPECT_CAMERA_PARAMETER : String;public static const DAE_XFOV_CAMERA_PARAMETER : String;public static const DAE_YFOV_CAMERA_PARAMETER : String;public static const DAE_ZNEAR_CAMERA_PARAMETER : String;public static const DAE_ZFAR_CAMERA_PARAMETER : String;public static const DAE_XMAG_CAMERA_PARAMETER : String;public static const DAE_YMAG_CAMERA_PARAMETER : String;public static const DAE_AMBIENT_MATERIAL_PARAMETER : String;public static const DAE_BUMP_MATERIAL_PARAMETER : String;public static const DAE_DIFFUSE_MATERIAL_PARAMETER : String;public static const DAE_EMISSION_MATERIAL_PARAMETER : String;public static const DAE_TRANSPARENCY_MATERIAL_PARAMETER : String;public static const DAE_TRANSPARENT_MATERIAL_PARAMETER : String;public static const DAE_OPAQUE_MATERIAL_ATTRIBUTE : String;public static const DAE_REFLECTIVE_MATERIAL_PARAMETER : String;public static const DAE_REFLECTIVITY_MATERIAL_PARAMETER : String;public static const DAE_INDEXOFREFRACTION_MATERIAL_PARAMETER : String;public static const DAE_SHININESS_MATERIAL_PARAMETER : String;public static const DAE_SPECULAR_MATERIAL_PARAMETER : String;public static const DAE_LIGHT_AMBIENT_ELEMENT : String;public static const DAE_LIGHT_POINT_ELEMENT : String;public static const DAE_LIGHT_DIRECTIONAL_ELEMENT : String;public static const DAE_LIGHT_SPOT_ELEMENT : String;public static const DAE_COLOR_LIGHT_PARAMETER : String;public static const DAE_CONST_ATTENUATION_LIGHT_PARAMETER : String;public static const DAE_LIN_ATTENUATION_LIGHT_PARAMETER : String;public static const DAE_QUAD_ATTENUATION_LIGHT_PARAMETER : String;public static const DAE_FALLOFFEXPONENT_LIGHT_PARAMETER : String;public static const DAE_FALLOFFANGLE_LIGHT_PARAMETER : String;public static const DAE_BINDSHAPEMX_SKIN_PARAMETER : String;public static const DAE_CONTRIBUTOR_ASSET_ELEMENT : String;public static const DAE_AUTHOR_ASSET_PARAMETER : String;public static const DAE_AUTHORINGTOOL_ASSET_PARAMETER : String;public static const DAE_CREATED_ASSET_PARAMETER : String;public static const DAE_COMMENTS_ASSET_PARAMETER : String;public static const DAE_COPYRIGHT_ASSET_PARAMETER : String;public static const DAE_KEYWORDS_ASSET_PARAMETER : String;public static const DAE_MODIFIED_ASSET_PARAMETER : String;public static const DAE_REVISION_ASSET_PARAMETER : String;public static const DAE_SOURCEDATA_ASSET_PARAMETER : String;public static const DAE_SUBJECT_ASSET_PARAMETER : String;public static const DAE_TITLE_ASSET_PARAMETER : String;public static const DAE_UNITS_ASSET_PARAMETER : String;public static const DAE_UP : String;public static const DAE_PHYSICS_STATIC_FRICTION : String;public static const DAE_PHYSICS_DYNAMIC_FRICTION : String;public static const DAE_PHYSICS_RESTITUTION : String;public static const DAE_CLOSED_ATTRIBUTE : String;public static const DAE_CLOSEDU_ATTRIBUTE : String;public static const DAE_CLOSEDV_ATTRIBUTE : String;public static const DAE_COUNT_ATTRIBUTE : String;public static const DAE_DEGREE_ATTRIBUTE : String;public static const DAE_UDEGREE_ATTRIBUTE : String;public static const DAE_VDEGREE_ATTRIBUTE : String;public static const DAE_END_ATTRIBUTE : String;public static const DAE_ID_ATTRIBUTE : String;public static const DAE_MATERIAL_ATTRIBUTE : String;public static const DAE_METERS_ATTRIBUTE : String;public static const DAE_METHOD_ATTRIBUTE : String;public static const DAE_NAME_ATTRIBUTE : String;public static const DAE_OFFSET_ATTRIBUTE : String;public static const DAE_PLATFORM_ATTRIBUTE : String;public static const DAE_PROFILE_ATTRIBUTE : String;public static const DAE_REF_ATTRIBUTE : String;public static const DAE_SEMANTIC_ATTRIBUTE : String;public static const DAE_INDEX_ATTRIBUTE : String;public static const DAE_INPUT_SEMANTIC_ATTRIBUTE : String;public static const DAE_INPUT_SET_ATTRIBUTE : String;public static const DAE_SET_ATTRIBUTE : String;public static const DAE_SID_ATTRIBUTE : String;public static const DAE_START_ATTRIBUTE : String;public static const DAE_STRIDE_ATTRIBUTE : String;public static const DAE_SOURCE_ATTRIBUTE : String;public static const DAE_SURFACE_ATTRIBUTE : String;public static const DAE_SYMBOL_ATTRIBUTE : String;public static const DAE_TARGET_ATTRIBUTE : String;public static const DAE_TEXTURE_ATTRIBUTE : String;public static const DAE_TYPE_ATTRIBUTE : String;public static const DAE_URL_ATTRIBUTE : String;public static const DAE_STAGE_ATTRIBUTE : String;public static const DAE_VALUE : String;public static const DAE_MIP_ATTRIBUTE : String;public static const DAE_SLICE_ATTRIBUTE : String;public static const DAE_FACE_ATTRIBUTE : String;public static const DAE_FLOAT_TYPE : String;public static const DAE_IDREF_TYPE : String;public static const DAE_MATRIX_TYPE : String;public static const DAE_NAME_TYPE : String;public static const DAE_IMAGE_INPUT : String;public static const DAE_TEXTURE_INPUT : String;public static const DAE_WEIGHT_MORPH_INPUT : String;public static const DAE_WEIGHT_MORPH_INPUT_DEPRECATED : String;public static const DAE_TARGET_MORPH_INPUT : String;public static const DAE_TARGET_MORPH_INPUT_DEPRECATED : String;public static const DAE_TIME_TARGET : String;public static const DAE_JOINT_NODE_TYPE : String;public static const DAE_NODE_NODE_TYPE : String;public static const DAE_CVS_SPLINE_INPUT : String;public static const DAE_KNOT_SPLINE_INPUT : String;public static const DAE_WEIGHT_SPLINE_INPUT : String;public static const DAE_PHYSICS_MATERIAL_ELEMENT : String;public static const DAE_PHYSICS_MODEL_ELEMENT : String;public static const DAE_PHYSICS_SCENE_ELEMENT : String;public static const DAE_INSTANCE_PHYSICS_MATERIAL_ELEMENT : String;public static const DAE_INSTANCE_PHYSICS_MODEL_ELEMENT : String;public static const DAE_INSTANCE_PHYSICS_SCENE_ELEMENT : String;public static const DAE_INSTANCE_RIGID_BODY_ELEMENT : String;public static const DAE_INSTANCE_RIGID_CONSTRAINT_ELEMENT : String;public static const DAE_INSTANCE_FORCE_FIELD_ELEMENT : String;public static const DAE_TIME_STEP_ATTRIBUTE : String;public static const DAE_GRAVITY_ATTRIBUTE : String;public static const DAE_RESTITUTION_ATTRIBUTE : String;public static const DAE_STATIC_FRICTION_ATTRIBUTE : String;public static const DAE_DYNAMIC_FRICTION_ATTRIBUTE : String;public static const DAE_VELOCITY_ELEMENT : String;public static const DAE_ANGULAR_VELOCITY_ELEMENT : String;public static const DAE_BODY_ATTRIBUTE : String;public static const DAE_CONSTRAINT_ATTRIBUTE : String;public static const DAE_MASS_FRAME_ELEMENT : String;public static const DAE_LIMITS_ELEMENT : String;public static const DAE_LINEAR_ELEMENT : String;public static const DAE_ANGULAR_ELEMENT : String;public static const DAE_SWING_CONE_AND_TWIST_ELEMENT : String;public static const DAE_CONVEX_HULL_OF_ATTRIBUTE : String;public static const DAE_HEIGHT_ELEMENT : String;public static const DAE_MIN_ELEMENT : String;public static const DAE_MAX_ELEMENT : String;public static const DAE_SHAPE_ELEMENT : String;public static const DAE_RIGID_BODY_ELEMENT : String;public static const DAE_DYNAMIC_ELEMENT : String;public static const DAE_HOLLOW_ELEMENT : String;public static const DAE_MASS_ELEMENT : String;public static const DAE_BOX_ELEMENT : String;public static const DAE_SPHERE_ELEMENT : String;public static const DAE_CAPSULE_ELEMENT : String;public static const DAE_CYLINDER_ELEMENT : String;public static const DAE_ELLIPSOID_ELEMENT : String;public static const DAE_TAPERED_CAPSULE_ELEMENT : String;public static const DAE_TAPERED_CYLINDER_ELEMENT : String;public static const DAE_PLANE_ELEMENT : String;public static const DAE_FORMAT_ELEMENT : String;public static const DAE_FORMAT_HINT_ELEMENT : String;public static const DAE_PRECISION_ELEMENT : String;public static const DAE_OPTION_ELEMENT : String;public static const DAE_HALF_EXTENTS_ELEMENT : String;public static const DAE_EQUATION_ELEMENT : String;public static const DAE_SIZE_ELEMENT : String;public static const DAE_RADIUS_ELEMENT : String;public static const DAE_RADIUS1_ELEMENT : String;public static const DAE_RADIUS2_ELEMENT : String;public static const DAE_CONVEX_MESH_ELEMENT : String;public static const DAE_INERTIA_ELEMENT : String;public static const DAE_DENSITY_ELEMENT : String;public static const DAE_CENTER_OF_MASS_ELEMENT : String;public static const DAE_DYNAMICS_ELEMENT : String;public static const DAE_RIGID_CONSTRAINT_ELEMENT : String;public static const DAE_FORCE_FIELD_ELEMENT : String;public static const DAE_ATTACHMENT_ELEMENT : String;public static const DAE_REF_ATTACHMENT_ELEMENT : String;public static const DAE_ROT_LIMIT_MIN_ELEMENT : String;public static const DAE_ROT_LIMIT_MAX_ELEMENT : String;public static const DAE_TRANS_LIMIT_MIN_ELEMENT : String;public static const DAE_TRANS_LIMIT_MAX_ELEMENT : String;public static const DAE_ENABLED_ELEMENT : String;public static const DAE_INTERPENETRATE_ELEMENT : String;public static const DAE_SPRING_ELEMENT : String;public static const DAE_STIFFNESS_ELEMENT : String;public static const DAE_DAMPING_ELEMENT : String;public static const DAE_TARGET_VALUE : String;public static const DAE_ANNOTATE_ELEMENT : String;public static const DAE_TRUE_KEYWORD : String;public static const DAE_FALSE_KEYWORD : String;public static const DAE_FORMAT_HINT_RGB_VALUE : String;public static const DAE_FORMAT_HINT_RGBA_VALUE : String;public static const DAE_FORMAT_HINT_L_VALUE : String;public static const DAE_FORMAT_HINT_LA_VALUE : String;public static const DAE_FORMAT_HINT_D_VALUE : String;public static const DAE_FORMAT_HINT_XYZ_VALUE : String;public static const DAE_FORMAT_HINT_XYZW_VALUE : String;public static const DAE_FORMAT_HINT_SNORM_VALUE : String;public static const DAE_FORMAT_HINT_UNORM_VALUE : String;public static const DAE_FORMAT_HINT_SINT_VALUE : String;public static const DAE_FORMAT_HINT_UINT_VALUE : String;public static const DAE_FORMAT_HINT_FLOAT_VALUE : String;public static const DAE_FORMAT_HINT_LOW_VALUE : String;public static const DAE_FORMAT_HINT_MID_VALUE : String;public static const DAE_FORMAT_HINT_HIGH_VALUE : String;public static const DAE_FORMAT_HINT_SRGB_GAMMA_VALUE : String;public static const DAE_FORMAT_HINT_NORMALIZED3_VALUE : String;public static const DAE_FORMAT_HINT_NORMALIZED4_VALUE : String;public static const DAE_FORMAT_HINT_COMPRESSABLE_VALUE : String;public static const DAE_EMITTER_ELEMENT : String;public static const DAE_LIBRARY_EMITTER_ELEMENT : String;public static const DAE_INSTANCE_EMITTER_ELEMENT : String;public static const DAE_ACCESSOR_ELEMENT : String;public static const DAE_ANIMATION_ELEMENT : String;public static const DAE_ASSET_ELEMENT : String;public static const DAE_CAMERA_ELEMENT : String;public static const DAE_CHANNEL_ELEMENT : String;public static const DAE_CHANNELS_ELEMENT : String;public static const DAE_COLLADA_ELEMENT : String;public static const DAE_CONTROLLER_ELEMENT : String;public static const DAE_DEPTH_ELEMENT : String;public static const DAE_EXTRA_ELEMENT : String;public static const DAE_RANGE_ELEMENT : String;public static const DAE_BOOL_ARRAY_ELEMENT : String;public static const DAE_FLOAT_ARRAY_ELEMENT : String;public static const DAE_GEOMETRY_ELEMENT : String;public static const DAE_HOLE_ELEMENT : String;public static const DAE_IDREF_ARRAY_ELEMENT : String;public static const DAE_IMAGE_ELEMENT : String;public static const DAE_INPUT_ELEMENT : String;public static const DAE_INT_ARRAY_ELEMENT : String;public static const DAE_JOINTS_ELEMENT : String;public static const DAE_LIGHT_ELEMENT : String;public static const DAE_LINES_ELEMENT : String;public static const DAE_LINESTRIPS_ELEMENT : String;public static const DAE_LOOKAT_ELEMENT : String;public static const DAE_MATERIAL_ELEMENT : String;public static const DAE_MATRIX_ELEMENT : String;public static const DAE_MESH_ELEMENT : String;public static const DAE_NAME_ARRAY_ELEMENT : String;public static const DAE_NODE_ELEMENT : String;public static const DAE_OPTICS_ELEMENT : String;public static const DAE_PARAMETER : String;public static const DAE_PASS_ELEMENT : String;public static const DAE_POLYGON_ELEMENT : String;public static const DAE_POLYGONHOLED_ELEMENT : String;public static const DAE_POLYGONS_ELEMENT : String;public static const DAE_POLYLIST_ELEMENT : String;public static const DAE_REST_LENGTH_ELEMENT : String;public static const DAE_ROTATE_ELEMENT : String;public static const DAE_SCALE_ELEMENT : String;public static const DAE_SCENE_ELEMENT : String;public static const DAE_SHADER : String;public static const DAE_SOURCE_ELEMENT : String;public static const DAE_SPLINE_ELEMENT : String;public static const DAE_SKEW_ELEMENT : String;public static const DAE_TECHNIQUE_ELEMENT : String;public static const DAE_TEXTURE_ELEMENT : String;public static const DAE_TEXTURE_SURFACE_ELEMENT : String;public static const DAE_TRANSLATE_ELEMENT : String;public static const DAE_TRIANGLES_ELEMENT : String;public static const DAE_TRIFANS_ELEMENT : String;public static const DAE_TRIM_GROUP : String;public static const DAE_TRISTRIPS_ELEMENT : String;public static const DAE_VERTEX_ELEMENT : String;public static const DAE_VERTICES_ELEMENT : String;public static const DAE_WIDTH_ELEMENT : String;public static const DAE_BINDMATRIX_SKIN_INPUT : String;public static const DAE_JOINT_SKIN_INPUT : String;public static const DAE_WEIGHT_SKIN_INPUT : String;public static const DAE_INPUT_ANIMATION_INPUT : String;public static const DAE_OUTPUT_ANIMATION_INPUT : String;public static const DAE_INTANGENT_ANIMATION_INPUT : String;public static const DAE_OUTTANGENT_ANIMATION_INPUT : String;public static const DAE_INTERPOLATION_ANIMATION_INPUT : String;public static const DAEFC_TCB_ANIMATION_INPUT : String;public static const DAEFC_EASE_INOUT_ANIMATION_INPUT : String;public static const DAE_X_UP : String;public static const DAE_Y_UP : String;public static const DAE_Z_UP : String;public static const DAESHD_DOUBLESIDED_PARAMETER : String;public static const DAEMAX_MAX_PROFILE : String;public static const DAEMAX_TARGET_CAMERA_PARAMETER : String;public static const DAEMAX_ASPECTRATIO_LIGHT_PARAMETER : String;public static const DAEMAX_TARGET_LIGHT_PARAMETER : String;public static const DAEMAX_DEFAULT_TARGET_DIST_LIGHT_PARAMETER : String;public static const DAEMAX_OUTERCONE_LIGHT_PARAMETER : String;public static const DAEMAX_OVERSHOOT_LIGHT_PARAMETER : String;public static const DAEMAX_SPECLEVEL_MATERIAL_PARAMETER : String;public static const DAEMAX_DISPLACEMENT_MATERIAL_PARAMETER : String;public static const DAEMAX_EMISSIONLEVEL_MATERIAL_PARAMETER : String;public static const DAEMAX_FACETED_MATERIAL_PARAMETER : String;public static const DAEMAX_FILTERCOLOR_MATERIAL_PARAMETER : String;public static const DAEMAX_INDEXOFREFRACTION_MATERIAL_PARAMETER : String;public static const DAEMAX_USERPROPERTIES_NODE_PARAMETER : String;public static const DAEMAX_WIREFRAME_MATERIAL_PARAMETER : String;public static const DAEMAX_FACEMAP_MATERIAL_PARAMETER : String;public static const DAEMAX_AMOUNT_TEXTURE_PARAMETER : String;public static const DAEMAX_CAMERA_TARGETDISTANCE_PARAMETER : String;public static const DAEMAX_FRAMERATE_PARAMETER : String;public static const DAEMAX_DECAY_TYPE : String;public static const DAEMAX_DECAY_START_PARAMETER : String;public static const DAEMAX_USE_NEAR_ATTEN_PARAMETER : String;public static const DAEMAX_NEAR_ATTEN_START_PARAMETER : String;public static const DAEMAX_NEAR_ATTEN_END_PARAMETER : String;public static const DAEMAX_USE_FAR_ATTEN_PARAMETER : String;public static const DAEMAX_FAR_ATTEN_START_PARAMETER : String;public static const DAEMAX_FAR_ATTEN_END_PARAMETER : String;public static const DAEMAX_SHADOW_ATTRIBS : String;public static const DAEMAX_SHADOW_TYPE : String;public static const DAEMAX_SHADOW_TYPE_MAP : String;public static const DAEMAX_SHADOW_TYPE_RAYTRACE : String;public static const DAEMAX_SHADOW_AFFECTS : String;public static const DAEMAX_SHADOW_LIST_NODE : String;public static const DAEMAX_SHADOW_LIST_EXCLUDES : String;public static const DAEMAX_SHADOW_LIST_ILLUMINATES : String;public static const DAEMAX_SHADOW_LIST_CASTS : String;public static const DAEMAX_LIGHT_AFFECTS_SHADOW : String;public static const DAEMAX_PROJ_IMAGE : String;public static const DAEMAX_LIGHT_MAP : String;public static const DAEMAX_SHADOW_MAP : String;public static const DAEMAX_SHADOW_PROJ_COLOR : String;public static const DAEMAX_SHADOW_PROJ_COLOR_MULT : String;public static const DAEMAX_SKY_LIGHT : String;public static const DAEMAX_SKY_RAYS_PER_SAMPLE_PARAMETER : String;public static const DAEMAX_SKY_RAY_BIAS_PARAMETER : String;public static const DAEMAX_SKY_CAST_SHADOWS_PARAMETER : String;public static const DAEMAX_SKY_COLOR_MAP : String;public static const DAEMAX_SKY_COLOR_MAP_ON_PARAMETER : String;public static const DAEMAX_SKY_COLOR_MAP_AMOUNT_PARAMETER : String;public static const DAEMAX_SKY_SKYMODE : String;public static const DAEMAX_SKY_INTENSITY_ON : String;public static const DAEMAX_CAMERA_MOTIONBLUR_ELEMENT : String;public static const DAEMAX_CAMERA_MB_DISPLAYPASSES_PARAMETER : String;public static const DAEMAX_CAMERA_MB_TOTALPASSES_PARAMETER : String;public static const DAEMAX_CAMERA_MB_DURATION_PARAMETER : String;public static const DAEMAX_CAMERA_MB_BIAS_PARAMETER : String;public static const DAEMAX_CAMERA_MB_NORMWEIGHTS_PARAMETER : String;public static const DAEMAX_CAMERA_MB_DITHERSTRENGTH_PARAMETER : String;public static const DAEMAX_CAMERA_MB_TILESIZE_PARAMETER : String;public static const DAEMAX_CAMERA_MB_DISABLEFILTER_PARAMETER : String;public static const DAEMAX_CAMERA_MB_DISABLEANTIALIAS_PARAMETER : String;public static const DAEMAYA_MAYA_PROFILE : String;public static const DAEMAYA_VAPERTURE_PARAMETER : String;public static const DAEMAYA_HAPERTURE_PARAMETER : String;public static const DAEMAYA_LENSSQUEEZE_PARAMETER : String;public static const DAEMAYA_PENUMBRA_LIGHT_PARAMETER : String;public static const DAEMAYA_DROPOFF_LIGHT_PARAMETER : String;public static const DAEMAYA_AMBIENTSHADE_LIGHT_PARAMETER : String;public static const DAEMAYA_NOTE_PARAMETER : String;public static const DAEMAYA_ENDTIME_PARAMETER : String;public static const DAEMAYA_STARTTIME_PARAMETER : String;public static const DAEMAYA_DRIVER_INPUT : String;public static const DAEMAYA_WEIGHT_INPUT : String;public static const DAEMAYA_BLINDNAME_PARAMETER : String;public static const DAEMAYA_BLINDTYPE : String;public static const DAEMAYA_DOUBLE_SIDED_PARAMETER : String;public static const DAEMAYA_LAYER_PARAMETER : String;public static const DAEMAYA_LONGNAME_PARAMETER : String;public static const DAEMAYA_PREINFINITY_PARAMETER : String;public static const DAEMAYA_POSTINFINITY_PARAMETER : String;public static const DAEMAYA_SHORTNAME_PARAMETER : String;public static const DAEMAYA_TEXTURE_WRAPU_PARAMETER : String;public static const DAEMAYA_TEXTURE_WRAPV_PARAMETER : String;public static const DAEMAYA_TEXTURE_MIRRORU_PARAMETER : String;public static const DAEMAYA_TEXTURE_MIRRORV_PARAMETER : String;public static const DAEMAYA_TEXTURE_COVERAGEU_PARAMETER : String;public static const DAEMAYA_TEXTURE_COVERAGEV_PARAMETER : String;public static const DAEMAYA_TEXTURE_TRANSFRAMEU_PARAMETER : String;public static const DAEMAYA_TEXTURE_TRANSFRAMEV_PARAMETER : String;public static const DAEMAYA_TEXTURE_ROTFRAME_PARAMETER : String;public static const DAEMAYA_TEXTURE_STAGGER_PARAMETER : String;public static const DAEMAYA_TEXTURE_REPEATU_PARAMETER : String;public static const DAEMAYA_TEXTURE_REPEATV_PARAMETER : String;public static const DAEMAYA_TEXTURE_OFFSETU_PARAMETER : String;public static const DAEMAYA_TEXTURE_OFFSETV_PARAMETER : String;public static const DAEMAYA_TEXTURE_ROTATEUV_PARAMETER : String;public static const DAEMAYA_TEXTURE_NOISEU_PARAMETER : String;public static const DAEMAYA_TEXTURE_NOISEV_PARAMETER : String;public static const DAEMAYA_TEXTURE_FAST_PARAMETER : String;public static const DAEMAYA_TEXTURE_BLENDMODE_PARAMETER : String;public static const DAEMAYA_PROJECTION_ELEMENT : String;public static const DAEMAYA_PROJECTION_TYPE : String;public static const DAEMAYA_PROJECTION_MATRIX_PARAMETER : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeAccessor.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeAccessor extends DaeEntity{/**
count - required
*/
public var count : uint;/**
source - required
*/
public var source : String;/**
offset - optional - default 0
*/
public var offset : uint;/**
stride - optional - default 1
*/
public var stride : uint;/**
params - optional - 0 or more
*/
public var params : Object;/**
* 		 * @param	node		 * @return
*/
public function DaeAccessor (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeAnimation.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeChannel;import org.ascollada.core.DaeEntity;import org.ascollada.core.DaeSampler;import org.ascollada.core.DaeSource;import org.ascollada.namespaces.collada;import org.ascollada.types.DaeAddressSyntax;/**
*
*/
public class DaeAnimation extends DaeEntity{/**
channels
*/
public var channels : Array;/**
child animations
*/
public var animations : Array;private static var _newID : int;/**
* 		 * @param	node		 * 		 * @return
*/
public function DaeAnimation (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeAnimationClip.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;/**
*
*/
public class DaeAnimationClip extends DaeEntity{/**
start time
*/
public var start : Number;/**
end time
*/
public var end : Number;/**

*/
public var instance_animation : Array;/**
* 		 * @param	node		 * 		 * @return
*/
public function DaeAnimationClip (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeAnimationCurve.as
package org.ascollada.core{import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeAnimationCurve extends DaeEntity{public static const INTERPOLATION_STEP : uint;public static const INTERPOLATION_LINEAR : uint;public static const INTERPOLATION_BEZIER : uint;public static const INTERPOLATION_TCB : uint;public static const INTERPOLATION_UNKNOWN : uint;public static const INTERPOLATION_DEFAULT : uint;public static const INFINITY_CONSTANT : uint;public static const INFINITY_LINEAR : uint;public static const INFINITY_CYCLE : uint;public static const INFINITY_CYCLE_RELATIVE : uint;public static const INFINITY_OSCILLATE : uint;public static const INFINITY_UNKNOWN : uint;public static const INFINITY_DEFAULT : uint;public var keys : Array;public var keyValues : Array;public var interpolations : Array;public var inTangents : Array;public var outTangents : Array;public var tcbParameters : Array;public var easeInOuts : Array;public var preInfinity : uint;public var postInfinity : uint;public var interpolationType : uint;/**
* 		 * @param	keys		 * @param	keyValues
*/
public function DaeAnimationCurve (keys:Array = null, keyValues:Array = null);/**
* main workhorse for the animation system.		 * 		 * @param	time		 * 		 * @return
*/
public function evaluate (dt:Number) : Number;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeAsset.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeAsset extends DaeEntity{public var contributors : Array;public var created : String;public var keywords : String;public var modified : String;public var title : String;public var subject : String;public var revision : String;public var unit_meter : Number;public var unit_name : String;public var yUp : String;/**
* 		 * @param	node		 * @return
*/
public function DaeAsset (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;/**
* 		 * @param	indent
*/
public function write (indent:String = "") : String;/**
* 		 * @param	asset		 * 		 * @return
*/
private function parseContributors (asset:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeBlendWeight.as
package org.ascollada.core{/**
*
*/
public class DaeBlendWeight{public var vertexIndex : uint;public var joint : String;public var weight : Number;public var originalWeight : Number;/**
* 		 * @param	vertexIndex		 * @param	weight
*/
public function DaeBlendWeight (vertexIndex:uint = 0, joint:String = "", weight:Number = 0.0);/**
* 		 * @return
*/
public function toString () : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeCamera.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;public class DaeCamera extends DaeEntity{public static const TYPE_X : uint;public static const TYPE_Y : uint;public var ortho : Boolean;public var fov : Number;public var mag : Number;public var aspect_ratio : Number;public var near : Number;public var far : Number;public var target : String;public var type : uint;/**
* 		 * @param	node		 * @return
*/
public function DaeCamera (document:DaeDocument, node:XML);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;/**
* 		 * @param	node		 * @return
*/
private function readOptics (node:XML) : void;/**
* 		 * @param	node		 * @return
*/
private function readTechniqueCommon (node:XML) : void;/**
* 		 * @param	node		 * @return
*/
private function readPerspective (node:XML) : void;/**
* 		 * @param	node		 * @return
*/
private function readOrthogonal (node:XML) : void;/**
* 		 * @param	node		 * @return
*/
private function readExtra (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeChannel.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.types.DaeAddressSyntax;/**
*
*/
public class DaeChannel extends DaeEntity{/**
source - required
*/
public var source : String;/**
target - required
*/
public var target : String;/**
some info on the target attribute
*/
public var syntax : DaeAddressSyntax;/**

*/
public var sampler : DaeSampler;/**
* 		 * @param	node		 *  		 * @return
*/
public function DaeChannel (document:DaeDocument, node:XML);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeContributor.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeContributor extends DaeEntity{public var author : String;public var authoring_tool : String;public var comment : String;public var source_data : String;/**
* 		 * @param	node		 * @return
*/
public function DaeContributor (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;/**
* 		 * @param	indent
*/
public function write (indent:String = "") : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeController.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.core.DaeMorph;import org.ascollada.core.DaeSkin;import org.ascollada.utils.Logger;/**
*
*/
public class DaeController extends DaeEntity{public static const TYPE_SKIN : uint;public static const TYPE_MORPH : uint;/**

*/
public var type : uint;/**

*/
public var skin : DaeSkin;/**

*/
public var morph : DaeMorph;/**
* 		 * @param	node		 * @return
*/
public function DaeController (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeDocument.as
package org.ascollada.core{import flash.display.Bitmap;import flash.display.LoaderInfo;import flash.net.URLRequest;import flash.events.IOErrorEvent;import flash.events.Event;import flash.display.Loader;import org.ascollada.ASCollada;import org.ascollada.fx.DaeEffect;import org.ascollada.fx.DaeMaterial;import org.ascollada.namespaces.*;import org.ascollada.physics.DaePhysicsScene;import org.ascollada.utils.Logger;import org.ascollada.types.DaeAddressSyntax;/**
*
*/
public class DaeDocument extends DaeEntity{public static const X_UP : uint;public static const Y_UP : uint;public static const Z_UP : uint;public var COLLADA : XML;public var version : String;public var sources : Object;public var animation_clips : Object;public var animations : Object;public var animatables : Object;public var controllers : Object;public var effects : Object;public var images : Object;public var materials : Object;public var geometries : Object;public var physics_scenes : Object;public var visual_scenes : Object;public var nodes : Object;public var cameras : Object;public var vscene : DaeVisualScene;public var pscene : DaePhysicsScene;public var yUp : uint;public var materialSymbolToTarget : Object;public var materialTargetToSymbol : Object;public var numSources : int;public var baseUrl : String;private var _waitingSources : Array;private var _queuedImages : Array;private var _fileSearchPaths : Array;private var _currentImagePath : int;private var _loadingImage : DaeImage;public function get waitingSources () : Array;/**
*
*/
public function DaeDocument (object:Object, async:Boolean = false);/**
* 		 * @return
*/
private function buildMaterialTable () : void;/**
* 		 * @param	id		 * @return
*/
private function findDaeNodeById (node:DaeNode, id:String, useSID:Boolean = false) : DaeNode;/**
*
*/
public function addFileSearchPath (path:String) : void;/**
* 		 * @param	id		 * @return
*/
public function getDaeNodeById (id:String, useSID:Boolean = false) : DaeNode;/**
* 		 * @param	id		 * @return
*/
public function getDaeNodeByIdOrSID (id:String) : DaeNode;/**
*
*/
public function getDaeChannelsForID (id:String) : Array;/**
*
*/
private function findDaeInstanceGeometry (node:DaeNode, url:String) : DaeInstanceGeometry;/**
*
*/
public function getDaeInstanceGeometry (url:String) : DaeInstanceGeometry;/**
*
*/
public function readNextSource () : Boolean;/**
*
*/
public function readNextImage () : Boolean;private function loadImage () : void;private function onImageComplete (event:Event) : void;private function onImageIOError (event:IOErrorEvent) : void;/**
*
*/
public function destroy () : void;/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;/**
*
*/
public function readAfterSources () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibAnimations () : void;/**
*
*/
private function readAnimation (animation:DaeAnimation) : void;/**
* 		 * @param	node		 * @return
*/
private function readLibAnimationClips () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibCameras () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibControllers () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibEffects () : void;/**
* 		 * @param	async		 * @return
*/
private function readLibGeometries () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibImages () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibMaterials () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibNodes () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibPhysicsScenes () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibVisualScenes () : void;/**
* 		 * @return
*/
private function readScene () : void;/**
*
*/
private function readSources () : void;/**
*		 * @return
*/
protected function buildImagePath (meshFolderPath:String, imgPath:String) : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeEntity.as
package org.ascollada.core{import flash.events.EventDispatcher;import org.ascollada.ASCollada;import org.ascollada.namespaces.*;import org.ascollada.utils.StringUtil;/**
*
*/
public class DaeEntity extends EventDispatcher{/**

*/
public var id : String;/**

*/
public var name : String;/**

*/
public var sid : String;/**

*/
public var asset : DaeAsset;/**

*/
public var extras : Object;/**

*/
public var async : Boolean;/**

*/
public var document : DaeDocument;/**
* 		 * @param	node
*/
public function DaeEntity (document:DaeDocument, node:XML = null, async:Boolean = false);/**
*
*/
public function destroy () : void;/**
* 		 * @param	node		 * @param	name		 * @return
*/
public function getAttributeAsFloat (node:XML, name:String, defaultValue:Number = 0) : Number;/**
* 		 * @param	node		 * @param	name		 * @return
*/
public function getAttributeAsInt (node:XML, name:String, defaultValue:int = 0) : int;/**
* 		 * @param	node		 * @param	name		 * @param	stripPound		 * @return
*/
public function getAttribute (node:XML, name:String, stripPound:Boolean = true) : String;/**
* 		 * @param	node		 * @return
*/
public function getBools (node:XML) : Array;/**
* 		 * @param	node		 * @return
*/
public function getFloats (node:XML) : Array;/**
* 		 * @param	node		 * @return
*/
public function getInts (node:XML) : Array;/**
* 		 * @param	node		 * @return
*/
public function getStrings (node:XML) : Array;/**
* 		 * @param	parent		 * @param	nodeName		 * @return
*/
public function getNode (parent:XML, nodeName:String) : XML;/**
* 		 * @param	parent		 * @param	nodeName		 * @return
*/
public function getNodeById (parent:XML, nodeName:String, id:String) : XML;/**
* 		 * @param	parent		 * @return
*/
public function getNodeContent (parent:XML) : String;/**
* 		 * @param	parent		 * @param	nodeName		 * @return
*/
public function getNodeList (parent:XML, nodeName:String) : XMLList;/**
* 		 * @return
*/
public function read (node:XML) : void;public function write (indent:String = "") : String;public function writeSimpleEndElement (nodeName:String, indent:String = "") : String;public function writeSimpleStartElement (nodeName:String, indent:String = "") : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeGeometry.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.physics.DaeConvexMesh;import org.ascollada.utils.Logger;/**
*
*/
public class DaeGeometry extends DaeEntity{public var convex_mesh : DaeConvexMesh;public var mesh : DaeMesh;public var spline : DaeSpline;public var splines : Array;/**
* 		 * @param	node
*/
public function DaeGeometry (document:DaeDocument, node:XML = null, async:Boolean = false);/**
* 		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeImage.as
package org.ascollada.core{import flash.display.BitmapData;import org.ascollada.ASCollada;import org.ascollada.core.DaeAsset;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;/**
*
*/
public class DaeImage extends DaeEntity{/**

*/
public var init_from : String;/**

*/
public var bitmapData : BitmapData;/**
*
*/
public function DaeImage (document:DaeDocument, node:XML = null);public function destroy () : void;/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeInput.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeInput extends DaeEntity{/**

*/
public var semantic : String;/**

*/
public var source : String;/**

*/
public var offset : uint;/**

*/
public var setId : uint;/**
* 		 * @param	node		 * @return
*/
public function DaeInput (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeInstanceController.as
package org.ascollada.core{import org.ascollada.fx.DaeBindMaterial;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;public class DaeInstanceController extends DaeEntity{/**

*/
public var url : String;/**

*/
public var skeleton : String;/**

*/
public var skeletons : Array;/**

*/
public var bindMaterial : DaeBindMaterial;/**
*
*/
public function DaeInstanceController (document:DaeDocument, node:XML = null);/**
*
*/
public function destroy () : void;/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeInstanceGeometry.as
package org.ascollada.core{import org.ascollada.fx.DaeBindMaterial;import org.ascollada.ASCollada;import org.ascollada.fx.DaeBindVertexInput;import org.ascollada.fx.DaeInstanceMaterial;/**
*
*/
public class DaeInstanceGeometry extends DaeEntity{/**

*/
public var url : String;/**

*/
public var bindMaterial : DaeBindMaterial;/**
*
*/
public function DaeInstanceGeometry (document:DaeDocument, node:XML = null);/**
*
*/
public function destroy () : void;/**
*
*/
public function findBindVertexInput (materialId:String, semantic:String) : DaeBindVertexInput;/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeInstanceNode.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeInstanceNode extends DaeEntity{public var url : String;/**
*
*/
public function DaeInstanceNode (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeMesh.as
package org.ascollada.core{import org.ascollada.ASCollada;/**
*
*/
public class DaeMesh extends DaeEntity{/**

*/
public var geometry : DaeGeometry;/**
vertices
*/
public var vertices : DaeVertices;/**

*/
public var primitives : Array;/**
* 		 * @param	node
*/
public function DaeMesh (document:DaeDocument, geometry:DaeGeometry, node:XML = null);/**
*
*/
public function destroy () : void;/**
* 		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeMorph.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;/**
*
*/
public class DaeMorph extends DaeEntity{public static const METHOD_NORMALIZED : String;public static const METHOD_RELATIVE : String;public var source : String;public var targets : DaeSource;public var weights : DaeSource;public var method : String;/**
* 		 * @param	node		 * @return
*/
public function DaeMorph (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeNode.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;import org.ascollada.core.DaeInstanceController;import org.ascollada.core.DaeInstanceGeometry;import org.ascollada.types.DaeTransform;/**
*
*/
public class DaeNode extends DaeEntity{public static const TYPE_NODE : uint;public static const TYPE_JOINT : uint;/**
node type, can be TYPE_NODE or TYPE_JOINT
*/
public var type : uint;/**
array of childnodes
*/
public var nodes : Array;/**

*/
public var transforms : Array;/**
array of controller instances
*/
public var controllers : Array;/**
array of geometry instances
*/
public var geometries : Array;/**
array of instance_node instances
*/
public var instance_nodes : Array;/**
array of instance_cameras
*/
public var instance_cameras : Array;/**

*/
public var channels : Array;/**

*/
public var hasMorphController : Boolean;/**

*/
public var hasSkinController : Boolean;private var _yUp : uint;/**
* 		 * @param	node		 * @return
*/
public function DaeNode (document:DaeDocument, node:XML = null, yUp:uint = 1);/**
* 		 * @param	id		 * @return
*/
public function findController (id:String) : DaeInstanceController;/**
* 		 * @param	sid		 * @return
*/
public function findMatrixBySID (sid:String) : DaeTransform;/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaePrimitive.as
package org.ascollada.core{import flash.utils.Dictionary;import org.ascollada.ASCollada;public class DaePrimitive extends DaeEntity{/**
parent element
*/
public var mesh : DaeMesh;/**
The number of line primitives. required
*/
public var count : uint;/**
materialname
*/
public var material : String;/**
vcount use by polygon primitives
*/
public var vcount : Array;/**
primitive type
*/
public var type : String;public var polygons : Array;private var _inputs : Dictionary;/**
normals
*/
public function get normals () : Array;/**
vertex indices
*/
public function get vertices () : Array;/**
* 		 * @param	mesh		 * @param	node		 * @return
*/
public function DaePrimitive (document:DaeDocument, mesh:DaeMesh, node:XML = null);/**
* gets the texcoords by set.		 * 		 * @param	setID		 * @return
*/
public function getTexCoords (setID:uint = 0) : Array;/**
* 		 * @return
*/
public function read (node:XML) : void;/**
* 		 * @param	node		 * @return
*/
protected function parse (node:XML) : void;private function parsePolygons (node:XML) : void;/**
* 		 * @param	node		 * @return
*/
private function checkNode (node:XML) : Boolean;/**
* 		 * @param	semantic		 * @return
*/
public function getFirstInput (semantic:String) : Array;/**
* 		 * @param	semantic		 * @return
*/
private function getInputBySet (semantic:String, setID:int) : Array;/**
* 		 * @param	semantic		 * @return
*/
private function getInputCount (semantic:String) : uint;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeSampler.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.namespaces.collada;/**
*
*/
public class DaeSampler extends DaeEntity{/**

*/
public var type : String;/**

*/
public var values : Array;/**

*/
public var input : DaeSource;/**

*/
public var output : DaeSource;/**

*/
public var interpolation : DaeSource;/**

*/
public var in_tangent : DaeSource;/**

*/
public var out_tangent : DaeSource;/**
* 		 * @param	node		 *  		 * @return
*/
public function DaeSampler (document:DaeDocument, node:XML);/**
*
*/
public function destroy () : void;/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeSkin.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.core.DaeSource;import org.ascollada.core.DaeVertexWeights;import org.ascollada.utils.Logger;/**
*
*/
public class DaeSkin extends DaeEntity{/**
bind shape matrix
*/
public var bind_shape_matrix : Array;/**

*/
public var source : String;/**

*/
public var joints : Array;/**

*/
public var bind_matrices : Array;/**

*/
public var vertex_weights : Array;/**

*/
public var blendWeightsByJointID : Object;/**

*/
public var jointsType : String;/**
* 		 * @param	node		 * @return
*/
public function DaeSkin (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function findJointBindMatrix (node:DaeNode) : Array;/**
* 		 * @param	id		 * @return
*/
public function findJointBindMatrix2 (id:String) : Array;/**
* 		 * @param	node		 * 		 * @return
*/
public function findJointVertexWeights (node:DaeNode) : Array;/**
* 		 * @param	node		 * 		 * @return
*/
public function findJointVertexWeightsByIDOrSID (id:String) : Array;/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;/**
* normalize blendweights.		 * 		 * @param	blendWeights	the weights to normalize.
*/
public function normalizeBlendWeights (blendWeights:Array) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeSource.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeAccessor;import org.ascollada.core.DaeEntity;import org.ascollada.types.DaeArray;/**
*
*/
public class DaeSource extends DaeEntity{/**

*/
public var accessor : DaeAccessor;/**

*/
public var values : Array;/**
* constructor.		 * 		 * @param	node		 * 		 * @return
*/
public function DaeSource (document:DaeDocument, node:XML);public function destroy () : void;/**
* 		 * @param	node		 * 		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeSpline.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.core.DaeInput;import org.ascollada.core.DaeSource;/**
*
*/
public class DaeSpline extends DaeEntity{/**

*/
public var vertices : Array;/**

*/
public var closed : Boolean;/**
* 		 * @param	node		 * @return
*/
public function DaeSpline (document:DaeDocument, node:XML);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeVertexWeights.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;/**
*
*/
public class DaeVertexWeights extends DaeEntity{/**

*/
public var count : int;/**

*/
public var inputs : Array;/**

*/
public var v : Array;/**

*/
public var vcounts : Array;/**
* 		 * @param	node		 * @return
*/
public function DaeVertexWeights (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeVertices.as
package org.ascollada.core{import org.ascollada.ASCollada;/**
* <vertices> element.
*/
public class DaeVertices extends DaeEntity{public var source : DaeSource;/**
* 		 * @param	node		 * @return
*/
public function DaeVertices (document:DaeDocument, node:XML = null);/**
*
*/
public function destroy () : void;/**
* 		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeVisualScene.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.core.DaeNode;import org.ascollada.utils.Logger;/**
*
*/
public class DaeVisualScene extends DaeEntity{/**

*/
public var nodes : Array;private var _yUp : uint;public function get endTime () : Number;public function get frameRate () : Number;public function get startTime () : Number;/**
* 		 * @param	node		 * @return
*/
public function DaeVisualScene (document:DaeDocument, node:XML = null, yUp:uint = 1);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeBindMaterial.as
package org.ascollada.fx{import org.ascollada.ASCollada;import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;import org.ascollada.namespaces.collada;/**
* @author Tim Knip / floorplanner.com
*/
public class DaeBindMaterial extends DaeEntity{/**

*/
public var instanceMaterials : Array;/**
*
*/
public function DaeBindMaterial (document:DaeDocument, node:XML = null, async:Boolean = false);/**
*
*/
public function destroy () : void;/**
*
*/
public function getInstanceMaterialBySymbol (symbol:String) : DaeInstanceMaterial;/**
*
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeBindVertexInput.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
* bind_vertex_input element.
*/
public class DaeBindVertexInput extends DaeEntity{public var semantic : String;public var input_semantic : String;public var input_set : int;public function DaeBindVertexInput (document:DaeDocument, node:XML = null);/**
* 	 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeBlinn.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.types.DaeColorOrTexture;import org.ascollada.utils.Logger;/**
*
*/
public class DaeBlinn extends DaeLambert{public var specular : DaeColorOrTexture;public var shininess : Number;/**
* 		 * @param	node		 * @return
*/
public function DaeBlinn (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeConstant.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.types.DaeColorOrTexture;/**
*
*/
public class DaeConstant extends DaeEntity{public var emission : DaeColorOrTexture;public var reflective : DaeColorOrTexture;public var reflectivity : Number;public var transparent : DaeColorOrTexture;public var transparency : Number;public var index_of_refraction : Number;/**
* 		 * @param	node		 * @return
*/
public function DaeConstant (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeEffect.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.types.DaeColorOrTexture;import org.ascollada.utils.Logger;/**
*
*/
public class DaeEffect extends DaeEntity{/**

*/
public var color : DaeConstant;/**

*/
public var newparams : Object;/**

*/
public var texture_url : String;/**

*/
public var double_sided : Boolean;/**

*/
public var wireframe : Boolean;/**
* 		 * @param	node		 * @return
*/
public function DaeEffect (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;private function readExtra (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeInstanceMaterial.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeInstanceMaterial extends DaeEntity{/**
symbol - required
*/
public var symbol : String;/**
target - required
*/
public var target : String;private var _bindVertexInputs : Array;/**
*
*/
public function get bindVertexInputs () : Array;/**
*
*/
public function DaeInstanceMaterial (document:DaeDocument, node:XML = null);/**
* 		 * @param	semantic		 * @param	input_semantic		 * @return
*/
public function findBindVertexInput (semantic:String, input_semantic:String = "TEXCOORD") : DaeBindVertexInput;/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeLambert.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.types.DaeColorOrTexture;/**
*
*/
public class DaeLambert extends DaeConstant{public var ambient : DaeColorOrTexture;public var diffuse : DaeColorOrTexture;/**
* 		 * @param	node		 * @return
*/
public function DaeLambert (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeMaterial.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeAsset;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;/**
*
*/
public class DaeMaterial extends DaeEntity{public var effect : String;/**
* 		 * @param	node		 * @return
*/
public function DaeMaterial (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeNewParam.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;public class DaeNewParam extends DaeEntity{public var type : String;public var surface : DaeSurface;public var sampler2D : DaeSampler2D;/**
* 		 * @param	node
*/
public function DaeNewParam (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaePhong.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.types.DaeColorOrTexture;/**
*
*/
public class DaePhong extends DaeLambert{public var specular : DaeColorOrTexture;public var shininess : Number;/**
* 		 * @param	node		 * @return
*/
public function DaePhong (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeSampler2D.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;public class DaeSampler2D extends DaeEntity{/**
source - required
*/
public var source : String;/**
* 		 * @param	node		 * @return
*/
public function DaeSampler2D (document:DaeDocument, node:XML);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeSurface.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;public class DaeSurface extends DaeEntity{public var type : String;public var init_from : String;/**
* 		 * @param	node		 * @return
*/
public function DaeSurface (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeTexture.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;public class DaeTexture extends DaeEntity{/**

*/
public var texture : String;/**

*/
public var texcoord : String;/**
*
*/
public function DaeTexture (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\io\DaeReader.as
package org.ascollada.io{import org.ascollada.core.DaeDocument;import org.ascollada.namespaces.collada;import org.ascollada.utils.Logger;import flash.events.Event;import flash.events.EventDispatcher;import flash.events.IOErrorEvent;import flash.events.ProgressEvent;import flash.events.TimerEvent;import flash.net.URLLoader;import flash.net.URLRequest;import flash.utils.Timer;/**
* @author Tim Knip	 *
*/
public class DaeReader extends EventDispatcher{public var document : DaeDocument;public var async : Boolean;public var parseMessage : String;public var baseUrl : String;private var _sourceTimer : Timer;private var _fileSearchPaths : Array;/**
*
*/
public function DaeReader (async:Boolean = false);/**
* 		 * @param	filename
*/
public function read (filename:String, fileSearchPaths:Array = null) : void;/**
* Loads the COLLADA document.		 * 		 * @param	data		 * @param fileSearchPaths		 * 		 * @return
*/
public function loadDocument (data:*, fileSearchPaths:Array = null) : DaeDocument;/**
* 		 * @param	event		 * @return
*/
private function completeHandler (event:Event) : void;private function progressHandler (event:ProgressEvent) : void;private function handleIOError (event:IOErrorEvent) : void;private function loadNextSource (event:TimerEvent) : void;/**
*
*/
private function onImagesComplete (event:Event) : void;private function addListenersToLoader (loader:URLLoader) : void;private function removeListenersFromLoader (loader:URLLoader) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\io\DaeWriter.as
package org.ascollada.io{import org.ascollada.ASCollada;import org.ascollada.core.*;import org.papervision3d.Papervision3D;/**
*
*/
public class DaeWriter{/**
asset
*/
public var asset : DaeAsset;/**
* 		 * @return
*/
public function DaeWriter (asset:DaeAsset = null);public function write () : void;/**
* 		 * @param	indent		 * @return
*/
private function writeAsset (indent:String = "") : String;protected function writeSimpleEndElement (nodeName:String, indent:String = "") : String;protected function writeSimpleStartElement (nodeName:String, indent:String = "") : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\namespaces\collada.as
package org.ascollada.namespaces{}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeBox.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeBox extends DaeEntity{public var half_extents : Array;/**
* 		 * @param	node		 * @return
*/
public function DaeBox (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeCapsule.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeCapsule extends DaeEntity{public var height : Number;public var radius : Array;/**
* 		 * @param	node		 * @return
*/
public function DaeCapsule (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeConvexMesh.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeGeometry;import org.ascollada.core.DaeMesh;/**
*
*/
public class DaeConvexMesh extends DaeMesh{public var convex_hull_off : String;public var isHull : Boolean;/**
* 		 * @param	node		 * @return
*/
public function DaeConvexMesh (document:DaeDocument, geometry:DaeGeometry, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeCylinder.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeCylinder extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeCylinder (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeForceField.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeForceField extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeForceField (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeInstanceForceField.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeInstanceForceField extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeInstanceForceField (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeInstancePhysicsMaterial.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeInstancePhysicsMaterial extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeInstancePhysicsMaterial (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeInstancePhysicsModel.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeInstancePhysicsModel extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeInstancePhysicsModel (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeInstanceRigidBody.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeInstanceRigidBody extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeInstanceRigidBody (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaePhysicsMaterial.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaePhysicsMaterial extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaePhysicsMaterial (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaePhysicsModel.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaePhysicsModel extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaePhysicsModel (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaePhysicsScene.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaePhysicsScene extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaePhysicsScene (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaePlane.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaePlane extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaePlane (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeRigidBody.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeRigidBody extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeRigidBody (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeRigidConstraint.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeRigidConstraint extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeRigidConstraint (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeShape.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeShape extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeShape (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeSphere.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeSphere extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeSphere (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeTaperedCapsule.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeTaperedCapsule extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeTaperedCapsule (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeTaperedCylinder.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeTaperedCylinder extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeTaperedCylinder (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\types\DaeAddressSyntax.as
package org.ascollada.types{/**
* @author	Tim Knip
*/
public class DaeAddressSyntax{/**

*/
public var targetID : String;/**

*/
public var targetSID : String;/**

*/
public var member : String;/**

*/
public var isArrayAccess : Boolean;/**

*/
public var isDotAccess : Boolean;/**

*/
public var isFullAccess : Boolean;/**

*/
public var arrayIndex0 : int;/**

*/
public var arrayIndex1 : int;/**
* Constructor.
*/
public function DaeAddressSyntax ();/**
*
*/
public static function parse (target:String) : DaeAddressSyntax;/**
*
*/
public function toString () : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\types\DaeArray.as
package org.ascollada.types{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeArray extends DaeEntity{/**

*/
public var values : Array;/**

*/
public var count : int;/**
* 		 * @param	node		 * @return
*/
public function DaeArray (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;/**
* 		 * @param	node		 * 		 * @return
*/
private function getData (node:XML) : Array;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\types\DaeColorOrTexture.as
package org.ascollada.types{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;import org.ascollada.fx.DaeTexture;/**
*
*/
public class DaeColorOrTexture extends DaeEntity{public static const TYPE_COLOR : uint;public static const TYPE_TEXTURE : uint;public static const TYPE_PARAM : uint;public var type : uint;public var color : Array;public var texture : DaeTexture;/**
* 		 * @param	node		 * @return
*/
public function DaeColorOrTexture (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\types\DaeTransform.as
package org.ascollada.types{import org.ascollada.ASCollada;import org.ascollada.utils.Logger;/**
* @author	Tim Knip
*/
public class DaeTransform{/**
type - required
*/
public var type : String;/**
sid - optional
*/
public var sid : String;/**

*/
public var values : Array;/**

*/
public var animated : Boolean;/**
* 		 * @param	type		 * @param	values		 * @return
*/
public function DaeTransform (type:String, sid:String, values:Array);/**
* 		 * @return
*/
public function validateValues () : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\utils\FPS.as
package org.ascollada.utils{import flash.display.Shape;import flash.display.Sprite;import flash.events.Event;import flash.text.TextField;import flash.text.TextFormat;import flash.utils.getTimer;/**
*
*/
public class FPS extends Sprite{public var time : Number;public var frameTime : Number;public var prevFrameTime : Number;public var secondTime : Number;public var prevSecondTime : Number;public var frames : Number;public var fps : String;public var tf : TextField;public var anim : String;public var bar : Shape;/**
* 		 * @return
*/
public function FPS ();/**
* 		 * @param	event		 * @return
*/
private function enterFrameHandler (event:Event) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\utils\Logger.as
package org.ascollada.utils{public class Logger{public static var VERBOSE : Boolean;public static function debug (o:String) : void;public static function error (o:String) : void;public static function fatal (o:String) : void;public static function info (o:String) : void;public static function log (o:String) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\ascollada\utils\StringUtil.as
package org.ascollada.utils{/**
*  The StringUtil utility class is an all-static class with methods for	 *  working with String objects within Flex.	 *  You do not create instances of StringUtil;	 *  instead you call methods such as 	 *  the <code>StringUtil.substitute()</code> method.
*/
public class StringUtil{/**
*  Removes all whitespace characters from the beginning and end	     *  of the specified string.	     *	     *  @param str The String whose whitespace should be trimmed. 	     *	     *  @return Updated String where whitespace was removed from the 	     *  beginning and end.
*/
public static function trim (str:String) : String;/**
*  Removes all whitespace characters from the beginning and end	     *  of each element in an Array, where the Array is stored as a String. 	     *	     *  @param value The String whose whitespace should be trimmed. 	     *	     *  @param separator The String that delimits each Array element in the string.	     *	     *  @return Updated String where whitespace was removed from the 	     *  beginning and end of each element.
*/
public static function trimArrayElements (value:String, delimiter:String) : String;/**
*  Returns <code>true</code> if the specified string is	     *  a single space, tab, carriage return, newline, or formfeed character.	     *	     *  @param str The String that is is being queried. 	     *	     *  @return <code>true</code> if the specified string is	     *  a single space, tab, carriage return, newline, or formfeed character.
*/
public static function isWhitespace (character:String) : Boolean;/**
*  Substitutes "{n}" tokens within the specified string	     *  with the respective arguments passed in.	     *	     *  @param str The string to make substitutions in.	     *  This string can contain special tokens of the form	     *  <code>{n}</code>, where <code>n</code> is a zero based index,	     *  that will be replaced with the additional parameters	     *  found at that index if specified.	     *	     *  @param rest Additional parameters that can be substituted	     *  in the <code>str</code> parameter at each <code>{n}</code>	     *  location, where <code>n</code> is an integer (zero based)	     *  index value into the array of values specified.	     *  If the first parameter is an array this array will be used as	     *  a parameter list.	     *  This allows reuse of this routine in other methods that want to	     *  use the ... rest signature.	     *  For example <pre>	     *     public function myTracer(str:String, ... rest):void	     *     { 	     *         label.text += StringUtil.substitute(str, rest) + "\n";	     *     } </pre>	     *	     *  @return New string with all of the <code>{n}</code> tokens	     *  replaced with the respective arguments specified.	     *	     *  @example	     *	     *  var str:String = "here is some info '{0}' and {1}";	     *  trace(StringUtil.substitute(str, 15.4, true));	     *	     *  // this will output the following string:	     *  // "here is some info '15.4' and true"
*/
public static function substitute (str:String, ...rest) : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\Papervision3D.as
package org.papervision3d{import org.papervision3d.core.log.PaperLogger;/**
* The Papervision3D class contains global properties and settings.
*/
public class Papervision3D{/**
* Indicates if the angles are expressed in degrees (true) or radians (false). The default value is true, degrees.
*/
public static var useDEGREES : Boolean;/**
* Indicates if the scales are expressed in percent (true) or from zero to one (false). The default value is false, i.e. units.
*/
public static var usePERCENT : Boolean;/**
*
*/
public static var useRIGHTHANDED : Boolean;/**
* Enables engine name to be retrieved at runtime or when reviewing a decompiled swf.
*/
public static var NAME : String;/**
* Enables version to be retrieved at runtime or when reviewing a decompiled swf.
*/
public static var VERSION : String;/**
* Enables version date to be retrieved at runtime or when reviewing a decompiled swf.
*/
public static var DATE : String;/**
* Enables copyright information to be retrieved at runtime or when reviewing a decompiled swf.
*/
public static var AUTHOR : String;/**
* This is the main Logger Controller.
*/
public static var PAPERLOGGER : PaperLogger;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\cameras\Camera3D.as
package org.papervision3d.cameras{import flash.geom.Rectangle;import flash.utils.getTimer;import org.papervision3d.core.culling.FrustumCuller;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;/**
* Camera3D is the basic camera used by Papervision3D.	 * </p>	 * 	 * @author Tim Knip
*/
public class Camera3D extends CameraObject3D{protected var _projection : Matrix3D;protected var _prevFocus : Number;protected var _prevZoom : Number;protected var _prevWidth : Number;protected var _prevHeight : Number;protected var _prevOrtho : Boolean;protected var _prevOrthoProjection : Boolean;protected var _prevUseProjection : Boolean;protected var _focusFix : Matrix3D;/**
* Whether this camera uses frustum culling.		 * 		 * @return Boolean
*/
public function set useCulling (value:Boolean) : Void;/**
* Whether this camera uses a projection matrix.
*/
public function set useProjectionMatrix (value:Boolean) : Void;/**
* Sets the distance to the far plane.		 * 		 * @param	value	The distance to the far plane
*/
public function set far (value:Number) : Void;/**
* Sets the distance to the near plane (note that this is simply an alias for #focus).		 * 		 * @param	value	The distance to the near plane
*/
public function set near (value:Number) : Void;/**
* Sets the orthographic scale of the camera		 * 		 * @param value		The value of the orthographic scale
*/
public function set orthoScale (value:Number) : Void;public function get projection () : Matrix3D;/**
* Constructor.		 * 		 * @param	fov		This value is the vertical Field Of View (FOV) in degrees.		 * @param	near	Distance to the near clipping plane.		 * @param	far		Distance to the far clipping plane.		 * @param	useCulling		Boolean indicating whether to use frustum culling. When true all objects outside the view will be culled.		 * @param	useProjection 	Boolean indicating whether to use a projection matrix for perspective.
*/
public function Camera3D (fov:Number = 60, near:Number = 10, far:Number = 5000, useCulling:Boolean = false, useProjection:Boolean = false);/**
* Orbits the camera around the specified target. If no target is specified the 		 * camera's #target property is used. If this camera's #target property equals null		 * the camera orbits the origin (0, 0, 0).		 * 		 * @param	pitch	Rotation around X=axis (looking up or down).		 * @param	yaw		Rotation around Y-axis (looking left or right).		 * @param	useDegrees 	Whether to use degrees for pitch and yaw (defaults to 'true').		 * @param	target	An optional target to orbit around.
*/
public function orbit (pitch:Number, yaw:Number, useDegrees:Boolean = true, target:DisplayObject3D = null) : void;public function projectFaces (faces:Array, object:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* Projects vertices.		 * 		 * @param	object 					The <code>DisplayObject3D</code> to be projected		 * @param	renderSessionData		The <code>RenderSessionData</code> holding the containing the camera properties
*/
public function projectVertices (vertices:Array, object:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* Updates the internal camera settings.		 * 		 * @param	viewport
*/
public function update (viewport:Rectangle) : void;/**
* [INTERNAL-USE] Transforms world coordinates into camera space.		 * 		 * @param	transform	An optional transform.
*/
public function transformView (transform:Matrix3D = null) : void;/**
* Creates a transformation that produces a parallel projection.		 * 		 * @param	left		 * @param	right		 * @param	bottom		 * @param	top		 * @param	near		 * @param	far		 * @return	Matrix3D
*/
public static function createOrthoMatrix (left:Number, right:Number, bottom:Number, top:Number, near:Number, far:Number) : Matrix3D;/**
* Creates a transformation that produces a perspective projection.		 * 		 * @param	fov		 * @param	aspect		 * @param	near		 * @param	far		 * @return	Matrix3D
*/
public static function createPerspectiveMatrix (fov:Number, aspect:Number, near:Number, far:Number) : Matrix3D;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\cameras\CameraType.as
package org.papervision3d.cameras{/**
* CameraTypes are mainly used with BasicView to define which camera to use.
	 * 
	 * @author Tim Knip
	 * @see org.papervision3d.cameras.Camera3D
	 * @see org.papervision3d.cameras.DebugCamera3D
	 * @see org.papervision3d.view.BasicView
	 *
*/
public class CameraType{/**
* The TARGET constant defines a Camera3D targeting x:0, y:0, z:0
*/
public static var TARGET : String;/**
* The FREE constant defines a Camera3D with no target
*/
public static var FREE : String;/**
* The DEBUG constant defines a DebugCamera3D
*/
public static var DEBUG : String;/**
* the SPRING constant defines a SpringCamera3D
*/
public static var SPRING : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\cameras\DebugCamera3D.as
package org.papervision3d.cameras{import flash.display.Sprite;import flash.display.Stage;import flash.events.Event;import flash.events.KeyboardEvent;import flash.events.MouseEvent;import flash.geom.Point;import flash.text.TextField;import flash.text.TextFormat;import flash.ui.Keyboard;import org.papervision3d.view.Viewport3D;/**
* <p>
	 * DebugCamera3D serves as a tool to allow you control
	 * the camera with your mouse and keyboard while displaying information
	 * about the camera when testing your swf. Due to its nature,
	 * the Keyboard and Mouse Events may interfere with your custom Keyboard and Mouse Events.
	 * This camera is in no way intended for production use.
	 * </p>
	 * 
	 * <p>
	 * Click and drag for mouse movement. The keys
	 * are setup as follows:
	 * </p>
	 * <pre><code>
	 * w = forward
	 * s = backward
	 * a = left
	 * d = right
	 * q = rotationZ--
	 * e = rotationZ++
	 * r = fov++
	 * f = fov--
	 * t = near++
	 * g = near--
	 * y = far++
	 * h = far--
	 * </code></pre>
	 * 
	 * @author John Lindquist
*/
public class DebugCamera3D extends Camera3D{/**
@private
*/
protected var _propertiesDisplay : Sprite;/**
@private
*/
protected var _inertia : Number;/**
@private
*/
protected var viewportStage : Stage;/**
@private
*/
protected var startPoint : Point;/**
@private
*/
protected var startRotationY : Number;/**
@private
*/
protected var startRotationX : Number;/**
@private
*/
protected var targetRotationY : Number;/**
@private
*/
protected var targetRotationX : Number;/**
@private
*/
protected var keyRight : Boolean;/**
@private
*/
protected var keyLeft : Boolean;/**
@private
*/
protected var keyForward : Boolean;/**
@private
*/
protected var keyBackward : Boolean;/**
@private
*/
protected var forwardFactor : Number;/**
@private
*/
protected var sideFactor : Number;/**
@private
*/
protected var xText : TextField;/**
@private
*/
protected var yText : TextField;/**
@private
*/
protected var zText : TextField;/**
@private
*/
protected var rotationXText : TextField;/**
@private
*/
protected var rotationYText : TextField;/**
@private
*/
protected var rotationZText : TextField;/**
@private
*/
protected var fovText : TextField;/**
@private
*/
protected var nearText : TextField;/**
@private
*/
protected var farText : TextField;/**
@private
*/
protected var viewport3D : Viewport3D;/**
* A Sprite that displays the current properties of your camera
*/
public function get propsDisplay () : Sprite;public function set propsDisplay (propsDisplay:Sprite) : Void;/**
* The amount of resistance to the change in velocity when updating the camera rotation with the mouse
*/
public function get inertia () : Number;public function set inertia (inertia:Number) : Void;/**
* DebugCamera3D
		 *
		 * @param viewport	Viewport to render to. @see org.papervision3d.view.Viewport3D 
		 * @param fovY		Field of view (vertical) in degrees.
		 * @param near		Distance to near plane.
		 * @param far		Distance to far plane.
*/
public function DebugCamera3D (viewport3D:Viewport3D, fovY:Number = 90, near:Number = 10, far:Number = 5000);/**
* Checks if the viewport is ready for events
*/
private function checkStageReady () : void;/**
* Dispatched with the viewport container is added to the stage
*/
protected function onAddedToStageHandler (event:Event) : void;/**
* Builds the Sprite that displays the camera properties
*/
protected function displayProperties () : void;/**
* Sets up the Mouse and Keyboard Events required for adjusting the camera properties
*/
protected function setupEvents () : void;/**
*  The default handler for the <code>MouseEvent.MOUSE_DOWN</code> event.
	     *
	     *  @param The event object.
*/
protected function mouseDownHandler (event:MouseEvent) : void;/**
*  The default handler for the <code>MouseEvent.MOUSE_MOVE</code> event.
	     *
	     *  @param The event object.
*/
protected function mouseMoveHandler (event:MouseEvent) : void;/**
*  Removes the mouseMoveHandler on the <code>MouseEvent.MOUSE_UP</code> event.
	     *
	     *  @param The event object.
*/
protected function mouseUpHandler (event:MouseEvent) : void;/**
*  Adjusts the camera based on the keyCode from the <code>KeyboardEvent.KEY_DOWN</code> event.
	     *
	     *  @param The event object.
*/
protected function keyDownHandler (event:KeyboardEvent) : void;/**
*  Checks which Key is released on the <code>KeyboardEvent.KEY_UP</code> event
	     *  and toggles that key's movement off.
	     *
	     *  @param The event object.
*/
protected function keyUpHandler (event:KeyboardEvent) : void;/**
*  Checks which keys are down and adjusts the camera accorindingly on the <code>Event.ENTER_FRAME</code> event.
	     *  Also updates the display of properties.
	     *
	     *  @param The event object.
*/
protected function onEnterFrameHandler (event:Event) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\cameras\SpringCamera3D.as
package org.papervision3d.cameras{import org.papervision3d.core.math.*;import org.papervision3d.objects.DisplayObject3D;/**
b at turbulent dot ca - http://agit8.turbulent.ca 
	 * v1 - 2009-01-21
*/
public class SpringCamera3D extends Camera3D{/**
* [optional] Target object3d that camera should follow. If target is null, camera behaves just like a normal Camera3D.
*/
public var _camTarget : DisplayObject3D;/**
* Stiffness of the spring, how hard is it to extend. The higher it is, the more "fixed" the cam will be.
		 * A number between 1 and 20 is recommended.
*/
public var stiffness : Number;/**
* Damping is the spring internal friction, or how much it resists the "boinggggg" effect. Too high and you'll lose it!
		 * A number between 1 and 20 is recommended.
*/
public var damping : Number;/**
* Mass of the camera, if over 120 and it'll be very heavy to move.
*/
public var mass : Number;/**
* Offset of spring center from target in target object space, ie: Where the camera should ideally be in the target object space.
*/
public var positionOffset : Number3D;/**
* offset of facing in target object space, ie: where in the target object space should the camera look.
*/
public var lookOffset : Number3D;private var _zrot : Number;private var _velocity : Number3D;private var _dv : Number3D;private var _stretch : Number3D;private var _force : Number3D;private var _acceleration : Number3D;private var _desiredPosition : Number3D;private var _lookAtPosition : Number3D;private var _targetTransform : Matrix3D;private var _xPositionOffset : Number3D;private var _xLookOffset : Number3D;private var _xPosition : Number3D;private var _xLookAtObject : DisplayObject3D;public function set target (object:DisplayObject3D) : Void;public function get target () : DisplayObject3D;/**
* Rotation in degrees along the camera Z vector to apply to the camera after it turns towards the target .
*/
public function set zrot (n:Number) : Void;public function get zrot () : Number;/**
* Constructor.
		 * 
		 * @param   fov     This value is the vertical Field Of View (FOV) in degrees.
		 * @param   near    Distance to the near clipping plane.
		 * @param   far     Distance to the far clipping plane.
		 * @param   useCulling      Boolean indicating whether to use frustum culling. When true all objects outside the view will be culled.
		 * @param   useProjection   Boolean indicating whether to use a projection matrix for perspective.
*/
public function SpringCamera3D (fov:Number = 60, near:Number = 10, far:Number = 5000, useCulling:Boolean = false, useProjection:Boolean = false);public function transformView (transform:Matrix3D = null) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\IAnimatable.as
package org.papervision3d.core.animation{public interface IAnimatable{/**
* Whether the animation is playing. This property is read-only.
*/
public function get playing () : Boolean;/**
* Pauses the animation.
*/
public function pause () : void;/**
* Plays the animation.		 * 		 * @param 	clip	Clip to play. Default is "all"		 * @param 	loop	Whether the animation should loop. Default is true.
*/
public function play (clip:String = "all", loop:Boolean = true) : void;/**
* Resumes a paused animation.		 * 		 * @param loop 	Whether the animation should loop. Defaults is true.
*/
public function resume (loop:Boolean = true) : void;/**
* Stops the animation.
*/
public function stop () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\IAnimationProvider.as
package org.papervision3d.core.animation{import org.papervision3d.core.controller.AnimationController;/**
* @author Tim Knip / floorplanner.com
*/
public interface IAnimationProvider{/**
* Gets /sets the animation controller.		 * 		 * @see org.papervision3d.core.controller.AnimationController
*/
public function set animation (value:AnimationController) : Void;public function get animation () : AnimationController;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\Channel3D.as
package org.papervision3d.core.animation.channel{import org.papervision3d.core.animation.key.CurveKey3D;import org.papervision3d.core.animation.curve.Curve3D;/**
* @author Tim Knip / floorplanner.com
*/
public class Channel3D{/**

*/
public var startTime : Number;/**

*/
public var endTime : Number;/**
*
*/
public var output : Array;/**
*
*/
protected var _curves : Array;/**
*
*/
public function Channel3D ();/**
* Adds a curve.		 * 		 * @param curve	The curve to add.		 * 		 * @return	The added curve or null on failure.		 * 		 * @see org.papervision3d.core.animation.curve.Curve3D
*/
public function addCurve (curve:Curve3D, updatesTimes:Boolean = true) : Curve3D;/**
*
*/
public function clone () : Channel3D;/**
* Removes a curve.		 * 		 * @param curve	The curve to remove.		 * 		 * @return	The remove curve or null on failure.		 * 		 * @see org.papervision3d.core.animation.curve.Curve3D
*/
public function removeCurve (curve:Curve3D) : Curve3D;/**
*
*/
public function update (time:Number) : void;protected function updateStartAndEndTime () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\controller\MorphWeightChannel3D.as
package org.papervision3d.core.animation.channel.controller{import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.controller.MorphController;/**
* This channel targets the weights of a MorphController.	 * 	 * @see org.papervision3d.core.controller.MorphController	 * @see org.papervision3d.core.animation.channel.Channel3D	 * 	 * @author Tim Knip / floorplanner.com
*/
public class MorphWeightChannel3D extends Channel3D{/**

*/
public var controller : MorphController;/**

*/
public var morphTarget : int;/**
*
*/
public function MorphWeightChannel3D (controller:MorphController, morphTarget:int);/**
* Update the channel.		 * 		 * @param time	Time in seconds.
*/
public function update (time:Number) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\geometry\GeometryChannel3D.as
package org.papervision3d.core.animation.channel.geometry{import org.papervision3d.core.proto.GeometryObject3D;import org.papervision3d.core.animation.channel.Channel3D;/**
* @author Tim Knip / floorplanner.com
*/
public class GeometryChannel3D extends Channel3D{/**
* The targeted geometry.
*/
protected var _geometry : GeometryObject3D;/**
* The targeted geometry.
*/
public function set geometry (value:GeometryObject3D) : Void;/**
*
*/
public function get goemetry () : GeometryObject3D;/**
* Constructor.		 * 		 * @param geometry
*/
public function GeometryChannel3D (geometry:GeometryObject3D);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\geometry\VertexChannel3D.as
package org.papervision3d.core.animation.channel.geometry{import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.proto.GeometryObject3D;/**
* The VertexChannel3D class animates a single vertex in a GeometryObject3D.	 * 	 * <p>You can animate a single property of the vertex ("x", "y" or "z"), or alternatively	 * you can animate all 3 properties of the vertex.</p>	 * 	 * @see org.papervision3d.core.animation.channel.Channel3D	 * @see org.papervision3d.core.proto.GeometryObject3D	 * @see org.papervision3d.core.geom.renderables.Vertex3D	 * 	 * @author Tim Knip / floorplanner.com
*/
public class VertexChannel3D extends GeometryChannel3D{public static const TARGET_X : int;public static const TARGET_Y : int;public static const TARGET_Z : int;public static const TARGET_XYZ : int;/**
* The index of the targeted vertex.
*/
public var vertexIndex : uint;/**
* The targeted property of the targeted vertex.		 * Possible values are #TARGET_X, #TARGET_Y, #TARGET_Z or #TARGET_XYZ
*/
public var vertexProperty : int;/**
*
*/
protected var _clone : GeometryObject3D;/**
*
*/
public function set geometry (value:GeometryObject3D) : Void;/**
* Constructor
*/
public function VertexChannel3D (geometry:GeometryObject3D, vertexIndex:uint, vertexProperty:int = -1);/**
*
*/
public function update (time:Number) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\geometry\VerticesChannel3D.as
package org.papervision3d.core.animation.channel.geometry{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.proto.GeometryObject3D;/**
* The VerticesChannel3D animates the GeometryObject3D#vertices array.	 * 	 * @see org.papervision3d.core.proto.GeometryObject3D	 * @see org.papervision3d.core.geom.renderables.Vertex3D	 * 	 * @author Tim Knip / floorplanner.com
*/
public class VerticesChannel3D extends GeometryChannel3D{/**
*
*/
public function VerticesChannel3D (geometry:GeometryObject3D);/**
*
*/
public function update (time:Number) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\transform\MatrixChannel3D.as
package org.papervision3d.core.animation.channel.transform{import org.papervision3d.core.animation.curve.Curve3D;import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.animation.channel.transform.TransformChannel3D;/**
* @author Tim Knip / floorplanner.com
*/
public class MatrixChannel3D extends TransformChannel3D{/**
* Constructor.		 * 		 * @param transform
*/
public function MatrixChannel3D (transform:Matrix3D);/**
*
*/
public function clone () : Channel3D;/**
*
*/
public function update (time:Number) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\transform\RotationChannel3D.as
package org.papervision3d.core.animation.channel.transform{import org.papervision3d.core.animation.curve.Curve3D;import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;/**
* @author Tim Knip / floorplanner.com
*/
public class RotationChannel3D extends TransformChannel3D{public var axis : Number3D;public function RotationChannel3D (axis:Number3D);/**
*
*/
public function clone () : Channel3D;public function update (time:Number) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\transform\ScaleChannel3D.as
package org.papervision3d.core.animation.channel.transform{import org.papervision3d.core.animation.curve.Curve3D;import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.animation.channel.transform.TransformChannel3D;/**
* @author Tim Knip / floorplanner.com
*/
public class ScaleChannel3D extends TransformChannel3D{/**
* Constructor.		 * 		 * @param transform
*/
public function ScaleChannel3D (transform:Matrix3D);public function clone () : Channel3D;/**
*
*/
public function update (time:Number) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\transform\TransformChannel3D.as
package org.papervision3d.core.animation.channel.transform{import org.papervision3d.core.animation.curve.Curve3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.animation.channel.Channel3D;/**
* @author Tim Knip / floorplanner.com
*/
public class TransformChannel3D extends Channel3D{public var transform : Matrix3D;public function TransformChannel3D (transform:Matrix3D);public function clone () : Channel3D;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\transform\TransformStackChannel3D.as
package org.papervision3d.core.animation.channel.transform{import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.animation.key.LinearCurveKey3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.animation.curve.Curve3D;/**
* @author Tim Knip / floorplanner.com
*/
public class TransformStackChannel3D extends TransformChannel3D{protected var channels : Array;/**
*
*/
public function TransformStackChannel3D (transform:Matrix3D);/**
*
*/
public function addCurve (curve:Curve3D, updatesTimes:Boolean = true) : Curve3D;/**
*
*/
public function addChannel (channel:TransformChannel3D) : TransformChannel3D;/**
* Bakes this MatrixStackChannel into a single MatrixChannel3D.		 * 		 * @param sampleRate		 * 		 * @return The created MatrixChannel3D or null on failure.		 * 		 * @see org.papervision3d.core.animation.channel.matrix.TransformChannel3D
*/
public function bake (numSamples:uint) : MatrixChannel3D;/**
*
*/
public function clone () : Channel3D;/**
*
*/
public function update (time:Number) : void;protected function updateStartAndEndTime () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\transform\TranslationChannel3D.as
package org.papervision3d.core.animation.channel.transform{import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.animation.curve.Curve3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.animation.channel.transform.TransformChannel3D;/**
* @author Tim Knip / floorplanner.com
*/
public class TranslationChannel3D extends TransformChannel3D{/**
* Constructor.		 * 		 * @param transform
*/
public function TranslationChannel3D (transform:Matrix3D);/**
*
*/
public function clone () : Channel3D;/**
*
*/
public function update (time:Number) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\clip\AnimationClip3D.as
package org.papervision3d.core.animation.clip{/**
* @author Tim Knip / floorplanner.com
*/
public class AnimationClip3D{/**
*
*/
public var name : String;/**
*
*/
public var startTime : Number;/**
*
*/
public var endTime : Number;/**
*
*/
public function AnimationClip3D (name:String, startTime:Number = 0.0, endTime:Number = 0.0);/**
* Clone.		 * 		 * @return
*/
public function clone () : AnimationClip3D;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\curve\Curve3D.as
package org.papervision3d.core.animation.curve{import org.papervision3d.core.animation.enum.InfinityType;import org.papervision3d.core.animation.key.BezierCurveKey3D;import org.papervision3d.core.animation.key.LinearCurveKey3D;import org.papervision3d.core.animation.key.CurveKey3D;/**
* A Curve3D stores a bunch of CurveKey3D's and given a value representing an input point on a curve returns 	 * the output of the curve for that input.	 * 	 * @see org.papervision3d.core.animation.key.CurveKey3D	 * 	 * @author Tim Knip / floorplanner.com
*/
public class Curve3D{/**
* The behavior of the curve after the last key. 		 * 		 * @see org.papervision3d.core.animation.enum.InfinityType
*/
public var postInfinity : uint;/**
* The behavior of the curve before the first key. 		 * 		 * @see org.papervision3d.core.animation.enum.InfinityType
*/
public var preInfinity : uint;/**
*
*/
protected var _keys : Array;/**

*/
private var _current : int;/**
*
*/
public function get keys () : Array;/**
* Constructor.		 * 		 * @param preInfinity	The behavior of the curve before the first key. Defaults to InfinityType.CONSTANT		 * @param postInfinity	The behavior of the curve after the last key. Defaults to InfinityType.CONSTANT		 * 		 * @see org.papervision3d.core.animation.enum.InfinityType
*/
public function Curve3D (preInfinity:int = -1, postInfinity:int = -1);/**
* Adds a key.		 * 		 * @param key		 * 		 * @return The added key or null on failure
*/
public function addKey (key:CurveKey3D) : CurveKey3D;/**
* Removes a key.		 * 		 * @param key		 * 		 * @return The removed key or null on failure
*/
public function removeKey (key:CurveKey3D) : CurveKey3D;/**
* Main workhorse of the animation system.		 * 		 * @param input	Time in seconds.		 * 		 * @return	The current value of this curve.
*/
public function evaluate (input:Number) : Number;/**
* Clone.		 * 		 * @return	The cloned curve.
*/
public function clone () : Curve3D;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\enum\InfinityType.as
package org.papervision3d.core.animation.enum{/**
* @author Tim Knip / floorplanner.com
*/
public class InfinityType{public static const CONSTANT : uint;public static const LINEAR : uint;public static const CYCLE : uint;public static const CYCLE_RELATIVE : uint;public static const OSCILLATE : uint;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\enum\InterpolationType.as
package org.papervision3d.core.animation.enum{/**
* @author Tim Knip / floorplanner.com
*/
public class InterpolationType{public static const LINEAR : int;public static const HERMITE : int;public static const BEZIER : int;public static const BSPLINE : int;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\key\BezierCurveKey3D.as
package org.papervision3d.core.animation.key{import org.papervision3d.core.animation.key.CurveKey3D;/**
* @author Tim Knip / floorplanner.com
*/
public class BezierCurveKey3D extends CurveKey3D{/**
*
*/
public function BezierCurveKey3D (input:Number = 0, output:Number = 0);/**
* Clone.		 * 		 * @return The cloned key.
*/
public function clone () : CurveKey3D;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\key\CurveKey3D.as
package org.papervision3d.core.animation.key{/**
* @author Tim Knip / floorplanner.com
*/
public class CurveKey3D{/**
*
*/
public var input : Number;/**
*
*/
public var output : Number;/**
* Constructor.
*/
public function CurveKey3D (input:Number = 0, output:Number = 0);/**
* Clone.		 * 		 * @return The cloned key.
*/
public function clone () : CurveKey3D;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\key\LinearCurveKey3D.as
package org.papervision3d.core.animation.key{import org.papervision3d.core.animation.key.CurveKey3D;/**
* @author Tim Knip / floorplanner.com
*/
public class LinearCurveKey3D extends CurveKey3D{/**
*
*/
public function LinearCurveKey3D (input:Number = 0, output:Number = 0);/**
* Clone.		 * 		 * @return The cloned key.
*/
public function clone () : CurveKey3D;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\key\StepCurveKey3D.as
package org.papervision3d.core.animation.key{import org.papervision3d.core.animation.key.CurveKey3D;/**
* @author Tim Knip / floorplanner.com
*/
public class StepCurveKey3D extends CurveKey3D{/**
*
*/
public function StepCurveKey3D (input:Number = 0, output:Number = 0);/**
* Clone.		 * 		 * @return The cloned key.
*/
public function clone () : CurveKey3D;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\clipping\DefaultClipping.as
package org.papervision3d.core.clipping{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.math.util.ClassificationUtil;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;public class DefaultClipping{public function DefaultClipping ();public function reset (renderSessionData:RenderSessionData) : void;public function setDisplayObject (object:DisplayObject3D, renderSessionData:RenderSessionData) : void;public function testFace (triangle:Triangle3D, object:DisplayObject3D, renderSessionData:RenderSessionData) : Boolean;public function clipFace (triangle:Triangle3D, object:DisplayObject3D, material:MaterialObject3D, renderSessionData:RenderSessionData, outputArray:Array) : Number;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\clipping\FrustumClipping.as
package org.papervision3d.core.clipping{import org.papervision3d.core.dyn.DynamicTriangles;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.math.Plane3D;import org.papervision3d.core.math.util.ClassificationUtil;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;public class FrustumClipping extends DefaultClipping{public static const NONE : int;public static const NEAR : int;public static const LEFT : int;public static const RIGHT : int;public static const TOP : int;public static const BOTTOM : int;public static const FAR : int;public static const DEFAULT : int;public static const ALL : int;private static const OUTSIDE : uint;private static const INSIDE : uint;private static const OUT_IN : uint;private static const IN_OUT : uint;private static const TO_DEGREES : Number;private static const TO_RADIANS : Number;private var _planes : int;private var _cnear : Plane3D;private var _cfar : Plane3D;private var _ctop : Plane3D;private var _cbottom : Plane3D;private var _cleft : Plane3D;private var _cright : Plane3D;private var _wnear : Plane3D;private var _wfar : Plane3D;private var _wtop : Plane3D;private var _wbottom : Plane3D;private var _wleft : Plane3D;private var _wright : Plane3D;private var _nc : Number3D;private var _fc : Number3D;private var _ntl : Number3D;private var _ntr : Number3D;private var _nbr : Number3D;private var _nbl : Number3D;private var _ftl : Number3D;private var _ftr : Number3D;private var _fbr : Number3D;private var _fbl : Number3D;private var _camPos : Number3D;private var _axisX : Number3D;private var _axisY : Number3D;private var _axisZ : Number3D;private var _axisZi : Number3D;private var _cplanes : Array;private var _wplanes : Array;private var _matrix : Matrix3D;private var _world : Matrix3D;private var _planePoints : Array;private var _dynTriangles : DynamicTriangles;/**
* Bitmask indicating which planes are used for clipping.
*/
public function get planes () : int;/**
* Bitmask indicating which planes are used for clipping.
*/
public function set planes (value:int) : Void;/**
*
*/
public function FrustumClipping (planes:int = -1);/**
*
*/
public function reset (renderSessionData:RenderSessionData) : void;/**
*
*/
public function setDisplayObject (object:DisplayObject3D, renderSessionData:RenderSessionData) : void;/**
*
*/
public function testFace (triangle:Triangle3D, object:DisplayObject3D, renderSessionData:RenderSessionData) : Boolean;/**
*
*/
public function clipFace (triangle:Triangle3D, object:DisplayObject3D, material:MaterialObject3D, renderSessionData:RenderSessionData, outputArray:Array) : Number;/**
* Sutherland-Hodgman clipping of an Array of points.
		 * 
		 * @param	points
		 * @param	plane
		 * @return
*/
public function clipPointsToPlane (object:DisplayObject3D, points:Array, uvs:Array, plane:Plane3D) : Array;/**
* 
		 * @param	pDist1
		 * @param	pDist2
		 * @return
*/
private function compareDistances (pDist1:Number, pDist2:Number) : uint;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\clipping\draw\Clipping.as
package org.papervision3d.core.clipping.draw{import flash.display.*;import flash.geom.*;import org.papervision3d.core.render.command.RenderableListItem;/**
* Base clipping class for no clipping.
*/
public class Clipping{private var rectangleClipping : RectangleClipping;private var zeroPoint : Point;private var globalPoint : Point;/**
* Minimum allowed x value for primitives
*/
public var minX : Number;/**
* Minimum allowed y value for primitives
*/
public var minY : Number;/**
* Maximum allowed x value for primitives
*/
public var maxX : Number;/**
* Maximum allowed y value for primitives
*/
public var maxY : Number;/**
* Checks a drawing primitive for clipping.
		 * 
		 * @param	pri	The drawing primitive being checked.
		 * @return		The clipping result - false for clipped, true for non-clipped.
*/
public function check (pri:RenderableListItem) : Boolean;/**
* Checks a bounding rectangle for clipping.
		 * 
		 * @param	minX	The x value for the left side of the rectangle.
		 * @param	minY	The y value for the top side of the rectangle.
		 * @param	maxX	The x value for the right side of the rectangle.
		 * @param	maxY	The y value for the bottom side of the rectangle.
		 * @return		The clipping result - false for clipped, true for non-clipped.
*/
public function rect (minX:Number, minY:Number, maxX:Number, maxY:Number) : Boolean;/**
* Returns a rectangle clipping object representing the bounding box of the clipping object.
*/
public function asRectangleClipping () : RectangleClipping;/**
* Returns a rectangle clipping object initilised with the edges of the flash movie as the clipping bounds.
*/
public function screen (container:Sprite) : Clipping;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\clipping\draw\RectangleClipping.as
package org.papervision3d.core.clipping.draw{import org.papervision3d.core.render.command.RenderableListItem;/**
Rectangle clipping
*/
public class RectangleClipping extends Clipping{public function RectangleClipping (minX:Number = -1000000, minY:Number = -1000000, maxX:Number = 1000000, maxY:Number = 1000000);/**
* @inheritDoc
*/
public function asRectangleClipping () : RectangleClipping;/**
* @inheritDoc
*/
public function check (pri:RenderableListItem) : Boolean;/**
* @inheritDoc
*/
public function rect (minX:Number, minY:Number, maxX:Number, maxY:Number) : Boolean;/**
* Used to trace the values of a rectangle clipping object.
		 * 
		 * @return A string representation of the rectangle clipping object.
*/
public function toString () : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\controller\AnimationController.as
package org.papervision3d.core.controller{import org.papervision3d.core.animation.channel.transform.TransformChannel3D;import flash.utils.getTimer;import org.papervision3d.core.animation.clip.AnimationClip3D;import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.animation.IAnimatable;import org.papervision3d.core.controller.IObjectController;/**
* The AnimationController class controls an animation.	 * 	 * @author Tim Knip / floorplanner.com
*/
public class AnimationController implements IObjectController{/**
* Start time of animation in seconds.
*/
public var startTime : Number;/**
* End time of animation in seconds.
*/
public var endTime : Number;/**
*
*/
private var _channels : Array;/**
*
*/
private var _isPlaying : Boolean;/**
*
*/
private var _isPaused : Boolean;/**
*
*/
private var _currentTime : Number;/**
*
*/
private var _currentTimeStamp : int;/**
*
*/
private var _pauseTime : Number;/**
*
*/
private var _loop : Boolean;/**

*/
private var _clip : AnimationClip3D;/**

*/
private var _clips : Array;/**

*/
private var _clipByName : Object;public function set channels (value:Array) : Void;public function get channels () : Array;/**
* Gets all defined clip names. This property is read-only.		 * 		 * @return Array containing clip names.
*/
public function get clipNames () : Array;/**
* Gets all defined clips. This property is read-only.		 * 		 * @return Array containing clips.		 * 		 * @see org.papervision3d.core.animation.clip.AnimationClip3D
*/
public function get clips () : Array;/**
* Number of channels.
*/
public function get numChannels () : uint;/**
* Whether the animation is playing. This property is read-only.
*/
public function get playing () : Boolean;/**
* Constructor.
*/
public function AnimationController ();/**
*
*/
public function addChannel (channel:Channel3D) : Channel3D;/**
*
*/
public function addClip (clip:AnimationClip3D) : AnimationClip3D;/**
*
*/
public function clone () : AnimationController;/**
* Initialize.
*/
protected function init () : void;/**
* Pause the animation.
*/
public function pause () : void;/**
* Plays the animation.		 * 		 * @param 	clip	Clip to play. Default is "all"		 * @param 	loop	Whether the animation should loop. Default is true.
*/
public function play (clip:String = "all", loop:Boolean = true) : void;/**
*
*/
public function removeAllChannels () : void;/**
*
*/
public function removeChannel (channel:Channel3D) : Channel3D;/**
* Removes a clip.		 * 		 * @param clip		 * 		 * @return	The removed clip or null on failure.
*/
public function removeClip (clip:AnimationClip3D) : AnimationClip3D;/**
* Resumes the animation.		 * 		 *  @param loop	Whether the animation should loop. Defaults to true;
*/
public function resume (loop:Boolean = true) : void;/**
* Stops the animation.
*/
public function stop () : void;/**
* Update.
*/
public function update () : void;/**
* Updates the startTime and endTime of this animation controller.
*/
protected function updateStartAndEndTime () : void;/**
*
*/
public function toString () : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\controller\IControllerProvider.as
package org.papervision3d.core.controller{/**
* @author Tim Knip / floorplanner.com
*/
public interface IControllerProvider{/**
* Gets all controlllers.
*/
public function set controllers (value:Array) : Void;public function get controllers () : Array;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\controller\IObjectController.as
package org.papervision3d.core.controller{/**
* @author Tim Knip / floorplanner.com
*/
public interface IObjectController{public function update () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\controller\MorphController.as
package org.papervision3d.core.controller{import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.log.PaperLogger;/**
* The MorphController class controls a mesh's vertices by applying a morph.	 * 	 * Each possible mesh that can be blended (a morph target) must be specified.	 * Each morph target is assigned a blend weight. The result is obtained via two methods :	 * 	 * <ol>	 * <li>NORMALIZED  (Target1, Target2, ...)*(w1, w2, ...) = (1-w1-w2-...)*BaseMesh + w1*Target1 + w2*Target2 + ...</li>	 * <li>RELATIVE    (Target1, Target2, ...) + (w1, w2, ...) = BaseMesh + w1*Target1 + w2*Target2 + ...</li>	 * </ol>	 * 	 * @author Tim Knip / floorplanner.com
*/
public class MorphController implements IObjectController{/**

*/
public var active : Boolean;/**

*/
public var target : TriangleMesh3D;/**

*/
public var targets : Array;/**

*/
public var weights : Array;/**

*/
public var normalized : Boolean;/**

*/
private var cached : Array;/**
* Constructor.
*/
public function MorphController (target:TriangleMesh3D, normalized:Boolean = true);/**
*
*/
public function addMorphTarget (mesh:TriangleMesh3D, weight:Number) : void;/**
*
*/
public function update () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\controller\SkinController.as
package org.papervision3d.core.controller{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.objects.special.Skin3D;public class SkinController implements IObjectController{/**

*/
public var poseMatrix : Matrix3D;/**

*/
public var bindShapeMatrix : Matrix3D;/**

*/
public var target : Skin3D;/**

*/
public var joints : Array;/**

*/
public var invBindMatrices : Array;/**

*/
public var vertexWeights : Array;/**

*/
public var input : MorphController;private var _cached : Array;/**
* Constructor.
		 * 
		 * @param	target
*/
public function SkinController (target:Skin3D);/**
* Update.
*/
public function update () : void;/**
* Cache original vertices.
*/
private function cacheVertices () : void;/**
* Skins a mesh.
		 * 
		 * @param	joint
		 * @param	meshVerts
		 * @param	skinnedVerts
*/
private function skinMesh (joint:DisplayObject3D, weights:Array, inverseBindMatrix:Matrix3D, meshVerts:Array, skinnedVerts:Array) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\CompositeTriangleCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;public class CompositeTriangleCuller implements ITriangleCuller{private var cullers : Array;public function CompositeTriangleCuller ();private function init () : void;public function addCuller (culler:ITriangleCuller) : void;public function removeCuller (culler:ITriangleCuller) : void;public function clearCullers () : void;public function testFace (face3D:Triangle3D, vertex0:Vertex3DInstance, vertex1:Vertex3DInstance, vertex2:Vertex3DInstance) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\DefaultLineCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Line3D;import org.papervision3d.core.culling.ILineCuller;/**
* @author Seb Lee-Delisle
*/
public class DefaultLineCuller implements ILineCuller{public function DefaultLineCuller ();public function testLine (line:Line3D) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\DefaultParticleCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Particle;public class DefaultParticleCuller implements IParticleCuller{public function DefaultParticleCuller ();public function testParticle (particle:Particle) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\DefaultTriangleCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.objects.DisplayObject3D;public class DefaultTriangleCuller implements ITriangleCuller{protected static var x0 : Number;protected static var y0 : Number;protected static var x1 : Number;protected static var y1 : Number;protected static var x2 : Number;protected static var y2 : Number;public function DefaultTriangleCuller ();public function testFace (face:Triangle3D, vertex0:Vertex3DInstance, vertex1:Vertex3DInstance, vertex2:Vertex3DInstance) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\FrustumCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.AxisAlignedBoundingBox;import org.papervision3d.core.math.BoundingSphere;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.objects.DisplayObject3D;/**
* @author Tim Knip
*/
public class FrustumCuller implements IObjectCuller{public static const INSIDE : int;public static const OUTSIDE : int;public static const INTERSECT : int;/**

*/
public var transform : Matrix3D;private var _fov : Number;private var _far : Number;private var _near : Number;private var _nw : Number;private var _nh : Number;private var _fw : Number;private var _fh : Number;private var _tang : Number;private var _ratio : Number;private var _sphereX : Number;private var _sphereY : Number;public function set far (value:Number) : Void;public function get far () : Number;public function set fov (value:Number) : Void;public function get fov () : Number;public function set near (value:Number) : Void;public function get near () : Number;public function set ratio (value:Number) : Void;public function get ratio () : Number;/**
* Constructor.
*/
public function FrustumCuller ();/**
* Intializes the frustum.
		 * 
		 * @param	fovY	Vertical Field Of View in degrees.
		 * @param	ratio	Aspect ratio (ie: viewport.width / viewport.height).
		 * @param	near	Distance to near plane (ie: camera.focus).
		 * @param	far		Distance to far plane.
*/
public function initialize (fovY:Number = 60, ratio:Number = 1.333, near:Number = 1, far:Number = 5000) : void;/**
* Tests whether an axis aligned boundingbox is inside, outside or intersecting the frustum. 
		 * When earlyOut is set to true, the method returns INSIDE when a single point of the aabb is
		 * inside the frustum (fast). Set earlyOut to false if you want to test for INTERSECT. 
		 * 
		 * @param	object	The object to test.
		 * @param	aabb	AxisAlignedBoundingBox.
		 * @param	earlyOut	Early out. Default is true.
		 * 
		 * @return Integer indicating inside(1), outside(-1) or intersecting(0) the frustum.
*/
public function aabbInFrustum (object:DisplayObject3D, aabb:AxisAlignedBoundingBox, earlyOut:Boolean = true) : int;/**
* Tests whether a point is inside the frustum.
		 *
		 * @param 	x
		 * @param 	y
		 * @param 	z
		 *
		 * @return	Integer indicating inside (1) or outside (-1) the frustum.
*/
public function pointInFrustum (x:Number, y:Number, z:Number) : int;/**
* Tests whether a sphere is inside the frustum.
		 *
		 * @param 	object	The object to test.
		 * @param	boundingSphere	The bounding sphere.
		 *
		 * @return	Integer indicating inside (1), outside (0) or intersecting (-1) the frustum.
*/
public function sphereInFrustum (obj:DisplayObject3D, boundingSphere:BoundingSphere) : int;/**
* Tests whether an object is inside the frustum.
		 * 
		 * @param	obj		The object to test
		 * 
		 * @return	Integer indicating inside(1), outside(-1) or intersecting(0)
*/
public function testObject (obj:DisplayObject3D) : int;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\FrustumTestMethod.as
package org.papervision3d.core.culling{public class FrustumTestMethod{/**
* @Author Ralph Hauwert
*/
public static const NO_TESTING : int;public static const BOUNDING_SPHERE : int;public static const BOUNDING_BOX : int;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\ILineCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Line3D;/**
* @author Seb Lee-Delisle
*/
public interface ILineCuller{public function testLine (line:Line3D) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\IObjectCuller.as
package org.papervision3d.core.culling{import org.papervision3d.objects.DisplayObject3D;/**
* @author Tim Knip
*/
public interface IObjectCuller{public function testObject (object:DisplayObject3D) : int;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\IParticleCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Particle;public interface IParticleCuller{public function testParticle (particle:Particle) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\ITriangleCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;public interface ITriangleCuller{public function testFace (face3D:Triangle3D, vertex0:Vertex3DInstance, vertex1:Vertex3DInstance, vertex2:Vertex3DInstance) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\NullTriangleCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.geom.renderables.Triangle3D;public class NullTriangleCuller implements ITriangleCuller{public function NullTriangleCuller ();public function testFace (face3D:Triangle3D, vertex0:Vertex3DInstance, vertex1:Vertex3DInstance, vertex2:Vertex3DInstance) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\RectangleLineCuller.as
package org.papervision3d.core.culling{import flash.geom.Rectangle;import org.papervision3d.core.geom.renderables.Line3D;import org.papervision3d.core.culling.ILineCuller;import org.papervision3d.core.math.util.FastRectangleTools;/**
* @author Seb Lee-Delisle
*/
public class RectangleLineCuller implements ILineCuller{private var cullingRectangle : Rectangle;private var lineBoundsRect : Rectangle;private var rectIntersection : Rectangle;/**
* @Author Seb Lee-Delisle		 *		 * RectangleLineCuller		 * 		 * This Line Culler culls lines based upon whether they intersect the viewport rectangle.
*/
public function RectangleLineCuller (cullingRectangle:Rectangle = null);public function testLine (line:Line3D) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\RectangleParticleCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.geom.renderables.Vertex3D;import flash.geom.Rectangle;import flash.geom.Point;import org.papervision3d.core.math.util.FastRectangleTools;public class RectangleParticleCuller implements IParticleCuller{private static var vInstance : Vertex3DInstance;private static var testPoint : Point;public var cullingRectangle : Rectangle;public function RectangleParticleCuller (cullingRectangle:Rectangle = null);public function testParticle (particle:Particle) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\RectangleTriangleCuller.as
package org.papervision3d.core.culling{import flash.geom.Rectangle;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.util.FastRectangleTools;public class RectangleTriangleCuller extends DefaultTriangleCuller implements ITriangleCuller{private static const DEFAULT_RECT_W : Number;private static const DEFAULT_RECT_H : Number;private static const DEFAULT_RECT_X : Number;private static const DEFAULT_RECT_Y : Number;private static var hitRect : Rectangle;public var cullingRectangle : Rectangle;/**
* @Author Ralph Hauwert
		 *
		 * RectangleTriangleCuller
		 * 
		 * This Triangle Culler culls faces based upon the visibility of it vertices and their visibility in a defined rectangle.
*/
public function RectangleTriangleCuller (cullingRectangle:Rectangle = null);public function testFace (face:Triangle3D, vertex0:Vertex3DInstance, vertex1:Vertex3DInstance, vertex2:Vertex3DInstance) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\ViewportObjectFilter.as
package org.papervision3d.core.culling{import flash.utils.Dictionary;import org.papervision3d.objects.DisplayObject3D;/**
* @Author Ralph Hauwert
*/
public class ViewportObjectFilter implements IObjectCuller{protected var _mode : int;protected var objects : Dictionary;public function set mode (mode:int) : Void;public function get mode () : int;public function ViewportObjectFilter (mode:int);private function init () : void;public function testObject (object:DisplayObject3D) : int;public function addObject (do3d:DisplayObject3D) : void;public function removeObject (do3d:DisplayObject3D) : void;public function destroy () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\ViewportObjectFilterMode.as
package org.papervision3d.core.culling{/**
* @Author Ralph Hauwert
*/
public class ViewportObjectFilterMode{public static const INCLUSIVE : int;public static const EXCLUSIVE : int;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\data\UserData.as
package org.papervision3d.core.data{/**
* @author Ralph Hauwert
*/
public class UserData{public var data : *;/**
* UserData();
		 * 
		 * The UserData class abstracts an end-user defined data object.
		 * 
		 * The UserData class itself can be extends for more typed setting of data.
*/
public function UserData (data:* = null);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\dyn\DynamicTriangles.as
package org.papervision3d.core.dyn{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.materials.BitmapMaterial;import org.papervision3d.materials.special.CompositeMaterial;import org.papervision3d.objects.DisplayObject3D;public class DynamicTriangles{private static const GROW_SIZE : int;private static const INIT_SIZE : int;private static var triangleCounter : int;private static var trianglePool : Array;public function DynamicTriangles ();private static function init () : void;public function getTriangle (object:DisplayObject3D = null, m:MaterialObject3D = null, v0:Vertex3D = null, v1:Vertex3D = null, v2:Vertex3D = null, uv0:NumberUV = null, uv1:NumberUV = null, uv2:NumberUV = null) : Triangle3D;public function releaseAll () : void;public function returnTriangle (triangle:Triangle3D) : void;public function returnAllTriangles () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\AbstractEffect.as
package org.papervision3d.core.effects{import flash.filters.BitmapFilter;import org.papervision3d.view.layer.BitmapEffectLayer;public class AbstractEffect implements IEffect{internal function AbstractEffect ();public function attachEffect (layer:BitmapEffectLayer) : void;public function preRender () : void;public function postRender () : void;public function getEffect () : BitmapFilter;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\BitmapColorEffect.as
package org.papervision3d.core.effects{import flash.filters.ColorMatrixFilter;import flash.geom.Point;import org.papervision3d.view.layer.BitmapEffectLayer;public class BitmapColorEffect extends AbstractEffect{private var layer : BitmapEffectLayer;private var filter : ColorMatrixFilter;public function BitmapColorEffect (r:Number = 1, g:Number = 1, b:Number = 1, a:Number = 1);public function updateEffect (r:Number = 1, g:Number = 1, b:Number = 1, a:Number = 1) : void;public function attachEffect (layer:BitmapEffectLayer) : void;public function postRender () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\BitmapFireEffect.as
package org.papervision3d.core.effects{import org.papervision3d.view.layer.BitmapEffectLayer;import flash.display.BitmapData;import flash.display.DisplayObject;import flash.filters.BlurFilter;import flash.filters.ColorMatrixFilter;import flash.filters.DisplacementMapFilter;import flash.geom.ColorTransform;import flash.geom.Matrix;import flash.geom.Point;public class BitmapFireEffect extends AbstractEffect{private var layer : BitmapEffectLayer;private var _fadeRate : Number;private var _distortionScale : Number;private var _distortion : Number;private var _flameHeight : Number;private var _flameSpread : Number;private var _blueFlame : Boolean;private var _smoke : Number;private var displayBmp : BitmapData;private var scratchBmp : BitmapData;private var perlinBmp : BitmapData;private var mtx : Matrix;private var pnt : Point;private var drawColorTransform : ColorTransform;private var fireCMF : ColorMatrixFilter;private var dispMapF : DisplacementMapFilter;private var blurF : BlurFilter;private var endCount : Number;private var bmpsValid : Boolean;private var perlinValid : Boolean;private var filtersValid : Boolean;private var _target : DisplayObject;public function set width (value:Number) : Void;public function get width () : Number;public function set height (value:Number) : Void;public function get height () : Number;/**
* Sets the rate that flames fade as they move up. 0 is slowest, 1 is fastest.         *         * @default 0.4
*/
public function set fadeRate (value:Number) : Void;public function get fadeRate () : Number;/**
* Sets the scale of flame distortion. 0.1 is tiny and chaotic, 1 is large and smooth.         *         * @default 0.4
*/
public function set distortionScale (value:Number) : Void;public function get distortionScale () : Number;/**
* Sets the amount of distortion. 0.1 is little, 1 is chaotic.         *         * @default 0.4
*/
public function set distortion (value:Number) : Void;public function get distortion () : Number;/**
* Sets the how high the flame will burn. 0 is zero gravity, 1 is a bonfire.         *         * @default 0.3
*/
public function set flameHeight (value:Number) : Void;public function get flameHeight () : Number;/**
* Sets the how much the fire will spread out around the target. 0 is no spread, 1 is a lot.         *         * @default 0.3
*/
public function set flameSpread (value:Number) : Void;public function get flameSpread () : Number;/**
* Indicates whether it should use a blue or red flame.         *         * @default false
*/
public function set blueFlame (value:Boolean) : Void;public function get blueFlame () : Boolean;/**
* Sets the amount of smoke. 0 little, 1 lots.         *         * @default 0
*/
public function set smoke (value:Number) : Void;public function get smoke () : Number;/**
* Sets the amount of smoke. 0 little, 1 lots.         *         * @default
*/
public function set targetName (value:String) : Void;/**
* Defines the shape of the fire. The fire will burn upwards, so it should be near the bottom, and centered in the FireFX component.         *         * @default
*/
public function set target (value:DisplayObject) : Void;public function get target () : DisplayObject;public function BitmapFireEffect (r:Number = 1, g:Number = 1, b:Number = 1, a:Number = 1);public function attachEffect (layer:BitmapEffectLayer) : void;public function postRender () : void;/**
* Clears the fire.
*/
public function clear () : void;public function stopFire () : void;private function updateBitmaps () : void;private function updatePerlin () : void;private function updateFilters () : void;private function startFire () : void;private function doFire () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\BitmapLayerEffect.as
package org.papervision3d.core.effects{import flash.filters.BitmapFilter;import org.papervision3d.view.layer.BitmapEffectLayer;public class BitmapLayerEffect extends AbstractEffect{private var layer : BitmapEffectLayer;private var filter : BitmapFilter;public var isPostRender : Boolean;public function BitmapLayerEffect (filter:BitmapFilter, isPostRender:Boolean = true);public function updateEffect (filter:BitmapFilter) : void;public function attachEffect (layer:BitmapEffectLayer) : void;public function preRender () : void;public function postRender () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\BitmapMotionEffect.as
package org.papervision3d.core.effects{import flash.display.BitmapData;import flash.display.BlendMode;import flash.filters.BitmapFilter;import flash.geom.Point;import org.papervision3d.view.layer.BitmapEffectLayer;public class BitmapMotionEffect extends AbstractEffect{private var layer : BitmapEffectLayer;private var filter : BitmapFilter;private var color : uint;public var now : BitmapData;public var before : BitmapData;public var buffer : BitmapData;public function BitmapMotionEffect (color:uint = 0xFF00FF00);public function attachEffect (layer:BitmapEffectLayer) : void;public function preRender () : void;public function postRender () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\BitmapPixelateEffect.as
package org.papervision3d.core.effects{import flash.display.BitmapData;import flash.geom.Rectangle;import org.papervision3d.view.layer.BitmapEffectLayer;public class BitmapPixelateEffect extends AbstractEffect{private var layer : BitmapEffectLayer;public var size : int;public function BitmapPixelateEffect (size:int = 4);public function attachEffect (layer:BitmapEffectLayer) : void;public function preRender () : void;public function postRender () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\IEffect.as
package org.papervision3d.core.effects{import flash.filters.BitmapFilter;import org.papervision3d.view.layer.BitmapEffectLayer;public interface IEffect{public function attachEffect (layer:BitmapEffectLayer) : void;public function preRender () : void;public function postRender () : void;public function getEffect () : BitmapFilter;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\objects\LensFlare.as
package org.papervision3d.core.effects.objects{import flash.display.BlendMode;import flash.display.DisplayObject;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.layer.ViewportLayer;public class LensFlare extends ViewportLayer{public var light : LightObject3D;public var flareWidth : Number;public var flareHeight : Number;public var edgeOffset : Number;private var flareArray : Array;public var positions : Array;public function LensFlare (light:LightObject3D, flareArray:Array, width:Number, height:Number, positions:Array = null);public function setFlareArray (flareArray:Array) : void;private function emptyFlareArray () : void;private function buildFlareArray () : void;public function updateFlare (showFlare:Boolean = true, testHit:DisplayObject = null) : void;public function hideFlare () : void;private function drawFlare () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\utils\BitmapClearMode.as
package org.papervision3d.core.effects.utils{public class BitmapClearMode{public static const CLEAR_PRE : String;public static const CLEAR_POST : String;public static const CLEAR_NEVER : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\utils\BitmapDrawCommand.as
package org.papervision3d.core.effects.utils{import flash.display.BitmapData;import flash.display.BlendMode;import flash.display.DisplayObject;import flash.geom.ColorTransform;import flash.geom.Matrix;import flash.geom.Rectangle;public class BitmapDrawCommand{public var colorTransform : ColorTransform;public var transformMatrix : Matrix;public var blendMode : String;public var smooth : Boolean;public var drawContainer : Boolean;public function BitmapDrawCommand (transMat:Matrix = null, colorTransform:ColorTransform = null, blendMode:String = null, smooth:Boolean = false);public function draw (canvas:BitmapData, drawLayer:DisplayObject, transMat:Matrix = null, clipRect:Rectangle = null) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\utils\ConvolutionMatrices.as
package org.papervision3d.core.effects.utils{public class ConvolutionMatrices{public static var SHARPEN : Array;public static var BRIGHTNESS : Array;public static var EXTRUDE : Array;public static var EMBOSS : Array;public static var BLUR : Array;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\view\ReflectionView.as
package org.papervision3d.core.effects.view{import org.papervision3d.cameras.Camera3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.view.BasicView;import org.papervision3d.view.Viewport3D;import flash.events.Event;import flash.geom.ColorTransform;public class ReflectionView extends BasicView{public var viewportReflection : Viewport3D;public var cameraReflection : CameraObject3D;public var surfaceHeight : Number;private var _autoScaleToStage : Boolean;/**
* We need  to move the reflection view whenever the stage is resized so we have to implement
		 * the same functionality as the Viewport3D, ie we add a stage resize listener (once we're on the stage).
*/
public function set autoScaleToStage (scale:Boolean) : Void;public function ReflectionView (viewportWidth:Number = 640, viewportHeight:Number = 320, scaleToStage:Boolean = true, interactive:Boolean = false, cameraType:String = "Target");public function singleRender () : void;public function setReflectionColor (redMultiplier:Number = 0, greenMultiplier:Number = 0, blueMultiplier:Number = 0, redOffset:Number = 0, greenOffset:Number = 0, blueOffset:Number = 0) : void;/**
* Triggered when added to the stage to start listening to stage resizing
*/
protected function onAddedToStage (event:Event) : void;/**
* Triggered when removed from the stage to remove the stage resizing listener
*/
protected function onRemovedFromStage (event:Event) : void;private function onStageResize (e:Event = null) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\Lines3D.as
package org.papervision3d.core.geom{import org.papervision3d.core.geom.renderables.Line3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.render.command.RenderLine;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ILineDrawer;import org.papervision3d.materials.special.LineMaterial;import org.papervision3d.objects.DisplayObject3D;/**
* <p>
	 * The Lines object is a DisplayObject3D that is designed to contain and handle the rendering of
	 * Line3D objects. A Line3D is defined by two 3D vertices; one for each end. A line's start and end 
	 * vertices are converted into 2D space and rendered using the Flash drawing API lineTo method. 
	 * 
	 * Line3D can also render curves; add a control vertex using the Line3D.addControlVertex(...) method.
	 * The line's control vertex is then converted into 2D space and rendered using the Flash drawing API
	 * curveTo method.
	 * 
	 * The line's appearance is defined by its LineMaterial. 
	 * 
	 * </p>
	 * 
	 * <p>
	 * Example:
	 * </p>
	 * <pre><code>
	 * 
	 *  //This example creates a Lines3D DisplayObject3D and adds 100 lines into it. 
	 * 
	 *	var numLines : int = 100; 
	 *	
	 *	var lines3D : Lines3D = new Lines3D(); 
	 *	var lineMaterial : LineMaterial = new LineMaterial(0xff0000, 0.8); 
	 *	var lineWeight : Number = 5; 
	 *	
	 *	for(var i : int = 0; i<numLines; i++)
	 *	{
	 *		var startVertex : Vertex3D = new Vertex3D(Math.random()*200, Math.random()*200, Math.random()*200);
	 *		var endVertex 	: Vertex3D = new Vertex3D(Math.random()*200, Math.random()*200, Math.random()*200);
	 *		
	 *		var line : Line3D = new Line3D(lines3D, lineMaterial, lineWeight, startVertex, endVertex); 
	 *		
	 *		lines3D.addLine(line); 
	 *		
	 *	}
	 *	scene.addChild(lines3D); 
	 *		
 	 * </code></pre>
	 * </p>
	 * 
	 * <p>
	 * See also : LineMaterial
	 * </p>
	 * 
	 * @Author Ralph Hauwert
	 * @Author Seb Lee-Delisle
	 * @Author Alan Owen
 *
*/
public class Lines3D extends Vertices3D{public var lines : Array;private var _material : ILineDrawer;/**
* @param material			The default material for this Lines3D. If ommitted then the default
		 * 							LineMaterial3D is used. 
		 * @param name				An identifier for this Lines object.
*/
public function Lines3D (material:LineMaterial = null, name:String = null);private function init () : void;/**
* Converts 3D vertices into 2D space, to prepare for rendering onto the stage.
		*
		* @param 	parent				The parent DisplayObject3D
		* @param 	renderSessionData	The renderSessionData object for this render cycle. 
		 *
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* Adds a Line3D object to this Lines3D container.  
		 * @param line 	The Line3D object to add. 
		 *
*/
public function addLine (line:Line3D) : void;/**
* Creates a new line from the parameters passed and adds it.  
		 * @param size		The weight of the line. 
		 * @param x0		The line's start x position. 
		 * @param y0		The line's start y position. 
		 * @param z0		The line's start z position. 
		 * @param x1		The line's end x position. 
		 * @param y1		The line's end y position. 
		 * @param z1		The line's end z position. 
		 * @return 			The line just created. 
		 *
*/
public function addNewLine (size:Number, x0:Number, y0:Number, z0:Number, x1:Number, y1:Number, z1:Number) : Line3D;/**
* This is identical to addNewLine, except it breaks up the line into several shorter line segments
		 * that together make up the full line. This would be useful for improved z-depth sorting. 
		 * 
		 * @param size		The weight of the line. 
		 * @param segments	The number of segments to break up the line into
		 * @param x0		The line's start x position. 
		 * @param y0		The line's start y position. 
		 * @param z0		The line's start z position. 
		 * @param x1		The line's end x position. 
		 * @param y1		The line's end y position. 
		 * @param z1		The line's end z position. 
		 * @return 			An array of the lines just created. 
		 *
*/
public function addNewSegmentedLine (size:Number, segments:Number, x0:Number, y0:Number, z0:Number, x1:Number, y1:Number, z1:Number) : Array;/**
* Removes a line. 
		 * @param line 	The line to remove. 
		 *
*/
public function removeLine (line:Line3D) : void;/**
* Removes all the lines.  
		 *
*/
public function removeAllLines () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\Particles.as
package org.papervision3d.core.geom{import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.geom.renderables.Vertex3D;import flash.geom.Rectangle;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.core.culling.IObjectCuller;/**
* <p>	 * The Particles object is a DisplayObject3D that is used solely for displaying particle objects.	 * A single particle is a 2D graphic that is scaled and positioned relative to a 3D point, without	 * any perspective distortion. In effect, it's like a plane that is always facing the camera. This 	 * is sometimes referred to as a 3D sprite, pointsprite or billboard.	 * 	 * A particle's appearance is defined by its ParticleMaterial. 	 * 	 * </p>	 * 	 * <p>	 * Example:	 * </p>	 * <pre><code>	 * 	 *  //This example creates a Particles DisplayObject3D and adds 100 particles into it. 	 * 	 *	var numParticles : int = 100; 	 *		 *	var particles : Particles = new Particles(); 	 *	var particleMaterial : ParticleMaterial = new ParticleMaterial(0xff0000, 0.8,ParticleMaterial.SHAPE_CIRCLE); 	 *	var particleSize : Number = 5; 	 *		 *	for(var i : int = 0; i<numParticles; i++)	 *	{	 * 		var xpos : Number = Math.random()*200; 	 * 		var ypos : Number = Math.random()*200; 	 * 		var zpos : Number = Math.random()*200; 	 * 	 *		var particle : Particle = new Particle(particleMaterial, particleSize, xpos, ypos, zpos);	 *		particles.addParticle(particle); 	 *			 *	}	 *	scene.addChild(particles); 	 *  	 * </code></pre>	 * </p>	 * 	 * <p>	 * See also : ParticleMaterial, MovieAssetParticleMaterial, MovieParticleMaterial, BitmapParticleMaterial. 	 * </p>	 * 	 * @Author Ralph Hauwert	 * @Author Seb Lee-Delisle
*/
public class Particles extends Vertices3D{private var vertices : Array;public var particles : Array;private static var _newID : int;/**
* @param name				An identifier for this Particles object. 		 *
*/
public function Particles (name:String = "Particles");/**
* Converts 3D vertices into 2D space, to prepare for rendering onto the stage.		*		* @param 	parent				The parent DisplayObject3D		* @param 	renderSessionData	The renderSessionData object for this render cycle. 		 *
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* Adds a particle. 		 * 		 * @param	particle	The particle to be added.
*/
public function addParticle (particle:Particle) : void;/**
* Removes a particle. 		 * 		 * @param	particle	The particle to be removed.
*/
public function removeParticle (particle:Particle) : void;/**
* Removes all the particles. 		 *
*/
public function removeAllParticles () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\Pixels.as
package org.papervision3d.core.geom{import org.papervision3d.core.geom.renderables.Pixel3D;import org.papervision3d.core.render.command.RenderPixels;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.layer.BitmapEffectLayer;/**
* @Author Andy Zupko
*/
public class Pixels extends Vertices3D{private var vertices : Array;private var renderCommand : RenderPixels;public var pixels : Array;public var layer : BitmapEffectLayer;public var screenDepth : int;public var sort : Boolean;/**
* Vertexpixels
		 * 
		 * A simple Particle Renderer for Papervision3D.
		 * 
		 * Renders added pixels to a given container using Flash's drawing API.
*/
public function Pixels (effectLayer:BitmapEffectLayer, name:String = "pixels3d");/**
* Project
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* addParticle(particle);
		 * 
		 * @param	particle	partical to be added and rendered by to this Vertexpixels Object.
*/
public function addPixel3D (pixel:Pixel3D) : void;/**
* removeParticle(pixel);
		 * 
		 * @param	pixel	partical to be removed from this Vertexpixels Object.
*/
public function removePixel3D (pixel:Pixel3D) : void;/**
* removeAllpixels()
		 * 
		 * removes all pixels in this Vertexpixels Object.
*/
public function removeAllpixels () : void;private function sortOnDepth (a:Pixel3D, b:Pixel3D) : Number;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\TriangleMesh3D.as
package org.papervision3d.core.geom{import flash.utils.Dictionary;import org.papervision3d.core.culling.ITriangleCuller;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Triangle3DInstance;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.math.util.ClassificationUtil;import org.papervision3d.core.proto.*;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.objects.DisplayObject3D;/**
* The Mesh3D class lets you create and display solid 3D objects made of vertices and triangular polygons.
*/
public class TriangleMesh3D extends Vertices3D{private var _dtStore : Array;private var _dtActive : Array;private var _tri : RenderTriangle;public function set material (material:MaterialObject3D) : Void;/**
* Creates a new Mesh object.		*		* The Mesh DisplayObject3D class lets you create and display solid 3D objects made of vertices and triangular polygons.		* <p/>		* @param	material	A MaterialObject3D object that contains the material properties of the object.		* <p/>		* @param	vertices	An array of Vertex3D objects for the vertices of the mesh.		* <p/>		* @param	faces		An array of Face3D objects for the faces of the mesh.		* <p/>
*/
public function TriangleMesh3D (material:MaterialObject3D, vertices:Array, faces:Array, name:String = null);/**
* Clones this object.		 * 		 * @return	The cloned DisplayObject3D.
*/
public function clone () : DisplayObject3D;/**
* Projects three dimensional coordinates onto a two dimensional plane to simulate the relationship of the camera to subject.		*		* This is the first step in the process of representing three dimensional shapes two dimensionally.		*		* @param	camera	Camera3D object to render from.
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;protected function setScreenZ (meshSort:uint, vertex0:Vertex3DInstance, vertex1:Vertex3DInstance, vertex2:Vertex3DInstance) : Number;/**
* Planar projection from the specified plane.		*		* @param	u	The texture horizontal axis. Can be "x", "y" or "z". The default value is "x".		* @param	v	The texture vertical axis. Can be "x", "y" or "z". The default value is "y".
*/
public function projectTexture (u:String = "x", v:String = "y") : void;/**
* Divides all faces into 4.
*/
public function quarterFaces () : void;/**
* Merges duplicated vertices.
*/
public function mergeVertices () : void;public function createRenderTriangle (face:Triangle3D, material:MaterialObject3D, v0:Vertex3DInstance, v1:Vertex3DInstance, v2:Vertex3DInstance, uv0:NumberUV, uv1:NumberUV, uv2:NumberUV) : RenderTriangle;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\Vertices3D.as
package org.papervision3d.core.geom{import org.papervision3d.core.culling.IObjectCuller;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.proto.GeometryObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;/**
* The Vertices3D class lets you create and manipulate groups of vertices.	*
*/
public class Vertices3D extends DisplayObject3D{/**
* Creates a new Vertices3D object.		*		*		* @param	vertices	An array of Vertex3D objects for the vertices of the mesh.		* <p/>
*/
public function Vertices3D (vertices:Array, name:String = null);/**
* Clones this object.		 * 		 * @return	The cloned DisplayObject3D.
*/
public function clone () : DisplayObject3D;/**
* Projects three dimensional coordinates onto a two dimensional plane to simulate the relationship of the camera to subject.		*		* This is the first step in the process of representing three dimensional shapes two dimensionally.		*		* @param	camera		Camera.
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;public function projectEmpty (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* 		 * @param	parent		 * @param	camera		 * @param	sorted		 * @return
*/
public function projectFrustum (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* Calculates 3D bounding box.		*		* @return	{min : Number3D, max : Number3D, size : Number3D}
*/
public function boundingBox () : Object;/**
* Calculates 3D bounding box in world space.		*		* @return	{minX, maxX, minY, maxY, minZ, maxZ}
*/
public function worldBoundingBox () : Object;public function transformVertices (transformation:Matrix3D) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\AbstractRenderable.as
package org.papervision3d.core.geom.renderables{import org.papervision3d.core.data.UserData;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.objects.DisplayObject3D;public class AbstractRenderable implements IRenderable{public var _userData : UserData;public var instance : DisplayObject3D;/**
* userData UserData
		 * 
		 * Optional extra data to be added to this object.
*/
public function set userData (userData:UserData) : Void;public function get userData () : UserData;public function AbstractRenderable ();public function getRenderListItem () : IRenderListItem;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\IRenderable.as
package org.papervision3d.core.geom.renderables{import org.papervision3d.core.render.command.IRenderListItem;/**
* @Author Ralph Hauwert
*/
public interface IRenderable{public function getRenderListItem () : IRenderListItem;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\Line3D.as
package org.papervision3d.core.geom.renderables{import org.papervision3d.core.geom.Lines3D;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderLine;import org.papervision3d.materials.special.LineMaterial;/**
* 
	 * Line3D is used by Lines3D to store and render the lines. See Lines3D for a full explanation. 
	 * 
	 * @Author Ralph Hauwert
	 * @Author Andy Zupko
	 * @Author Seb Lee-Delisle
*/
public class Line3D extends AbstractRenderable implements IRenderable{public var v0 : Vertex3D;public var v1 : Vertex3D;public var cV : Vertex3D;public var material : LineMaterial;public var renderCommand : RenderLine;public var size : Number;/**
* 
		 * @param instance		The containing Lines3D object
		 * @param material		The material for the line
		 * @param size			The line weight
		 * @param vertex0		The start vertex
		 * @param vertex1		The end vertex
		 *
*/
public function Line3D (instance:Lines3D, material:LineMaterial, size:Number, vertex0:Vertex3D, vertex1:Vertex3D);public function addControlVertex (cx:Number, cy:Number, cz:Number) : void;public function getRenderListItem () : IRenderListItem;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\Particle.as
package org.papervision3d.core.geom.renderables{import flash.geom.Matrix;import flash.geom.Rectangle;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderParticle;import org.papervision3d.materials.special.ParticleMaterial;/**
* This is the single renderable Particle object, used by Particles.as
	 * 
	 * See Particles.as for a full explanation. 
	 * 
	 * 
	 * @author Ralph Hauwert
	 * @author Seb Lee-Delisle
*/
public class Particle extends AbstractRenderable implements IRenderable{/**
* The size or scale factor of the particle.
*/
public var size : Number;public var vertex3D : Vertex3D;public var material : ParticleMaterial;public var renderCommand : RenderParticle;public var renderScale : Number;public var drawMatrix : Matrix;public var rotationZ : Number;/**
* The rectangle containing the particles visible area in 2D.
*/
public var renderRect : Rectangle;public function set x (x:Number) : Void;public function get x () : Number;public function set y (y:Number) : Void;public function get y () : Number;public function set z (z:Number) : Void;public function get z () : Number;/**
* 
		 * @param material		The ParticleMaterial used for rendering the Particle
		 * @param size			The size of the particle. For some materials (ie BitmapParticleMaterial) this is used as a scale factor. 
		 * @param x				x position of the particle
		 * @param y				y position of the particle
		 * @param z				z position of the particle
		 *
*/
public function Particle (material:ParticleMaterial, size:Number = 1, x:Number = 0, y:Number = 0, z:Number = 0);/**
* This is called during the projection cycle. It updates the rectangular area that 
		 * the particle is drawn into. It's important for the culling phase, and changes dependent
		 * on the type of material used.  
		 *
*/
public function updateRenderRect () : void;public function getRenderListItem () : IRenderListItem;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\Pixel3D.as
package org.papervision3d.core.geom.renderables{import org.papervision3d.core.geom.Pixels;/**
* @author Andy Zupko.
*/
public class Pixel3D{public var vertex3D : Vertex3D;public var color : uint;public var instance : Pixels;public function set x (x:Number) : Void;public function get x () : Number;public function set y (y:Number) : Void;public function get y () : Number;public function set z (z:Number) : Void;public function get z () : Number;public function Pixel3D (color:uint, x:Number = 0, y:Number = 0, z:Number = 0);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\Triangle3D.as
package org.papervision3d.core.geom.renderables{import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.*;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.materials.BitmapMaterial;import org.papervision3d.materials.special.CompositeMaterial;import org.papervision3d.objects.DisplayObject3D;/**
* The Face3D class lets you render linear textured triangles. It also supports solid colour fill and hairline outlines.	*
*/
public class Triangle3D extends AbstractRenderable implements IRenderable{/**
* An array of Vertex3D objects for the three vertices of the triangle.
*/
public var vertices : Array;/**
* A material id TODO
*/
public var _materialName : String;/**
* A MaterialObject3D object that contains the material properties of the back of a single sided triangle.
*/
public var uv0 : NumberUV;public var uv1 : NumberUV;public var uv2 : NumberUV;public var _uvArray : Array;/**
* [read-only] The average depth (z coordinate) of the transformed triangle. Also known as the distance from the camera. Used internally for z-sorting.
*/
public var screenZ : Number;/**
* [read-only] A Boolean value that indicates that the face is visible, i.e. it's vertices are in front of the camera.
*/
public var visible : Boolean;/**
* [read-only] Unique id of this instance.
*/
public var id : Number;/**
* Used to store references to the vertices.
*/
public var v0 : Vertex3D;public var v1 : Vertex3D;public var v2 : Vertex3D;/**
* The face normal
*/
public var faceNormal : Number3D;/**
* stores the material for this face.
*/
public var material : MaterialObject3D;public var renderCommand : RenderTriangle;private static var _totalFaces : Number;/**
* An array of {x,y} objects for the corresponding UV pixel coordinates of each triangle vertex.
*/
public function set uv (uvs:Array) : Void;public function get uv () : Array;/**
* The Face3D constructor lets you create linear textured or solid colour triangles.		*		* @param	vertices	An array of Vertex3D objects for the three vertices of the triangle.		* @param	material	A MaterialObject3D object that contains the material properties of the triangle.		* @param	uv			An array of {x,y} objects for the corresponding UV pixel coordinates of each triangle vertex.
*/
public function Triangle3D (do3dInstance:DisplayObject3D, vertices:Array, material:MaterialObject3D = null, uv:Array = null);public function reset (object:DisplayObject3D, vertices:Array, material:MaterialObject3D, uv:Array) : void;public function createNormal () : void;public function getRenderListItem () : IRenderListItem;public function updateVertices () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\Triangle3DInstance.as
package org.papervision3d.core.geom.renderables{import flash.display.Sprite;import org.papervision3d.core.math.Number3D;import org.papervision3d.objects.DisplayObject3D;public class Triangle3DInstance{public var instance : DisplayObject3D;/**
* container is initialized via DisplayObject3D's render method IF DisplayObject3D.faceLevelMode is set to true
*/
public var container : Sprite;public var visible : Boolean;public var screenZ : Number;public var faceNormal : Number3D;public function Triangle3DInstance (face:Triangle3D, instance:DisplayObject3D);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\VectorShapeRenderable.as
package org.papervision3d.core.geom.renderables{import org.papervision3d.core.geom.renderables.AbstractRenderable;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderVectorShape;import org.papervision3d.materials.special.VectorShapeMaterial;import org.papervision3d.objects.special.VectorShape3D;/**
* @author Mark Barcinski
*/
public class VectorShapeRenderable extends AbstractRenderable implements IRenderable{public var material : VectorShapeMaterial;public var renderCommand : RenderVectorShape;public function VectorShapeRenderable (instance:VectorShape3D, renderCommand:RenderVectorShape);public function getRenderListItem () : IRenderListItem;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\Vertex3D.as
package org.papervision3d.core.geom.renderables{import flash.utils.Dictionary;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.render.command.IRenderListItem;/**
* The Vertex3D constructor lets you create 3D vertices.
*/
public class Vertex3D extends AbstractRenderable implements IRenderable{/**
* An Number that sets the X coordinate of a object relative to the scene coordinate system.
*/
public var x : Number;/**
* An Number that sets the Y coordinate of a object relative to the scene coordinates.
*/
public var y : Number;/**
* An Number that sets the Z coordinate of a object relative to the scene coordinates.
*/
public var z : Number;/**
* An object that contains user defined properties.
*/
public var extra : Object;/**
* Used for removing duplicates in clipping procedures
*/
public var timestamp : Number;/**
* Vertex2D instance
*/
public var vertex3DInstance : Vertex3DInstance;public var normal : Number3D;public var connectedFaces : Dictionary;private var persp : Number;protected var position : Number3D;/**
* Creates a new Vertex3D object whose three-dimensional values are specified by the x, y and z parameters.
		*
		* @param	x	The horizontal coordinate value. The default value is zero.
		* @param	y	The vertical coordinate value. The default value is zero.
		* @param	z	The depth coordinate value. The default value is zero.
		*
		*
*/
public function Vertex3D (x:Number = 0, y:Number = 0, z:Number = 0);public function getPosition () : Number3D;public function toNumber3D () : Number3D;public function clone () : Vertex3D;public function calculateNormal () : void;public function getRenderListItem () : IRenderListItem;public static function weighted (a:Vertex3D, b:Vertex3D, aw:Number, bw:Number) : Vertex3D;public function perspective (focus:Number) : Vertex3DInstance;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\Vertex3DInstance.as
package org.papervision3d.core.geom.renderables{import org.papervision3d.core.math.Number3D;/**
* The Vertex3DInstance constructor lets you create 2D projected vertices.
*/
public class Vertex3DInstance{/**
* An Number that sets the X coordinate of a object relative to the scene coordinate system.
*/
public var x : Number;/**
* An Number that sets the Y coordinate of a object relative to the scene coordinates.
*/
public var y : Number;/**
* An Number that sets the Z coordinate of a object relative to the scene coordinates.
*/
public var z : Number;/**
* An object that contains user defined properties.
*/
public var extra : Object;/**
* [internal-use] A Boolean value that indicates whether the vertex is visible after projection.
		*
		* If false, it indicates that the vertex is behind the camera plane.
		*
		*
*/
public var visible : Boolean;public var normal : Number3D;private var persp : Number;/**
* Creates a new Vertex2D object whose three-dimensional values are specified by the x, y and z parameters.
		*
		* @param	x	The horizontal coordinate value. The default value is zero.
		* @param	y	The vertical coordinate value. The default value is zero.
		* @param	z	The depth coordinate value. The default value is zero.
		*
		*
*/
public function Vertex3DInstance (x:Number = 0, y:Number = 0, z:Number = 0);public function clone () : Vertex3DInstance;public static function dot (v0:Vertex3DInstance, v1:Vertex3DInstance) : Number;public static function cross (v0:Vertex3DInstance, v1:Vertex3DInstance) : Number;public static function sub (v0:Vertex3DInstance, v1:Vertex3DInstance) : Vertex3DInstance;public static function subTo (v0:Vertex3DInstance, v1:Vertex3DInstance, o:Vertex3DInstance) : void;public function deperspective (focus:Number) : Vertex3D;/**
* Calculates the squared distance between two screen vertex objects.
		 * 
		 * @param	b	The screen vertex object to use for the calcation.
		 * @return		The squared scalar value of the vector between this and the given scren vertex.
*/
public function distanceSqr (b:Vertex3DInstance) : Number;/**
* Calculates the distance between two screen vertex objects.
		 * 
		 * @param	b	The second screen vertex object to use for the calcation.
		 * @return		The scalar value of the vector between this and the given screen vertex.
*/
public function distance (b:Vertex3DInstance) : Number;public static function median (a:Vertex3DInstance, b:Vertex3DInstance, focus:Number) : Vertex3DInstance;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\io\BasicExporter.as
package org.papervision3d.core.io{import flash.utils.ByteArray;import org.papervision3d.core.io.exporters.*;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.proto.DisplayObjectContainer3D;import org.papervision3d.core.proto.SceneObject3D;import org.papervision3d.materials.BitmapFileMaterial;import org.papervision3d.materials.ColorMaterial;import org.papervision3d.materials.WireframeMaterial;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.objects.primitives.Sphere;import org.papervision3d.scenes.Scene3D;/**
* @author Tim Knip
*/
public class BasicExporter{/**
* Exports an object and its children to the specified file format.
		 * NOTE: its best to only export after at least one renderpass (all object-internals like 
		 * rotation-matrices etc. will then be initialized).
		 * 
		 * @param object The object to export. Supported: DisplayObject3D, SceneObject3D.
		 * @param exportFileFormat The file export format. @see org.papervision3d.core.io.exporters.ExportFileFormat
		 * 
		 * @return ByteArray
*/
public static function export (object:DisplayObjectContainer3D, exportFileFormat:uint = 0) : ByteArray;/**
* Test
*/
public static function test () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\io\exporters\ExportCollada.as
package org.papervision3d.core.io.exporters{import flash.utils.Dictionary;import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.materials.BitmapFileMaterial;import org.papervision3d.materials.WireframeMaterial;import org.papervision3d.materials.utils.MaterialsList;import org.papervision3d.objects.DisplayObject3D;/**
* This class lets you export a DisplayObject3D to the Collada file format (*.dae).
	 * <p></p>
	 * 
	 * @author Tim Knip
*/
public class ExportCollada{public static var DEFAULT_TEXTURE_DIR : String;/**
Default visuals scene id and name.
*/
public static var VISUAL_SCENE_NAME : String;/**
Number of fraction digits to use for floats.
*/
public static var FRACTION_DIGITS : int;/**
Boolean indicatin whether to flip faces.
*/
public static var REVERSE_WINDING : Boolean;private static var _numInstances : int;private static var _numMaterials : int;private static var _materialTargets : Dictionary;private static var _hasImages : Boolean;private static var _numImages : int;private static var _materialToImageId : Dictionary;/**
*
*/
public static function export (object:DisplayObject3D) : String;/**
* Exports the <color> element.
		 * 
		 * @param material
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportColor (material:MaterialObject3D = null, indent:int = 0) : String;/**
* Exports the <effect> elements.
		 * 
		 * @param object
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportEffects (object:DisplayObject3D, indent:int = 0) : String;/**
* Exports a <source> element with float data.
		 * 
		 * @param id
		 * @param values
		 * @param params
		 * @param indent
		 * 
		 * @return XML String
*/
private static function exportFloatSource (id:String, values:Array, params:Array, indent:int = 0) : String;/**
* Export all geometries and child-geometries for a specific DisplayObject3D
		 * 
		 * @param instance
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportGeometries (instance:DisplayObject3D, indent:int = 0) : String;/**
* Exports a mesh's geometry as a Collada <geometry> element.
		 * 
		 * @param mesh
		 * @param id
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportGeometry (mesh:TriangleMesh3D, id:String, indent:int = 0) : String;/**
* Exports the <image> elements.
		 * 
		 * @param object
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportImages (object:DisplayObject3D, indent:int = 0) : String;/**
* Exports the <material> elements.
		 * 
		 * @param object
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportMaterials (object:DisplayObject3D, indent:int = 0) : String;/**
* Exports a <matrix> element.
		 * 
		 * @param matrix
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportMatrix (matrix:Matrix3D, indent:int = 0) : String;/**
* Exports a <visual_scene> element.
		 * 
		 * @param object
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportVisualScene (object:DisplayObject3D, indent:int = 0) : String;/**
*
*/
private static function getInstanceName (instance:DisplayObject3D) : String;/**
*
*/
private static function prepareMaterials (object:DisplayObject3D) : void;/**
*
*/
private static function findMaterialName (find:MaterialObject3D, list:MaterialsList) : String;private static function printLine (str:String, indent:int = 0) : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\io\exporters\ExportFileFormat.as
package org.papervision3d.core.io.exporters{public class ExportFileFormat{public static const COLLADA : uint;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\log\AbstractPaperLogger.as
package org.papervision3d.core.log{import org.papervision3d.core.log.event.PaperLoggerEvent;/**
* @author Ralph Hauwert
*/
public class AbstractPaperLogger implements IPaperLogger{public function AbstractPaperLogger ();protected function onLogEvent (event:PaperLoggerEvent) : void;public function log (msg:String, object:Object = null, arg:Array = null) : void;public function info (msg:String, object:Object = null, arg:Array = null) : void;public function debug (msg:String, object:Object = null, arg:Array = null) : void;public function warning (msg:String, object:Object = null, arg:Array = null) : void;public function error (msg:String, object:Object = null, arg:Array = null) : void;public function fatal (msg:String, object:Object = null, arg:Array = null) : void;public function registerWithPaperLogger (paperLogger:PaperLogger) : void;public function unregisterFromPaperLogger (paperLogger:PaperLogger) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\log\IPaperLogger.as
package org.papervision3d.core.log{/**
* @author Ralph Hauwert
*/
public interface IPaperLogger{public function log (msg:String, object:Object = null, arguments:Array = null) : void;public function info (msg:String, object:Object = null, arguments:Array = null) : void;public function debug (msg:String, object:Object = null, arguments:Array = null) : void;public function warning (msg:String, object:Object = null, arguments:Array = null) : void;public function error (msg:String, object:Object = null, arguments:Array = null) : void;public function fatal (msg:String, object:Object = null, arguments:Array = null) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\log\LogLevel.as
package org.papervision3d.core.log{/**
* @author Ralph Hauwert
*/
public class LogLevel{public static const LOG : int;public static const INFO : int;public static const DEBUG : int;public static const WARNING : int;public static const ERROR : int;public static const FATAL : int;public function LogLevel ();}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\log\PaperLogger.as
package org.papervision3d.core.log{import flash.events.EventDispatcher;import org.papervision3d.core.log.event.PaperLoggerEvent;/**
* @author Ralph Hauwert
*/
public class PaperLogger extends EventDispatcher{private static var instance : PaperLogger;public var traceLogger : PaperTraceLogger;public function PaperLogger ();public function _log (msg:String, object:Object = null, ...arg) : void;public function _info (msg:String, object:Object = null, ...arg) : void;public function _debug (msg:String, object:Object = null, ...arg) : void;public function _error (msg:String, object:Object = null, ...arg) : void;public function _warning (msg:String, object:Object = null, ...arg) : void;public function registerLogger (logger:AbstractPaperLogger) : void;public function unregisterLogger (logger:AbstractPaperLogger) : void;public static function log (msg:String, object:Object = null, ...arg) : void;public static function warning (msg:String, object:Object = null, ...arg) : void;public static function info (msg:String, object:Object = null, ...arg) : void;public static function error (msg:String, object:Object = null, ...arg) : void;public static function debug (msg:String, object:Object = null, ...arg) : void;public static function getInstance () : PaperLogger;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\log\PaperLogVO.as
package org.papervision3d.core.log{/**
* @author Ralph Hauwert
*/
public class PaperLogVO{public var level : int;public var msg : String;public var object : Object;public var arg : Array;public function PaperLogVO (level:int, msg:String, object:Object, arg:Array);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\log\PaperTraceLogger.as
package org.papervision3d.core.log{public class PaperTraceLogger extends AbstractPaperLogger implements IPaperLogger{public function PaperTraceLogger ();public function log (msg:String, object:Object = null, arguments:Array = null) : void;public function info (msg:String, object:Object = null, arguments:Array = null) : void;public function debug (msg:String, object:Object = null, arguments:Array = null) : void;public function warning (msg:String, object:Object = null, arguments:Array = null) : void;public function error (msg:String, object:Object = null, arguments:Array = null) : void;public function fatal (msg:String, object:Object = null, arguments:Array = null) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\log\event\PaperLoggerEvent.as
package org.papervision3d.core.log.event{import flash.events.Event;import org.papervision3d.core.log.PaperLogVO;/**
* @author Ralph Hauwert
*/
public class PaperLoggerEvent extends Event{public static const TYPE_LOGEVENT : String;public var paperLogVO : PaperLogVO;public function PaperLoggerEvent (paperLogVO:PaperLogVO);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\material\AbstractLightShadeMaterial.as
package org.papervision3d.core.material{import flash.utils.Dictionary;import org.papervision3d.core.material.TriangleMaterial;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.core.render.material.IUpdateBeforeMaterial;import org.papervision3d.materials.utils.LightMatrix;import org.papervision3d.objects.DisplayObject3D;public class AbstractLightShadeMaterial extends TriangleMaterial implements ITriangleDrawer{public var lightMatrices : Dictionary;private var _light : LightObject3D;protected static var lightMatrix : Matrix3D;public function set light (light:LightObject3D) : Void;public function get light () : LightObject3D;public function AbstractLightShadeMaterial ();protected function init () : void;public function updateBeforeRender (renderSessionData:RenderSessionData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\material\AbstractSmoothShadeMaterial.as
package org.papervision3d.core.material{import flash.geom.Matrix;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.core.render.material.IUpdateBeforeMaterial;/**
* @Author Ralph Hauwert
*/
public class AbstractSmoothShadeMaterial extends AbstractLightShadeMaterial implements ITriangleDrawer{protected var transformMatrix : Matrix;protected var triMatrix : Matrix;public function AbstractSmoothShadeMaterial ();protected function init () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\material\TriangleMaterial.as
package org.papervision3d.core.material{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;/**
* @Author Ralph Hauwert
*/
public class TriangleMaterial extends MaterialObject3D implements ITriangleDrawer{public function TriangleMaterial ();public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;public function drawRT (rt:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\AxisAlignedBoundingBox.as
package org.papervision3d.core.math{import org.papervision3d.core.geom.renderables.Vertex3D;public class AxisAlignedBoundingBox{public var minX : Number;public var minY : Number;public var minZ : Number;public var maxX : Number;public var maxY : Number;public var maxZ : Number;protected var _vertices : Array;/**
* @author Ralph Hauwert/Alex Clarke
*/
public function AxisAlignedBoundingBox (minX:Number, minY:Number, minZ:Number, maxX:Number, maxY:Number, maxZ:Number);protected function createBoxVertices () : void;public function getBoxVertices () : Array;public function merge (bbox:AxisAlignedBoundingBox) : void;public static function createFromVertices (vertices:Array) : AxisAlignedBoundingBox;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\BoundingSphere.as
package org.papervision3d.core.math{import org.papervision3d.core.geom.renderables.Vertex3D;public class BoundingSphere{public var maxDistance : Number;public var radius : Number;/**
* @Author Ralph Hauwert
*/
public function BoundingSphere (maxDistance:Number);public static function getFromVertices (vertices:Array) : BoundingSphere;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\Matrix3D.as
package org.papervision3d.core.math{import org.papervision3d.Papervision3D;/**
* The Matrix3D class lets you create and manipulate 4x3 3D transformation matrices.
*/
public class Matrix3D{/**
* X O O O	 * O O O O	 * O O O O
*/
public var n11 : Number;/**
* O X O O	 * O O O O	 * O O O O
*/
public var n12 : Number;/**
* O O X O	 * O O O O	 * O O O O
*/
public var n13 : Number;/**
* O O O X	 * O O O O	 * O O O O
*/
public var n14 : Number;/**
* O O O O	 * X O O O	 * O O O O
*/
public var n21 : Number;/**
* O O O O	 * O X O O	 * O O O O
*/
public var n22 : Number;/**
* O O O O	 * O O X O	 * O O O O
*/
public var n23 : Number;/**
* O O O O	 * O O O X	 * O O O O
*/
public var n24 : Number;/**
* O O O O	 * O O O O	 * X O O O
*/
public var n31 : Number;/**
* O O O O	 * O O O O	 * O X O O
*/
public var n32 : Number;/**
* O O O O	 * O O O O	 * O O X O
*/
public var n33 : Number;/**
* O O O O	 * O O O O	 * O O O X
*/
public var n34 : Number;/**
* O O O O	 * O O O O	 * O O O O	 * X O O O
*/
public var n41 : Number;/**
* O O O O	 * O O O O	 * O O O O	 * O X O O
*/
public var n42 : Number;/**
* O O O O	 * O O O O	 * O O O O	 * O O X O
*/
public var n43 : Number;/**
* O O O O	 * O O O O	 * O O O O	 * O O O X
*/
public var n44 : Number;private static var temp : Matrix3D;private static var n3Di : Number3D;private static var n3Dj : Number3D;private static var n3Dk : Number3D;private static var toDEGREES : Number;private static var toRADIANS : Number;private static var _sin : Function;private static var _cos : Function;public static function get IDENTITY () : Matrix3D;public function get det () : Number;/**
* The Matrix3D constructor lets you create Matrix3D objects.	*	* @param	args	The values to populate the matrix with. Identity matrix is returned by default.
*/
public function Matrix3D (args:Array = null);public function reset (args:Array = null) : void;public function toString () : String;public function calculateMultiply (a:Matrix3D, b:Matrix3D) : void;public static function multiply (a:Matrix3D, b:Matrix3D) : Matrix3D;public function calculateMultiply3x3 (a:Matrix3D, b:Matrix3D) : void;public function calculateMultiply4x4 (a:Matrix3D, b:Matrix3D) : void;/**
*
*/
public function calculateSkewSymmetric (a:Number3D) : void;public static function multiply3x3 (a:Matrix3D, b:Matrix3D) : Matrix3D;public function calculateAdd (a:Matrix3D, b:Matrix3D) : void;public static function add (a:Matrix3D, b:Matrix3D) : Matrix3D;public function calculateInverse (m:Matrix3D) : void;public function calculateTranspose () : void;public static function inverse (m:Matrix3D) : Matrix3D;public function invert () : void;/**
public function get trace():Number	{		return this.n11 + this.n22 + this.n33 + 1;	}
*/
public function copy (m:Matrix3D) : Matrix3D;public function copy3x3 (m:Matrix3D) : Matrix3D;public static function clone (m:Matrix3D) : Matrix3D;public static function multiplyVector (m:Matrix3D, v:Number3D) : void;public static function multiplyVector3x3 (m:Matrix3D, v:Number3D) : void;public static function multiplyVector4x4 (m:Matrix3D, v:Number3D) : void;public static function rotateAxis (m:Matrix3D, v:Number3D) : void;/**
public static function matrix2eulerOLD( m:Matrix3D ):Number3D	{		var angle:Number3D = new Number3D();		var d :Number = -Math.asin( Math.max( -1, Math.min( 1, m.n13 ) ) ); // Calculate Y-axis angle		var c :Number =  Math.cos( d );		angle.y = d * toDEGREES;		var trX:Number, trY:Number;		if( Math.abs( c ) > 0.005 )  // Gimball lock?		{			trX =  m.n33 / c;  // No, so get X-axis angle			trY = -m.n23 / c;			angle.x = Math.atan2( trY, trX ) * toDEGREES;			trX =  m.n11 / c;  // Get Z-axis angle			trY = -m.n12 / c;			angle.z = Math.atan2( trY, trX ) * toDEGREES;		}		else  // Gimball lock has occurred		{			angle.x = 0;  // Set X-axis angle to zero			trX = m.n22;  // And calculate Z-axis angle			trY = m.n21;			angle.z = Math.atan2( trY, trX ) * toDEGREES;		}		// TODO: Clamp all angles to range		return angle;	}		public static function matrix2euler2( t:Matrix3D, rot:Number3D = null, scale:Number3D=null):Number3D	{		if(!rot) rot = Number3D.ZERO; 		// Normalize the local x, y and z axes to remove scaling.		n3Di.reset( t.n11, t.n21, t.n31 );		n3Dj.reset( t.n12, t.n22, t.n32 );		n3Dk.reset( t.n13, t.n23, t.n33 );		n3Di.normalize();		n3Dj.normalize();		n3Dk.normalize();		temp.reset([			n3Di.x, n3Dj.x, n3Dk.x, 0,			n3Di.y, n3Dj.y, n3Dk.y, 0,			n3Di.z, n3Dj.z, n3Dk.z, 0		]);		var m:Matrix3D = temp;	    // Extract the first angle, rot.x		rot.x = Math.atan2( m.n23, m.n33 ); // rot.x = Math<T>::atan2 (M[1][2], M[2][2]);			// Remove the rot.x rotation from M, so that the remaining		// rotation, N, is only around two axes, and gimbal lock		// cannot occur.		var rx:Matrix3D = Matrix3D.rotationX( -rot.x );		var n:Matrix3D = Matrix3D.multiply( rx, m );		// Extract the other two angles, rot.y and rot.z, from N.		var cy:Number = Math.sqrt( n.n11 * n.n11 + n.n21 * n.n21); // T cy = Math<T>::sqrt (N[0][0]*N[0][0] + N[0][1]*N[0][1]);		rot.y = Math.atan2( -n.n31, cy ); // rot.y = Math<T>::atan2 (-N[0][2], cy);		rot.z = Math.atan2( -n.n12, n.n11 ); //rot.z = Math<T>::atan2 (-
*/
public static function matrix2euler (m:Matrix3D, euler:Number3D = null, scale:Number3D = null) : Number3D;public static function euler2matrix (deg:Number3D) : Matrix3D;public static function rotationX (rad:Number) : Matrix3D;public static function rotationY (rad:Number) : Matrix3D;public static function rotationZ (rad:Number) : Matrix3D;public static function rotationMatrix (x:Number, y:Number, z:Number, rad:Number, targetmatrix:Matrix3D = null) : Matrix3D;public static function rotationMatrixWithReference (axis:Number3D, rad:Number, ref:Number3D) : Matrix3D;public static function translationMatrix (x:Number, y:Number, z:Number) : Matrix3D;public static function scaleMatrix (x:Number, y:Number, z:Number) : Matrix3D;public static function magnitudeQuaternion (q:Object) : Number;public static function normalizeQuaternion (q:Object) : Object;public static function axis2quaternion (x:Number, y:Number, z:Number, angle:Number) : Object;public static function euler2quaternion (ax:Number, ay:Number, az:Number, targetquat:Quaternion = null) : Quaternion;public static function quaternion2matrix (x:Number, y:Number, z:Number, w:Number, targetmatrix:Matrix3D = null) : Matrix3D;public static function multiplyQuaternion (a:Object, b:Object) : Object;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\Number2D.as
package org.papervision3d.core.math{import org.papervision3d.Papervision3D;/**
* PLUG-IN MEDIA 2D Vector Class, by Seb Lee-Delisle re-written for Papervision3D as Number2D. 	 *  	 * Version 0.1 10 Feb 2008
*/
public class Number2D{public static const RADTODEG : Number;public static const DEGTORAD : Number;public var x : Number;public var y : Number;public function get modulo () : Number;public function get moduloSquared () : Number;public function Number2D (x:Number = 0, y:Number = 0);public function toString () : String;public function clone () : Number2D;public function copyTo (v:Number2D) : void;public function copyFrom (v:Number2D) : void;public function normalise () : void;public function reverse () : void;public static function add (v:Number2D, w:Number2D) : Number2D;public static function subtract (v:Number2D, w:Number2D) : Number2D;public function plusEq (v:Number2D) : void;public function minusEq (v:Number2D) : void;public function divideEq (d:Number) : void;public function multiplyEq (d:Number) : void;public static function multiplyScalar (v:Number2D, n:Number) : Number2D;public static function dot (v:Number2D, w:Number2D) : Number;public function angle () : Number;public function rotate (angle:Number) : void;public function reset (x:Number = 0, y:Number = 0) : void;/**
* Super fast modulo(length, magnitude) comparisons.		 * 		 *
*/
public function isModuloLessThan (v:Number) : Boolean;public function isModuloGreaterThan (v:Number) : Boolean;public function isModuloEqualTo (v:Number) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\Number3D.as
package org.papervision3d.core.math{import org.papervision3d.Papervision3D;/**
* The Number3D class represents a value in a three-dimensional coordinate system.** Properties x, y and z represent the horizontal, vertical and z the depth axes respectively.*
*/
public class Number3D{/**
* The horizontal coordinate value.
*/
public var x : Number;/**
* The vertical coordinate value.
*/
public var y : Number;/**
* The depth coordinate value.
*/
public var z : Number;/**
* pre-made Number3D : used by various methods as a way to temporarily store Number3Ds.
*/
private static var temp : Number3D;public static var toDEGREES : Number;public static var toRADIANS : Number;/**
* Modulo
*/
public function get modulo () : Number;public function get moduloSquared () : Number;/**
* Returns a Number3D object with x, y and z properties set to zero.	*	* @return A Number3D object.
*/
public static function get ZERO () : Number3D;/**
* Creates a new Number3D object whose three-dimensional values are specified by the x, y and z parameters. If you call this constructor function without parameters, a Number3D with x, y and z properties set to zero is created.	*	* @param	x	The horizontal coordinate value. The default value is zero.	* @param	y	The vertical coordinate value. The default value is zero.	* @param	z	The depth coordinate value. The default value is zero.
*/
public function Number3D (x:Number = 0, y:Number = 0, z:Number = 0);/**
* Returns a new Number3D object that is a clone of the original instance with the same three-dimensional values.	*	* @return	A new Number3D instance with the same three-dimensional values as the original Number3D instance.
*/
public function clone () : Number3D;/**
* Copies the values of this Number3d to the passed Number3d.	 *
*/
public function copyTo (n:Number3D) : void;/**
* Copies the values of this Number3d to the passed Number3d.	 *
*/
public function copyFrom (n:Number3D) : void;/**
* Quick way to set the properties of the Number3D	 *
*/
public function reset (newx:Number = 0, newy:Number = 0, newz:Number = 0) : void;/**
* Add
*/
public static function add (v:Number3D, w:Number3D) : Number3D;/**
* Subtract.
*/
public static function sub (v:Number3D, w:Number3D) : Number3D;/**
* Dot product.
*/
public static function dot (v:Number3D, w:Number3D) : Number;/**
* Cross product. Now optionally takes a target Number3D to put the change into. So we're not constantly making new number3Ds. 	 * Maybe make a crossEq function?
*/
public static function cross (v:Number3D, w:Number3D, targetN:Number3D = null) : Number3D;/**
* Normalize.
*/
public function normalize () : void;/**
* Multiplies the vector by a number. The same as the *= operator
*/
public function multiplyEq (n:Number) : void;/**
* Adds the vector passed to this vector. The same as the += operator.
*/
public function plusEq (v:Number3D) : void;/**
* Subtracts the vector passed to this vector. The same as the -= operator.
*/
public function minusEq (v:Number3D) : void;/**
* Super fast modulo(length, magnitude) comparisons.	 * 	 *
*/
public function isModuloLessThan (v:Number) : Boolean;public function isModuloGreaterThan (v:Number) : Boolean;public function isModuloEqualTo (v:Number) : Boolean;/**
* Returns a string value representing the three-dimensional values in the specified Number3D object.	*	* @return	A string.
*/
public function toString () : String;/**
* 	 * 	 *
*/
public function rotateX (angle:Number) : void;public function rotateY (angle:Number) : void;public function rotateZ (angle:Number) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\NumberUV.as
package org.papervision3d.core.math{/**
* The NumberUV class represents a value in a texture UV coordinate system.
*
* Properties u and v represent the horizontal and vertical texture axes respectively.
*
*/
public class NumberUV{/**
* The horizontal coordinate value.
*/
public var u : Number;/**
* The vertical coordinate value.
*/
public var v : Number;/**
* Returns a NumberUV object with u and v properties set to zero.
	*
	* @return A NumberUV object.
*/
public static function get ZERO () : NumberUV;/**
* Creates a new NumberUV object whose coordinate values are specified by the u and v parameters. If you call this constructor function without parameters, a NumberUV with u and v properties set to zero is created.
	*
	* @param	u	The horizontal coordinate value. The default value is zero.
	* @param	v	The vertical coordinate value. The default value is zero.
*/
public function NumberUV (u:Number = 0, v:Number = 0);/**
* Returns a new NumberUV object that is a clone of the original instance with the same UV values.
	*
	* @return	A new NumberUV instance with the same UV values as the original NumberUV instance.
*/
public function clone () : NumberUV;/**
* Returns a string value representing the UV values in the specified NumberUV object.
	*
	* @return	A string.
*/
public function toString () : String;public static function weighted (a:NumberUV, b:NumberUV, aw:Number, bw:Number) : NumberUV;public static function median (a:NumberUV, b:NumberUV) : NumberUV;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\Plane3D.as
package org.papervision3d.core.math{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.util.ClassificationUtil;/**
* The Plane3D class represents a plane in 3D space.
	* 
	* @author Tim Knip
*/
public class Plane3D{private static var _yUP : Number3D;private static var _zUP : Number3D;/**
* The plane normal (A, B, C).
*/
public var normal : Number3D;/**
* D.
*/
public var d : Number;internal var eps : Number;protected static var flipPlane : Plane3D;/**
* Constructor.
		 *
		 * @param	normal		The plane normal.
		 * @param	ptOnPlane	A point on the plane.
*/
public function Plane3D (normal:Number3D = null, ptOnPlane:Number3D = null);/**
*
*/
public function clone () : Plane3D;public function isCoplanar (plane:Plane3D) : Boolean;public function isCoplanarOpposite (plane:Plane3D) : Boolean;public function getFlip () : Plane3D;public function getTempFlip () : Plane3D;public function getIntersectionLineNumbers (v0:Number3D, v1:Number3D) : Number3D;public function getIntersectionLine (v0:Vertex3D, v1:Vertex3D) : Vertex3D;/**
* Creates a plane from coefficients.
		 *
		 * @param	a
		 * @param	b
		 * @param	c
		 * @param	d
		 *
		 * @return	The created plane.
*/
public static function fromCoefficients (a:Number, b:Number, c:Number, d:Number) : Plane3D;/**
* Creates a plane from a normal and a point.
		 *
		 * @param	normal
		 * @param	point
		 *
		 * @return	The created plane.
*/
public static function fromNormalAndPoint (normal:*, point:*) : Plane3D;/**
* Creates a plane from three points.
		 *
		 * @param	p0	First point.
		 * @param	p1	Second point.
		 * @param	p2	Third point.
		 *
		 * @return	The created plane.
*/
public static function fromThreePoints (p0:*, p1:*, p2:*) : Plane3D;/**
* Get the closest point on the plane.
		 *
		 * @param	point		The point to 'project'.
		 * @param 	ptOnPlane	A known point on the plane.
*/
public function closestPointOnPlane (point:Number3D, ptOnPlane:Number3D) : Number3D;/**
* distance of point to plane.
		 * 
		 * @param	v
		 * @return
*/
public function distance (pt:*) : Number;/**
* distance of vertex to plane, optimized.
		 * 
		 * @param	v
		 * @return
*/
public function vertDistance (pt:Vertex3D) : Number;/**
* normalize.
		 * 
		 * @return
*/
public function normalize () : void;/**
* Sets this plane from ABCD coefficients.
		 *
		 * @param	a
		 * @param	b
		 * @param	c
		 * @param	d
*/
public function setCoefficients (a:Number, b:Number, c:Number, d:Number) : void;/**
* Sets this plane from a normal and a point.
		 *
		 * @param	normal
		 * @param	pt
*/
public function setNormalAndPoint (normal:Number3D, pt:Number3D) : void;/**
* Sets this plane from three points.
		 *
		 * @param	p0
		 * @param	p1
		 * @param	p2
*/
public function setThreePoints (p0:Number3D, p1:Number3D, p2:Number3D) : void;/**
* Gets the side a vertex is on.
*/
public function pointOnSide (num:Number3D) : int;/**
* Projects points onto this plane. 
		 * <p>Passed points should be in the XY-plane. If the points have Z=0 then the points are
		 * projected exactly on the plane. When however Z is greater then zero, the points are
		 * moved 'out of the plane' by a distance Z. Negative values for Z move the points 'into the plane'.</p>
		 *
		 * @param	points	Array of points (any object with x, y, z props).
		 * @param	origin	Where to move the points.
*/
public function projectPoints (points:Array, origin:Number3D = null) : void;public function toString () : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\Quaternion.as
package org.papervision3d.core.math{/**
* @author Tim Knip
*/
public class Quaternion{private var _matrix : Matrix3D;public static const EPSILON : Number;public static const DEGTORAD : Number;public static const RADTODEG : Number;/**

*/
public var x : Number;/**

*/
public var y : Number;/**

*/
public var z : Number;/**

*/
public var w : Number;/**
* Modulo.		 * 		 * @param	a		 * @return
*/
public function get modulo () : Number;/**
* Gets the matrix representation of this Quaternion.		 * 		 * @return matrix. @see org.papervision3d.core.Matrix3D
*/
public function get matrix () : Matrix3D;/**
* constructor.		 * 		 * @param	x		 * @param	y		 * @param	z		 * @param	w		 * @return
*/
public function Quaternion (x:Number = 0, y:Number = 0, z:Number = 0, w:Number = 1);/**
* Clone.		 *
*/
public function clone () : Quaternion;/**
* Multiply.		 * 		 * @param	a		 * @param	b
*/
public function calculateMultiply (a:Quaternion, b:Quaternion) : void;/**
* Creates a Quaternion from a axis and a angle.		 * 		 * @param	x 	X-axis		 * @param	y 	Y-axis		 * @param	z 	Z-axis		 * @param	angle	angle in radians.		 * 		 * @return
*/
public function setFromAxisAngle (x:Number, y:Number, z:Number, angle:Number) : void;/**
* Sets this Quaternion from Euler angles.		 * 		 * @param	ax	X-angle in radians.		 * @param	ay	Y-angle in radians.		 * @param	az	Z-angle in radians.
*/
public function setFromEuler (ax:Number, ay:Number, az:Number, useDegrees:Boolean = false) : void;/**
* Conjugate.		 * 		 * @param	a		 * @return
*/
public static function conjugate (a:Quaternion) : Quaternion;/**
* Creates a Quaternion from a axis and a angle.		 * 		 * @param	x 	X-axis		 * @param	y 	Y-axis		 * @param	z 	Z-axis		 * @param	angle	angle in radians.		 * 		 * @return
*/
public static function createFromAxisAngle (x:Number, y:Number, z:Number, angle:Number) : Quaternion;/**
* Creates a Quaternion from Euler angles.		 * 		 * @param	ax	X-angle in radians.		 * @param	ay	Y-angle in radians.		 * @param	az	Z-angle in radians.		 * 		 * @return
*/
public static function createFromEuler (ax:Number, ay:Number, az:Number, useDegrees:Boolean = false) : Quaternion;/**
* Creates a Quaternion from a matrix.		 * 		 * @param	matrix	a matrix. @see org.papervision3d.core.Matrix3D		 * 		 * @return	the created Quaternion
*/
public static function createFromMatrix (matrix:Matrix3D) : Quaternion;/**
* Creates a Quaternion from a orthonormal matrix.		 * 		 * @param	m	a orthonormal matrix. @see org.papervision3d.core.Matrix3D		 * 		 * @return  the created Quaternion
*/
public static function createFromOrthoMatrix (m:Matrix3D) : Quaternion;/**
* Dot product.		 * 		 * @param	a		 * @param	b		 * 		 * @return
*/
public static function dot (a:Quaternion, b:Quaternion) : Number;/**
* Multiply.		 * 		 * @param	a		 * @param	b		 * @return
*/
public static function multiply (a:Quaternion, b:Quaternion) : Quaternion;/**
* Multiply by another Quaternion.		 * 		 * @param	b	The Quaternion to multiply by.
*/
public function mult (b:Quaternion) : void;public function toString () : String;/**
* Normalize.		 * 		 * @param	a		 * 		 * @return
*/
public function normalize () : void;/**
* SLERP (Spherical Linear intERPolation). @author Trevor Burton		 * 		 * @param	qa		start quaternion		 * @param	qb		end quaternion		 * @param	alpha	a value between 0 and 1		 * 		 * @return the interpolated quaternion.
*/
public static function slerp (qa:Quaternion, qb:Quaternion, alpha:Number) : Quaternion;/**
* SLERP (Spherical Linear intERPolation).		 * 		 * @param	qa		start quaternion		 * @param	qb		end quaternion		 * @param	alpha	a value between 0 and 1		 * 		 * @return the interpolated quaternion.
*/
public static function slerpOld (qa:Quaternion, qb:Quaternion, alpha:Number) : Quaternion;public function toEuler () : Number3D;public static function sub (a:Quaternion, b:Quaternion) : Quaternion;public static function add (a:Quaternion, b:Quaternion) : Quaternion;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\Ray3D.as
package org.papervision3d.core.math{import org.papervision3d.core.math.Number3D;public class Ray3D{public var x : Number;public var y : Number;public var z : Number;public var dx : Number;public var dy : Number;public var dz : Number;public function get o () : Number3D;public function get d () : Number3D;public function Ray3D (x:Number = 0, y:Number = 0, z:Number = 0, dx:Number = 0, dy:Number = 0, dz:Number = 0);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\Sphere3D.as
package org.papervision3d.core.math{import org.papervision3d.core.math.Number3D;public class Sphere3D{public var x : Number;public var y : Number;public var z : Number;public var radius : Number;public function get o () : Number3D;public function get r2 () : Number;public function Sphere3D (r:Number = 100, x:Number = 0, y:Number = 0, z:Number = 0);public function intersectRay (ray:Ray3D) : Number;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\util\ClassificationUtil.as
package org.papervision3d.core.math.util{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.Plane3D;public class ClassificationUtil{public static const FRONT : uint;public static const BACK : uint;public static const COINCIDING : uint;public static const STRADDLE : uint;protected static var point : Vertex3D;public function ClassificationUtil ();public static function classifyPoint (point:Vertex3D, plane:Plane3D, e:Number = 0.01) : uint;public static function classifyPoints (points:Array, plane:Plane3D, e:Number = 0.01) : uint;public static function classifyTriangle (triangle:Triangle3D, plane:Plane3D, e:Number = 0.01) : uint;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\util\FastRectangleTools.as
package org.papervision3d.core.math.util{import flash.geom.Rectangle;import org.papervision3d.core.math.Number2D;import org.papervision3d.core.math.Number3D;/**
* @author Seb Lee-Delisle	 * 	 * Some handy rectangle tools that are faster than the built in Rectangle methods. 	 *
*/
public class FastRectangleTools{/**
* 		 * in my tests runs 1/3 faster the Rectangle.intersects		 * Rectangle.intersects() Test: 71.4499		 * Fast intersect Test: 54.199		 * 		 * @Author Seb Lee-Delisle		 * 		 * @param	rect1 		 * @param	rect2  		 * @return  true if the rectangles intersect.
*/
public static function intersects (rect1:Rectangle, rect2:Rectangle) : Boolean;/**
* 		 * benchmarks compared to Rectangle.intersection : 		 * Rectangle.intersects() Test			: 146.89999999999998		 * this function (without targetrect)  	: 133.45		 * this function (with targetrect)  	    : 72.55 		 * @Author Seb Lee-Delisle		 * 		 * @param	rect1 		 * @param	rect2  		 * @param	targetrect  		 * @return  a rectangle representing the intersection of the two source rectangles.
*/
public static function intersection (rect1:Rectangle, rect2:Rectangle, targetrect:Rectangle = null) : Rectangle;/**
* 		 * Returns a rectangle defining the bounds of a rotated rectangle. 		 * @Author Seb Lee-Delisle		 * 		 * @param	rect 		 * @param	angle		 * @param	targetrect  		 * @return  a rectangle representing the bounds of the source rectangle, rotated at the angle given.
*/
public static function getRotatedBounds (rect:Rectangle, angle:Number, targetrect:Rectangle = null) : Rectangle;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\util\GLU.as
package org.papervision3d.core.math.util{public class GLU{public static function makeIdentity (m:Array) : void;public static function multMatrices (a:Array, b:Array, r:Array) : void;public static function multMatrixVec (matrix:Array, a:Array, out:Array) : void;public static function invertMatrix (src:Array, inverse:Array) : Boolean;public static function ortho (m:Array, left:Number, right:Number, top:Number, bottom:Number, zNear:Number, zFar:Number) : Boolean;public static function perspective (m:Array, fovy:Number, aspect:Number, zNear:Number, zFar:Number) : Boolean;public static function scale (m:Array, sx:Number, sy:Number, sz:Number) : void;public static function unProject (winx:Number, winy:Number, winz:Number, modelMatrix:Array, projMatrix:Array, viewport:Array, out:Array) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\util\InterpolationUtil.as
package org.papervision3d.core.math.util{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;public class InterpolationUtil{public static function interpolatePoint (a:Vertex3D, b:Vertex3D, alpha:Number) : Vertex3D;public static function interpolatePointTo (a:Vertex3D, b:Vertex3D, alpha:Number, dst:Vertex3D) : void;public static function interpolateUV (a:NumberUV, b:NumberUV, alpha:Number) : NumberUV;public static function interpolateUVTo (a:NumberUV, b:NumberUV, alpha:Number, dst:NumberUV) : NumberUV;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\util\Intersection.as
package org.papervision3d.core.math.util{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.Plane3D;public class Intersection{public static const NONE : int;public static const INTERSECTION : int;public static const PARALLEL : int;public var point : Number3D;public var vert : Vertex3D;public var alpha : Number;public var status : int;public function Intersection (point:Number3D = null, vert:Vertex3D = null);public static function linePlane (pA:Vertex3D, pB:Vertex3D, plane:Plane3D, e:Number = 0.01, dst:Intersection = null) : Intersection;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\util\TriangleUtil.as
package org.papervision3d.core.math.util{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.math.Plane3D;public class TriangleUtil{/**
* Clips a triangle to a plane.
		 * 
		 * @param	tri		Triangle to be clipped.
		 * @param	plane	Plane to clip to.
		 * @param	e	Epsilon
*/
public static function clipTriangleWithPlane (tri:Triangle3D, plane:Plane3D, e:Number = 0.01) : Array;public static function clipTriangleWithPlaneTris (tri:Triangle3D, plane:Plane3D, e:Number = 0.01, t1:Triangle3D = null, t2:Triangle3D = null, depth:Number = 0) : Array;public static function clipSplitTriangleWithPlane (triangle:Triangle3D, plane:Plane3D, e:Number = 0.01) : Array;public static function splitTriangleWithPlane (triangle:Triangle3D, plane:Plane3D, e:Number = 0.01) : Array;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\ns\pv3dview.as
package org.papervision3d.core.ns{}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\proto\CameraObject3D.as
package org.papervision3d.core.proto{import flash.geom.Rectangle;import org.papervision3d.Papervision3D;import org.papervision3d.core.culling.IObjectCuller;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.util.GLU;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;/**
* The CameraObject3D class is the base class for all the cameras that can be placed in a scene.	* <p/>	* A camera defines the view from which a scene will be rendered. Different camera settings would present a scene from different points of view.	* <p/>	* 3D cameras simulate still-image, motion picture, or video cameras of the real world. When rendering, the scene is drawn as if you were looking through the camera lens.
*/
public class CameraObject3D extends DisplayObject3D{/**
* This value specifies the scale at which the 3D objects are rendered. Higher values magnify the scene, compressing distance. Use it in conjunction with focus.
*/
public var zoom : Number;/**
* This value is a positive number representing the distance of the observer from the front clipping plane, which is the closest any object can be to the camera. Use it in conjunction with zoom.		* <p/>		* Higher focus values tend to magnify distance between objects while allowing greater depth of field, as if the camera had a wider lenses. One result of using a wide angle lens in proximity to the subject is an apparent perspective distortion: parallel lines may appear to converge and with a fisheye lens, straight edges will appear to bend.		* <p/>		* Different lenses generally require a different camera to subject distance to preserve the size of a subject. Changing the angle of view can indirectly distort perspective, modifying the apparent relative size of the subject and foreground.
*/
public var focus : Number;/**
* A Boolean value that determines whether the 3D objects are z-depth sorted between themselves when rendering.
*/
public var sort : Boolean;/**
*
*/
public var eye : Matrix3D;/**
*
*/
public var viewport : Rectangle;/**
*
*/
public var culler : IObjectCuller;/**
*
*/
public var yUP : Boolean;/**
* The default position for new cameras.
*/
public static var DEFAULT_POS : Number3D;/**
* The default UP vector for new cameras.
*/
public static var DEFAULT_UP : Number3D;/**
* The default viewport for new cameras.
*/
public static var DEFAULT_VIEWPORT : Rectangle;private static var _flipY : Matrix3D;protected var _useCulling : Boolean;protected var _useProjectionMatrix : Boolean;protected var _ortho : Boolean;protected var _orthoScale : Number;protected var _orthoScaleMatrix : Matrix3D;protected var _target : DisplayObject3D;protected var _far : Number;/**
* Sets the vertical Field Of View in degrees.		 * 		 * @param	degrees
*/
public function set fov (degrees:Number) : Void;/**
* Gets the vertical Field Of View in degrees.
*/
public function get fov () : Number;/**
* Gets the distance to the far plane.
*/
public function get far () : Number;/**
* Sets the distance to the far plane.		 * 		 * @param	value
*/
public function set far (value:Number) : Void;/**
* Gets the distance to the near plane (note that this simply is an alias for #focus).
*/
public function get near () : Number;/**
* Sets the distance to the near plane (note that this is simply an alias for #focus).		 * 		 * @param	value
*/
public function set near (value:Number) : Void;/**
* Gets the target for this camera, if any.		 * 		 * @return DisplayObject3D
*/
public function get target () : DisplayObject3D;/**
* Sets the target for this camera.		 * 		 * @param	object	A DisplayObject3D
*/
public function set target (object:DisplayObject3D) : Void;/**
* Whether this camera uses culling.		 * 		 * @return Boolean
*/
public function get useCulling () : Boolean;/**
* Whether this camera uses culling.
*/
public function set useCulling (value:Boolean) : Void;/**
* Whether this camera uses a projection matrix.		 * 		 * @return Boolean
*/
public function get useProjectionMatrix () : Boolean;/**
* Whether this camera uses a projection matrix.
*/
public function set useProjectionMatrix (value:Boolean) : Void;/**
* Whether the camera uses orthographic projection.
*/
public function get ortho () : Boolean;/**
* Whether the camera uses orthographic projection.
*/
public function set ortho (value:Boolean) : Void;/**
* The scale of projection when in orthographic mode.
*/
public function get orthoScale () : Number;/**
* The scale of projection when in orthographic mode.
*/
public function set orthoScale (value:Number) : Void;/**
* The CameraObject3D constructor lets you create cameras for setting up the view from which a scene will be rendered.		*		* @param	focus		This value is a positive number representing the distance of the observer from the front clipping plane, which is the closest any object can be to the camera. Use it in conjunction with zoom.		* <p/>		* @param	zoom		This value specifies the scale at which the 3D objects are rendered. Higher values magnify the scene, compressing distance. Use it in conjunction with focus.		* <p/>
*/
public function CameraObject3D (focus:Number = 500, zoom:Number = 3);/**
* Lookat.		 * 		 * @param targetObject		 * @param upAxis
*/
public function lookAt (targetObject:DisplayObject3D, upAxis:Number3D = null) : void;/**
* Orbits the camera around the specified target. If no target is specified the 		 * camera's #target property is used. If this camera's #target property equals null		 * the camera orbits the origin (0, 0, 0).		 * 		 * @param	pitch	Rotation around X=axis (looking up or down).		 * @param	yaw		Rotation around Y-axis (looking left or right).		 * @param	useDegrees 	Whether to use degrees for pitch and yaw (defaults to 'true').		 * @param	target	An optional target to orbit around.
*/
public function orbit (pitch:Number, yaw:Number, useDegrees:Boolean = true, target:DisplayObject3D = null) : void;/**
* Projects vertices.		 * 		 * @param	object		 * @param	renderSessionData
*/
public function projectVertices (vertices:Array, object:DisplayObject3D, renderSessionData:RenderSessionData) : Number;public function projectFaces (faces:Array, object:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* [internal-use] Transforms world coordinates into camera space.
*/
public function transformView (transform:Matrix3D = null) : void;/**
* Rotate the camera in its vertical plane.		* <p/>		* Tilting the camera results in a motion similar to someone nodding their head "yes".		*		* @param	angle	Angle to tilt the camera.
*/
public function tilt (angle:Number) : void;/**
* Rotate the camera in its horizontal plane.		* <p/>		* Panning the camera results in a motion similar to someone shaking their head "no".		*		* @param	angle	Angle to pan the camera.
*/
public function pan (angle:Number) : void;/**
* Unproject.		 * 		 * @param	mX		 * @param	mY
*/
public function unproject (mX:Number, mY:Number, mZ:Number = 0) : Number3D;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\proto\DisplayObjectContainer3D.as
package org.papervision3d.core.proto{import flash.events.EventDispatcher;import flash.utils.Dictionary;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.objects.DisplayObject3D;/**
* The DisplayObjectContainer3D class is the base class for all objects that can serve as DisplayObject3D containers.	* <p/>	* Each DisplayObjectContainer3D object has its own child list.
*/
public class DisplayObjectContainer3D extends EventDispatcher{/**
* [read-only] [read-only] The scene, which is the top-most displayObjectContainer3D in the tree structure.
*/
public var root : DisplayObjectContainer3D;/**
* [internal-use] Names indexed by children.
*/
protected var _children : Dictionary;/**
* [internal-use] Children indexed by name.
*/
protected var _childrenByName : Object;private var _childrenTotal : int;/**
* Returns the number of children of this object.
*/
public function get numChildren () : int;/**
* Returns the children object.
*/
public function get children () : Object;/**
* Creates a new DisplayObjectContainer3D object.
*/
public function DisplayObjectContainer3D ();/**
* Adds a child DisplayObject3D instance to this DisplayObjectContainer instance.		*		* [TODO: If you add a child object that already has a different display object container as a parent, the object is removed from the child list of the other display object container.]		*		* @param	child	The DisplayObject3D instance to add as a child of this DisplayObjectContainer3D instance.		* @param	name	An optional name of the child to add or create. If no name is provided, the child name will be used.		* @return	The DisplayObject3D instance that you have added or created.
*/
public function addChild (child:DisplayObject3D, name:String = null) : DisplayObject3D;/**
* Adds all the children of a DisplayObject3D instance to this DisplayObjectContainer instance.		*		* @param	child	The DisplayObjectContainer3D instance that contains the children to add.		* @return	The DisplayObject3D instance that you have added or created.
*/
public function addChildren (parent:DisplayObject3D) : DisplayObjectContainer3D;/**
* @public		* Added from Bug #10 by John Grden 8/22/2007
*/
public function removeChild (child:DisplayObject3D) : DisplayObject3D;/**
* Returns the child display object that exists with the specified name.		* </p>		* If more that one child display object has the specified name, the method returns the first object in the child list.		* </p>		* @param	name	The name of the child to return.* 		* @return	The child display object with the specified name.
*/
public function getChildByName (name:String, recursive:Boolean = false) : DisplayObject3D;/**
* Removes the child DisplayObject3D instance that exists with the specified name, from the child list of the DisplayObjectContainer3D instance.		* </p>		* If more that one child display object has the specified name, the method removes the first object in the child list.		* </p>		* [TODO: The parent property of the removed child is set to null, and the object is garbage collected if no other references to the child exist.]		* </p>		* The garbage collector is the process by which Flash Player reallocates unused memory space. When a variable or object is no longer actively referenced or stored somewhere, the garbage collector sweeps through and wipes out the memory space it used to occupy if no other references to it exist.		* </p>		* @param	name	The name of the child to remove.		* @return	The DisplayObject3D instance that was removed.
*/
public function removeChildByName (name:String) : DisplayObject3D;/**
* Returns a string value with the list of objects.		*		* @return	A string.
*/
public function toString () : String;/**
* Returns a string value with the list of objects.		*		* @return	A string.
*/
public function childrenList () : String;/**
* Recursively finds a child by its name.		 * 		 * @param	name		 * @param	parent		 * 		 * @return 	The found child.
*/
private function findChildByName (name:String, parent:DisplayObject3D = null) : DisplayObject3D;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\proto\GeometryObject3D.as
package org.papervision3d.core.proto{import flash.events.EventDispatcher;import flash.utils.Dictionary;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.AxisAlignedBoundingBox;import org.papervision3d.core.math.BoundingSphere;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.objects.DisplayObject3D;/**
* The GeometryObject3D class contains the mesh definition of an object.
*/
public class GeometryObject3D extends EventDispatcher{protected var _boundingSphere : BoundingSphere;protected var _boundingSphereDirty : Boolean;protected var _aabb : AxisAlignedBoundingBox;protected var _aabbDirty : Boolean;private var _numInstances : uint;/**
*
*/
public var dirty : Boolean;/**
* An array of Face3D objects for the faces of the mesh.
*/
public var faces : Array;/**
* An array of vertices.
*/
public var vertices : Array;public var _ready : Boolean;public function set ready (b:Boolean) : Void;public function get ready () : Boolean;/**
* Radius square of the mesh bounding sphere
*/
public function get boundingSphere () : BoundingSphere;/**
* Returns an axis aligned bounding box, not world oriented.		 * 		 * @Author Ralph Hauwert - Added as an initial test.
*/
public function get aabb () : AxisAlignedBoundingBox;public function GeometryObject3D ();public function transformVertices (transformation:Matrix3D) : void;private function createVertexNormals () : void;/**
* Clones this object.		 * 		 * @param	parent		 * 		 * @return	The cloned GeometryObject3D.
*/
public function clone (parent:DisplayObject3D = null) : GeometryObject3D;/**
* Flips the winding of faces.
*/
public function flipFaces () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\proto\LightObject3D.as
package org.papervision3d.core.proto{import org.papervision3d.core.math.Matrix3D;import org.papervision3d.materials.WireframeMaterial;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.objects.primitives.Sphere;public class LightObject3D extends DisplayObject3D{public var lightMatrix : Matrix3D;/**
* A boolean value indicating whether to flip the light direction. Hack needed by DAE. 
		 * NOTE:
*/
public var flipped : Boolean;private var _showLight : Boolean;private var displaySphere : Sphere;public function set showLight (show:Boolean) : Void;public function get showLight () : Boolean;public function LightObject3D (showLight:Boolean = false, flipped:Boolean = false);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\proto\MaterialObject3D.as
package org.papervision3d.core.proto{import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.core.render.material.MaterialManager;import org.papervision3d.materials.WireframeMaterial;import org.papervision3d.objects.DisplayObject3D;import flash.display.BitmapData;import flash.display.Graphics;import flash.events.EventDispatcher;import flash.geom.Matrix;import flash.utils.Dictionary;/**
* The MaterialObject3D class is the base class for all materials.	* <p/>	* Materials collects data about how objects appear when rendered.	* <p/>	* A material is data that you assign to objects or faces, so that they appear a certain way when rendered. Materials affect the line and fill colors.	* <p/>	* Materials create greater realism in a scene. A material describes how an object reflects or transmits light.	* <p/>	* You assign materials to individual objects or a selection of faces; a single object can contain different materials.	* <p/>	* MaterialObject3D is an abstract base class; therefore, you cannot call MaterialObject3D directly.
*/
public class MaterialObject3D extends EventDispatcher implements ITriangleDrawer{private static var _totalMaterialObjects : Number;/**
* A transparent or opaque BitmapData texture.
*/
public var bitmap : BitmapData;/**
* A Boolean value that determines whether the BitmapData texture is smoothed when rendered.
*/
public var smooth : Boolean;/**
* A Boolean value that determines whether the texture is tiled when rendered. Defaults to false.
*/
public var tiled : Boolean;/**
* A Boolean value that determines whether the texture is cached, i.e. not updated before being rendered. Defaults to false.
*/
public var baked : Boolean;/**
* A RGB color value to draw the faces outline.
*/
public var lineColor : Number;/**
* An 8-bit alpha value for the faces outline. If zero, no outline is drawn.
*/
public var lineAlpha : Number;/**
* An value for the thickness of the faces line.
*/
public var lineThickness : Number;/**
* A RGB color value to fill the faces with. Only used if no texture is provided.
*/
public var fillColor : Number;/**
* An 8-bit alpha value fill the faces with. If this value is zero and no texture is provided or is undefined, a fill is not created.
*/
public var fillAlpha : Number;/**
* A Boolean value that indicates whether the faces are single sided. It has preference over doubleSided.
*/
public var oneSide : Boolean;/**
* A Boolean value that indicates whether the faces are invisible (not drawn).
*/
public var invisible : Boolean;/**
* A Boolean value that indicates whether the face is flipped. Only used if doubleSided or not singeSided.
*/
public var opposite : Boolean;/**
* Color used for DEFAULT material.
*/
public static var DEFAULT_COLOR : int;/**
* Color used for DEBUG material.
*/
public static var DEBUG_COLOR : int;/**
* The name of the material.
*/
public var name : String;/**
* [internal-use] [read-only] Unique id of this instance.
*/
public var id : Number;/**
* Internal use
*/
public var maxU : Number;/**
* Internal use
*/
public var maxV : Number;/**
* Holds the original size of the bitmap before it was resized by Automip mapping
*/
public var widthOffset : Number;/**
* Holds the original size of the bitmap before it was resized by Automip mapping
*/
public var heightOffset : Number;/**
* Defines if this material will be interactive
*/
public var interactive : Boolean;/**
* Inventory of registered objects
*/
protected var objects : Dictionary;/**
* Returns a MaterialObject3D object with the default magenta wireframe values.		*		* @return A MaterialObject3D object.
*/
public static function get DEFAULT () : MaterialObject3D;public static function get DEBUG () : MaterialObject3D;/**
* A Boolean value that indicates whether the faces are double sided.
*/
public function get doubleSided () : Boolean;public function set doubleSided (double:Boolean) : Void;/**
* Creates a new MaterialObject3D object.		*
*/
public function MaterialObject3D ();/**
* Draws the triangle to screen.
*/
public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;public function drawRT (rt:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData) : void;/**
* Updates the BitmapData bitmap from the given texture.		*		* Draws the current MovieClip image onto bitmap.
*/
public function updateBitmap () : void;/**
* Copies the properties of a material.		*		* @param	material	Material to copy from.
*/
public function copy (material:MaterialObject3D) : void;/**
* Creates a copy of the material.		*		* @return	A newly created material that contains the same properties.
*/
public function clone () : MaterialObject3D;/**
* Registers the <code>DisplayObject3D</code>
*/
public function registerObject (displayObject3D:DisplayObject3D) : void;public function unregisterObject (displayObject3D:DisplayObject3D) : void;public function destroy () : void;/**
* Returns a string value representing the material properties.		*		* @return	A string.
*/
public function toString () : String;/**
* Returns a list of <code>DisplayObject3D</code> objects registered with the material.
*/
public function getObjectList () : Dictionary;public function isUpdateable () : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\proto\SceneObject3D.as
package org.papervision3d.core.proto{import org.papervision3d.Papervision3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.materials.utils.MaterialsList;import org.papervision3d.objects.DisplayObject3D;/**
* The SceneObject3D class is the base class for all scenes.	* <p/>	* A scene is the place where objects are placed, it contains the 3D environment.	* <p/>	* The scene manages all objects rendered in Papervision3D. It extends the DisplayObjectContainer3D class to arrange the display objects.	* <p/>	* SceneObject3D is an abstract base class; therefore, you cannot call SceneObject3D directly.
*/
public class SceneObject3D extends DisplayObjectContainer3D{/**
* Contains a list of DisplayObject3D objects in the scene.
*/
public var objects : Array;/**
* It contains a list of materials in the scene.
*/
public var materials : MaterialsList;/**
* The SceneObject3D class lets you create scene classes.		*		* @param	container	The Sprite that you draw into when rendering. If not defined, each object must have it's own private container.
*/
public function SceneObject3D ();/**
* Adds a child DisplayObject3D instance to the scene.		*		* If you add a GeometryObject3D symbol, a new DisplayObject3D instance is created.		*		* [TODO: If you add a child object that already has a different display object container as a parent, the object is removed from the child list of the other display object container.]		*		* @param	child	The GeometryObject3D symbol or DisplayObject3D instance to add as a child of the scene.		* @param	name	An optional name of the child to add or create. If no name is provided, the child name will be used.		* @return	The DisplayObject3D instance that you have added or created.
*/
public function addChild (child:DisplayObject3D, name:String = null) : DisplayObject3D;/**
* Removes the specified child DisplayObject3D instance from the child and object list of the scene.		* </p>		* [TODO: The parent property of the removed child is set to null, and the object is garbage collected if no other references to the child exist.]		* </p>		* The garbage collector is the process by which Flash Player reallocates unused memory space. When a variable or object is no longer actively referenced or stored somewhere, the garbage collector sweeps through and wipes out the memory space it used to occupy if no other references to it exist.		* </p>		* @param	child	The DisplayObject3D instance to remove.		* @return	The DisplayObject3D instance that you pass in the child parameter.
*/
public function removeChild (child:DisplayObject3D) : DisplayObject3D;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\AbstractRenderEngine.as
package org.papervision3d.core.render{import flash.events.EventDispatcher;import flash.events.IEventDispatcher;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.proto.SceneObject3D;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.RenderStatistics;import org.papervision3d.view.Viewport3D;public class AbstractRenderEngine extends EventDispatcher implements IRenderEngine{public function AbstractRenderEngine (target:IEventDispatcher = null);public function renderScene (scene:SceneObject3D, camera:CameraObject3D, viewPort:Viewport3D) : RenderStatistics;public function addToRenderList (renderCommand:RenderableListItem) : int;public function removeFromRenderList (renderCommand:IRenderListItem) : int;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\IRenderEngine.as
package org.papervision3d.core.render{import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.proto.SceneObject3D;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.RenderStatistics;import org.papervision3d.view.Viewport3D;/**
* @Author Ralph Hauwert
*/
public interface IRenderEngine{public function renderScene (scene:SceneObject3D, camera:CameraObject3D, viewPort:Viewport3D) : RenderStatistics;public function addToRenderList (renderCommand:RenderableListItem) : int;public function removeFromRenderList (renderCommand:IRenderListItem) : int;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\AbstractRenderListItem.as
package org.papervision3d.core.render.command{import flash.display.Graphics;import org.papervision3d.core.render.data.RenderSessionData;/**
* @Author Ralph Hauwert
*/
public class AbstractRenderListItem implements IRenderListItem{public var screenZ : Number;public function AbstractRenderListItem ();public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\IRenderListItem.as
package org.papervision3d.core.render.command{import flash.display.Graphics;import org.papervision3d.core.render.data.RenderSessionData;/**
* @Author Ralph Hauwert
*/
public interface IRenderListItem{public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\RenderableListItem.as
package org.papervision3d.core.render.command{import flash.geom.Point;import org.papervision3d.core.geom.renderables.AbstractRenderable;import org.papervision3d.core.render.data.QuadTreeNode;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.objects.DisplayObject3D;/**
* @Author Ralph Hauwert
*/
public class RenderableListItem extends AbstractRenderListItem{public var renderable : Class;public var renderableInstance : AbstractRenderable;public var instance : DisplayObject3D;public var area : Number;public var minX : Number;/**
* Indicates the maximum x value of the drawing primitive.
*/
public var maxX : Number;/**
* Indicates the minimum y value of the drawing primitive.
*/
public var minY : Number;/**
* Indicates the maximum y value of the drawing primitive.
*/
public var maxY : Number;public var minZ : Number;public var maxZ : Number;/**
* Reference to the last quadrant used by the drawing primitive. Used in <code>QuadTree</code>
*/
public var quadrant : QuadTreeNode;public function getZ (x:Number, y:Number, focus:Number) : Number;public function RenderableListItem ();public function hitTestPoint2D (point:Point, renderHitData:RenderHitData) : RenderHitData;public function update () : void;public function quarter (focus:Number) : Array;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\RenderFog.as
package org.papervision3d.core.render.command{import org.papervision3d.core.geom.renderables.AbstractRenderable;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.special.FogMaterial;import org.papervision3d.objects.DisplayObject3D;import flash.display.Graphics;public class RenderFog extends RenderableListItem{public var alpha : Number;public var material : FogMaterial;public function RenderFog (material:FogMaterial, alpha:Number = 0.5, depth:Number = 0, do3d:DisplayObject3D = null);public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\RenderLine.as
package org.papervision3d.core.render.command{import flash.display.Graphics;import flash.geom.Point;import org.papervision3d.core.geom.renderables.Line3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.Number2D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.special.LineMaterial;/**
* @Author Ralph Hauwert
*/
public class RenderLine extends RenderableListItem implements IRenderListItem{public var line : Line3D;public var renderer : LineMaterial;private static var lineVector : Number3D;private static var mouseVector : Number3D;private var p : Number2D;private var l1 : Number2D;private var l2 : Number2D;private var v : Number2D;private var cp3d : Number3D;public var v0 : Vertex3DInstance;public var v1 : Vertex3DInstance;public var cV : Vertex3DInstance;public var size : Number;public var length : Number;/**
Quad Vars Don't Touch
*/
private var ax : Number;private var ay : Number;private var az : Number;private var bx : Number;private var by : Number;private var bz : Number;private var dx : Number;private var dy : Number;private var azf : Number;private var bzf : Number;private var faz : Number;private var fbz : Number;private var xfocus : Number;private var yfocus : Number;private var axf : Number;private var bxf : Number;private var ayf : Number;private var byf : Number;private var det : Number;private var db : Number;private var da : Number;public function RenderLine (line:Line3D);public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;public function hitTestPoint2D (point:Point, rhd:RenderHitData) : RenderHitData;public function getZ (x:Number, y:Number, focus:Number) : Number;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\RenderParticle.as
package org.papervision3d.core.render.command{import flash.display.Graphics;import flash.geom.Point;import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.special.ParticleMaterial;/**
* @Author Ralph Hauwert
	 * 
	 * updated by Seb Lee-Delisle 
	 *  - added HitTestPoint2D so that it works with interactivity.
*/
public class RenderParticle extends RenderableListItem implements IRenderListItem{public var particle : Particle;public var renderMat : ParticleMaterial;public function RenderParticle (particle:Particle);public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;public function hitTestPoint2D (point:Point, rhd:RenderHitData) : RenderHitData;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\RenderPixels.as
package org.papervision3d.core.render.command{import flash.display.BitmapData;import flash.display.Graphics;import org.papervision3d.core.geom.Pixels;import org.papervision3d.core.geom.renderables.Pixel3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.view.layer.BitmapEffectLayer;public class RenderPixels extends RenderableListItem implements IRenderListItem{private var pixels : Pixels;public function RenderPixels (pixels:Pixels);public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\RenderTriangle.as
package org.papervision3d.core.render.command{import flash.display.BitmapData;import flash.display.Graphics;import flash.display.Sprite;import flash.geom.Point;import flash.geom.Rectangle;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.materials.BitmapMaterial;import org.papervision3d.materials.MovieMaterial;/**
* @Author Ralph Hauwert
*/
public class RenderTriangle extends RenderableListItem implements IRenderListItem{protected static var resBA : Vertex3DInstance;protected static var resPA : Vertex3DInstance;protected static var resRA : Vertex3DInstance;protected static var vPoint : Vertex3DInstance;private var position : Number3D;public var triangle : Triangle3D;public var container : Sprite;public var renderer : ITriangleDrawer;public var renderMat : MaterialObject3D;/**
Drawing Variables
*/
public var v0 : Vertex3DInstance;public var v1 : Vertex3DInstance;public var v2 : Vertex3DInstance;public var uv0 : NumberUV;public var uv1 : NumberUV;public var uv2 : NumberUV;public var create : Function;protected var vPointL : Vertex3DInstance;protected var vx0 : Vertex3DInstance;protected var vx1 : Vertex3DInstance;protected var vx2 : Vertex3DInstance;/**
Don't touch these - needed for quad
*/
private var ax : Number;private var ay : Number;private var az : Number;private var bx : Number;private var by : Number;private var bz : Number;private var cx : Number;private var cy : Number;private var cz : Number;private var azf : Number;private var bzf : Number;private var czf : Number;private var faz : Number;private var fbz : Number;private var fcz : Number;private var axf : Number;private var bxf : Number;private var cxf : Number;private var ayf : Number;private var byf : Number;private var cyf : Number;private var det : Number;private var da : Number;private var db : Number;private var dc : Number;private var au : Number;private var av : Number;private var bu : Number;private var bv : Number;private var cu : Number;private var cv : Number;private var v01 : Vertex3DInstance;private var v12 : Vertex3DInstance;private var v20 : Vertex3DInstance;private var uv01 : NumberUV;private var uv12 : NumberUV;private var uv20 : NumberUV;public function RenderTriangle (triangle:Triangle3D);public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;public function hitTestPoint2D (point:Point, renderhitData:RenderHitData) : RenderHitData;public function sameSide (point:Vertex3DInstance, ref:Vertex3DInstance, a:Vertex3DInstance, b:Vertex3DInstance) : Boolean;private function deepHitTest (face:Triangle3D, vPoint:Vertex3DInstance, rhd:RenderHitData) : RenderHitData;public function update () : void;public function fivepointcut (v0:Vertex3DInstance, v01:Vertex3DInstance, v1:Vertex3DInstance, v12:Vertex3DInstance, v2:Vertex3DInstance, uv0:NumberUV, uv01:NumberUV, uv1:NumberUV, uv12:NumberUV, uv2:NumberUV) : Array;public function getZ (x:Number, y:Number, focus:Number) : Number;public function quarter (focus:Number) : Array;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\RenderVectorShape.as
package org.papervision3d.core.render.command{import org.papervision3d.core.geom.renderables.VectorShapeRenderable;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.special.VectorShapeMaterial;import org.papervision3d.objects.special.VectorShape3D;import org.papervision3d.objects.special.commands.IVectorShape;import flash.display.Graphics;import flash.geom.Point;/**
* @author Mark Barcinski
*/
public class RenderVectorShape extends RenderableListItem implements IRenderListItem{public var vectorShape : VectorShape3D;public var renderer : VectorShapeMaterial;public function RenderVectorShape (vectorShape:VectorShape3D);public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;public function hitTestPoint2D (point:Point, renderhitData:RenderHitData) : RenderHitData;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\VectorShapeHitTest.as
package org.papervision3d.core.render.command{import flash.events.Event;import org.papervision3d.view.Viewport3D;import flash.display.Sprite;/**
* @author Mark Barcinski
*/
public class VectorShapeHitTest extends Sprite{private static var _instance : VectorShapeHitTest;private var viewport : Viewport3D;public static function get instance () : VectorShapeHitTest;public function VectorShapeHitTest ();public function assignViewport (viewport:Viewport3D) : void;private function onStageResized (event:Event) : void;public function hitTestPoint (x:Number, y:Number, shapeFlag:Boolean = false) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\data\QuadTree.as
package org.papervision3d.core.render.data{import flash.display.Graphics;import org.papervision3d.core.clipping.draw.Clipping;import org.papervision3d.core.clipping.draw.RectangleClipping;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.objects.DisplayObject3D;/**
* Quadrant tree for storing drawing primitives
*/
public class QuadTree{private var _root : QuadTreeNode;private var _clip : Clipping;private var _rect : RectangleClipping;private var _center : Array;private var _result : Array;private var _except : DisplayObject3D;private var _minX : Number;private var _minY : Number;private var _maxX : Number;private var _maxY : Number;private var _child : RenderableListItem;private var _children : Array;private var i : int;private var _maxlevel : uint;/**
* Defines the clipping object to be used on the drawing primitives.
*/
public function get clip () : Clipping;public function set clip (val:Clipping) : Void;public function get maxLevel () : uint;public function set maxLevel (value:uint) : Void;private function getList (node:QuadTreeNode) : void;private function getParent (node:QuadTreeNode = null) : void;/**
* @inheritDoc
*/
public function add (renderItem:RenderableListItem) : void;/**
* removes a drawing primitive from the quadrant tree.
        * 
        * @param	pri	The drawing primitive to remove.
*/
public function remove (renderItem:RenderableListItem) : void;/**
* A list of primitives that have been clipped.
		 * 
		 * @return	An array containing the primitives to be rendered.
*/
public function list () : Array;/**
* Returns an array containing all primiives overlapping the specifed primitive's quadrant.
		 * 
		 * @param	renderItem			The drawing primitive to check.
		 * @param	ex		[optional]	Excludes primitives that are children of the 3d object.
		 * @return						An array of drawing primitives.
*/
public function getOverlaps (renderItem:RenderableListItem, ex:DisplayObject3D = null) : Array;/**
* Calls the render function on all primitives in the quadrant tree
*/
public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;public function getRoot () : QuadTreeNode;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\data\QuadTreeNode.as
package org.papervision3d.core.render.data{import flash.display.Graphics;import flash.geom.Rectangle;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.objects.DisplayObject3D;/**
* Quadrant tree node
*/
public class QuadTreeNode{private var render_center_length : int;private var render_center_index : int;private var halfwidth : Number;private var halfheight : Number;private var level : int;public var maxlevel : int;/**
* Array of primitives that lie in the center of the quadrant.
*/
public var center : Array;/**
* The quadrant tree node for the top left quadrant.
*/
public var lefttop : QuadTreeNode;/**
* The quadrant tree node for the bottom left quadrant.
*/
public var leftbottom : QuadTreeNode;/**
* The quadrant tree node for the top right quadrant.
*/
public var righttop : QuadTreeNode;/**
* The quadrant tree node for the bottom right quadrant.
*/
public var rightbottom : QuadTreeNode;/**
* Determines if the bounds of the top left quadrant need re-calculating.
*/
public var lefttopFlag : Boolean;/**
* Determines if the bounds of the bottom left quadrant need re-calculating.
*/
public var leftbottomFlag : Boolean;/**
* Determines if the bounds of the top right quadrant need re-calculating.
*/
public var righttopFlag : Boolean;/**
* Determines if the bounds of the bottom right quadrant need re-calculating.
*/
public var rightbottomFlag : Boolean;/**
* Determines if the quadrant node contains only one source.
*/
public var onlysourceFlag : Boolean;/**
* hold the 3d object referenced when <code>onlysourceFlag</code> is true.
*/
public var onlysource : DisplayObject3D;/**
* The x coordinate of the quadrant division.
*/
public var xdiv : Number;/**
* The x coordinate of the quadrant division.
*/
public var ydiv : Number;/**
* The quadrant parent.
*/
public var parent : QuadTreeNode;/**
* Placeholder function for creating new quadrant node from a cache of objects.
        * Saves recreating objects and GC problems.
*/
public var create : Function;/**
* Says if node has content or not
*/
public var hasContent : Boolean;private function render_other (limit:Number, renderSessionData:RenderSessionData, graphics:Graphics) : void;/**
* Creates a new <code>PrimitiveQuadrantTreeNode</code> object.
		 *
		 * @param	xdiv	The x coordinate for the division between left and right child quadrants.
		 * @param	ydiv	The y coordinate for the division between top and bottom child quadrants.
		 * @param	width	The width of the quadrant node.
		 * @param	xdiv	The height of the quadrant node.
		 * @param	level	The iteration number of the quadrant node.
		 * @param	parent	The parent quadrant of the quadrant node.
		 * @param	maxLevel	The deepest a Node can go
*/
public function QuadTreeNode (xdiv:Number, ydiv:Number, width:Number, height:Number, level:int, parent:QuadTreeNode = null, maxLevel:uint = 4);/**
* Adds a primitive to the quadrant
*/
public function push (pri:RenderableListItem) : void;/**
* Clears the quadrant of all primitives and child nodes
*/
public function reset (xdiv:Number, ydiv:Number, width:Number, height:Number, maxLevel:uint) : void;public function getRect () : Rectangle;/**
* Sorts and renders the contents of the quadrant tree
*/
public function render (limit:Number, renderSessionData:RenderSessionData, graphics:Graphics) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\data\RenderHitData.as
package org.papervision3d.core.render.data{import org.papervision3d.core.geom.renderables.IRenderable;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.objects.DisplayObject3D;/**
* @Author Ralph Hauwert
*/
public class RenderHitData{public var startTime : int;public var endTime : int;public var hasHit : Boolean;public var displayObject3D : DisplayObject3D;public var material : MaterialObject3D;public var renderable : IRenderable;public var u : Number;public var v : Number;public var x : Number;public var y : Number;public var z : Number;public function RenderHitData ();public function toString () : String;public function clear () : void;public function clone () : RenderHitData;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\data\RenderSessionData.as
package org.papervision3d.core.render.data{import flash.display.Sprite;import org.papervision3d.core.clipping.DefaultClipping;import org.papervision3d.core.culling.IParticleCuller;import org.papervision3d.core.culling.ITriangleCuller;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.proto.SceneObject3D;import org.papervision3d.core.render.IRenderEngine;import org.papervision3d.view.Viewport3D;/**
* @Author Ralph Hauwert
*/
public class RenderSessionData{public var sorted : Boolean;public var triangleCuller : ITriangleCuller;public var particleCuller : IParticleCuller;public var viewPort : Viewport3D;public var container : Sprite;public var scene : SceneObject3D;public var camera : CameraObject3D;public var renderer : IRenderEngine;public var renderStatistics : RenderStatistics;public var renderObjects : Array;public var renderLayers : Array;public var clipping : DefaultClipping;public var quadrantTree : QuadTree;public function RenderSessionData ();public function destroy () : void;public function clone () : RenderSessionData;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\data\RenderStatistics.as
package org.papervision3d.core.render.data{/**
* @Author Ralph Hauwert
*/
public class RenderStatistics{public var projectionTime : int;public var renderTime : int;public var rendered : int;public var triangles : int;public var culledTriangles : int;public var particles : int;public var culledParticles : int;public var lines : int;public var shadedTriangles : int;public var filteredObjects : int;public var culledObjects : int;public function RenderStatistics ();public function clear () : void;public function clone () : RenderStatistics;public function toString () : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\draw\ILineDrawer.as
package org.papervision3d.core.render.draw{import flash.display.Graphics;import org.papervision3d.core.render.command.RenderLine;import org.papervision3d.core.render.data.RenderSessionData;/**
* @Author Ralph Hauwert
*/
public interface ILineDrawer{public function drawLine (line:RenderLine, graphics:Graphics, renderSessionData:RenderSessionData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\draw\IParticleDrawer.as
package org.papervision3d.core.render.draw{import flash.display.Graphics;import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.core.render.data.RenderSessionData;/**
* @Author Ralph Hauwert
*/
public interface IParticleDrawer{public function drawParticle (particle:Particle, graphics:Graphics, renderSessionData:RenderSessionData) : void;public function updateRenderRect (particle:Particle) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\draw\ITriangleDrawer.as
package org.papervision3d.core.render.draw{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;/**
* @Author Ralph Hauwert
*/
public interface ITriangleDrawer{public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;public function drawRT (rt:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\filter\AbstractQuadrantFilter.as
package org.papervision3d.core.render.filter{import org.papervision3d.cameras.Camera3D;import org.papervision3d.core.clipping.draw.Clipping;import org.papervision3d.core.render.data.QuadTree;import org.papervision3d.scenes.Scene3D;public class AbstractQuadrantFilter{public function AbstractQuadrantFilter ();/**
* Runs a quadrant filter
*/
public function filterTree (tree:QuadTree, scene:Scene3D, camera:Camera3D, clip:Clipping) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\filter\BasicRenderFilter.as
package org.papervision3d.core.render.filter{/**
* @Author Ralph Hauwert
*/
public class BasicRenderFilter implements IRenderFilter{public function filter (array:Array) : int;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\filter\FogFilter.as
package org.papervision3d.core.render.filter{import org.papervision3d.core.render.command.RenderFog;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.materials.special.FogMaterial;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.layer.ViewportLayer;public class FogFilter extends BasicRenderFilter{private var _maxDepth : Number;private var _minDepth : Number;public var segments : Number;public var material : FogMaterial;public var viewportLayer : ViewportLayer;private var do3ds : Array;public function set maxDepth (value:Number) : Void;public function get maxDepth () : Number;public function set minDepth (value:Number) : Void;public function get minDepth () : Number;public function FogFilter (material:FogMaterial, segments:uint = 8, minDepth:Number = 200, maxDepth:Number = 4000, useViewportLayer:ViewportLayer = null);public function filter (array:Array) : int;private function visibleDepth (element:RenderableListItem, index:int, arr:Array) : Boolean;private function removeRenderItem (ar:Array, index:Number) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\filter\IRenderFilter.as
package org.papervision3d.core.render.filter{/**
* @Author Ralph Hauwert
*/
public interface IRenderFilter{public function filter (array:Array) : int;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\filter\QuadrantFilter.as
package org.papervision3d.core.render.filter{import flash.utils.*;import org.papervision3d.cameras.Camera3D;import org.papervision3d.core.clipping.draw.Clipping;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.render.command.RenderLine;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.QuadTree;import org.papervision3d.scenes.Scene3D;/**
* Splits all intersecting triangles
*/
public class QuadrantFilter extends AbstractQuadrantFilter{private var maxdelay : int;private var start : int;private var check : int;private var primitives : Array;private var pri : RenderableListItem;private var turn : int;private var leftover : Array;private var rivals : Array;private var rival : RenderableListItem;private var parts : Array;private var part : RenderableListItem;private var subst : Array;private var focus : Number;private var av0z : Number;private var av0p : Number;private var av0x : Number;private var av0y : Number;private var av1z : Number;private var av1p : Number;private var av1x : Number;private var av1y : Number;private var av2z : Number;private var av2p : Number;private var av2x : Number;private var av2y : Number;private var ad1x : Number;private var ad1y : Number;private var ad1z : Number;private var ad2x : Number;private var ad2y : Number;private var ad2z : Number;private var apa : Number;private var apb : Number;private var apc : Number;private var apd : Number;private var tv0z : Number;private var tv0p : Number;private var tv0x : Number;private var tv0y : Number;private var tv1z : Number;private var tv1p : Number;private var tv1x : Number;private var tv1y : Number;private var tv2z : Number;private var tv2p : Number;private var tv2x : Number;private var tv2y : Number;private var sv0 : Number;private var sv1 : Number;private var sv2 : Number;private var td1x : Number;private var td1y : Number;private var td1z : Number;private var td2x : Number;private var td2y : Number;private var td2z : Number;private var tpa : Number;private var tpb : Number;private var tpc : Number;private var tpd : Number;private var sav0 : Number;private var sav1 : Number;private var sav2 : Number;private var tv0 : Vertex3D;private var tv1 : Vertex3D;private var tv2 : Vertex3D;private var q0x : Number;private var q0y : Number;private var q1x : Number;private var q1y : Number;private var q2x : Number;private var q2y : Number;private var w0x : Number;private var w0y : Number;private var w1x : Number;private var w1y : Number;private var w2x : Number;private var w2y : Number;private var ql01a : Number;private var ql01b : Number;private var ql01c : Number;private var ql01s : Number;private var ql01w0 : Number;private var ql01w1 : Number;private var ql01w2 : Number;private var ql12a : Number;private var ql12b : Number;private var ql12c : Number;private var ql12s : Number;private var ql12w0 : Number;private var ql12w1 : Number;private var ql12w2 : Number;private var ql20a : Number;private var ql20b : Number;private var ql20c : Number;private var ql20s : Number;private var ql20w0 : Number;private var ql20w1 : Number;private var ql20w2 : Number;private var wl01a : Number;private var wl01b : Number;private var wl01c : Number;private var wl01s : Number;private var wl01q0 : Number;private var wl01q1 : Number;private var wl01q2 : Number;private var wl12a : Number;private var wl12b : Number;private var wl12c : Number;private var wl12s : Number;private var wl12q0 : Number;private var wl12q1 : Number;private var wl12q2 : Number;private var wl20a : Number;private var wl20b : Number;private var wl20c : Number;private var wl20s : Number;private var wl20q0 : Number;private var wl20q1 : Number;private var wl20q2 : Number;private var d : Number;private var k0 : Number;private var k1 : Number;private var tv01z : Number;private var tv01p : Number;private var tv01x : Number;private var tv01y : Number;private var v01 : Vertex3DInstance;private function riddle (q:RenderableListItem, w:RenderableListItem) : Array;private function riddleTT (q:RenderTriangle, w:RenderTriangle) : Array;private function overlap (q:RenderTriangle, w:RenderTriangle) : Boolean;/**
* Creates a new <code>QuadrantFilter</code> object.
		 *
		 * @param	maxdelay	[optional]		The maximum time the filter can take to resolve z-depth before timing out.
*/
public function QuadrantFilter (maxdelay:int = 60000);/**
* @inheritDoc
*/
public function filterTree (tree:QuadTree, scene:Scene3D, camera:Camera3D, clip:Clipping) : void;/**
* Used to trace the values of a filter.
		 * 
		 * @return A string representation of the filter object.
*/
public function toString () : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\filter\QuadrantZFilter.as
package org.papervision3d.core.render.filter{import flash.utils.*;import org.papervision3d.cameras.Camera3D;import org.papervision3d.core.clipping.draw.Clipping;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.QuadTree;import org.papervision3d.scenes.Scene3D;/**
* Corrects triangle z-sorting
*/
public class QuadrantZFilter extends AbstractQuadrantFilter{private var maxdelay : int;private var _focus : Number;private var start : int;private var check : int;private var primitives : Array;private var pri : RenderableListItem;private var turn : int;private var leftover : Array;private var maxZ : Number;private var minZ : Number;private var maxdeltaZ : Number;private var rivals : Array;private var rival : RenderableListItem;private var parts : Array;private var part : RenderableListItem;private var ZOrderDeeper : int;private var ZOrderIrrelevant : int;private var ZOrderHigher : int;private var ZOrderSame : int;private var q0x : Number;private var q0y : Number;private var q1x : Number;private var q1y : Number;private var q2x : Number;private var q2y : Number;private var r0x : Number;private var r0y : Number;private var r1x : Number;private var r1y : Number;private var ql01a : Number;private var ql01b : Number;private var ql01c : Number;private var ql01s : Number;private var ql01r0 : Number;private var ql01r1 : Number;private var ql12a : Number;private var ql12b : Number;private var ql12c : Number;private var ql12s : Number;private var ql12r0 : Number;private var ql12r1 : Number;private var ql20a : Number;private var ql20b : Number;private var ql20c : Number;private var ql20s : Number;private var ql20r0 : Number;private var ql20r1 : Number;private var rla : Number;private var rlb : Number;private var rlc : Number;private var rlq0 : Number;private var rlq1 : Number;private var rlq2 : Number;private var q01r : Boolean;private var q12r : Boolean;private var q20r : Boolean;private var q01rx : Number;private var q01ry : Number;private var q12rx : Number;private var q12ry : Number;private var q20rx : Number;private var q20ry : Number;private var count : int;private var cx : Number;private var cy : Number;private var q01rd : Number;private var q12rd : Number;private var q20rd : Number;private var w0x : Number;private var w0y : Number;private var w1x : Number;private var w1y : Number;private var w2x : Number;private var w2y : Number;private var ql01w0 : Number;private var ql01w1 : Number;private var ql01w2 : Number;private var ql12w0 : Number;private var ql12w1 : Number;private var ql12w2 : Number;private var ql20w0 : Number;private var ql20w1 : Number;private var ql20w2 : Number;private var wl01a : Number;private var wl01b : Number;private var wl01c : Number;private var wl01s : Number;private var wl01q0 : Number;private var wl01q1 : Number;private var wl01q2 : Number;private var wl12a : Number;private var wl12b : Number;private var wl12c : Number;private var wl12s : Number;private var wl12q0 : Number;private var wl12q1 : Number;private var wl12q2 : Number;private var wl20a : Number;private var wl20b : Number;private var wl20c : Number;private var wl20s : Number;private var wl20q0 : Number;private var wl20q1 : Number;private var wl20q2 : Number;private var q01w01 : Boolean;private var q12w01 : Boolean;private var q20w01 : Boolean;private var q01w12 : Boolean;private var q12w12 : Boolean;private var q20w12 : Boolean;private var q01w20 : Boolean;private var q12w20 : Boolean;private var q20w20 : Boolean;private var q01w01x : Number;private var q01w01y : Number;private var q12w01x : Number;private var q12w01y : Number;private var q20w01x : Number;private var q20w01y : Number;private var q01w12x : Number;private var q01w12y : Number;private var q12w12x : Number;private var q12w12y : Number;private var q20w12x : Number;private var q20w12y : Number;private var q01w20x : Number;private var q01w20y : Number;private var q12w20x : Number;private var q12w20y : Number;private var q20w20x : Number;private var q20w20y : Number;private var q01w01d : Number;private var q12w01d : Number;private var q20w01d : Number;private var q01w12d : Number;private var q12w12d : Number;private var q20w12d : Number;private var q01w20d : Number;private var q12w20d : Number;private var q20w20d : Number;private var az : Number;private var bz : Number;private function zconflict (q:RenderableListItem, w:RenderableListItem) : int;private function zconflictTT (q:RenderTriangle, w:RenderTriangle) : int;private function zcompare (a:RenderableListItem, b:RenderableListItem, x:Number, y:Number) : int;/**
* Creates a new <code>QuadrantZFilter</code> object.
		 *
		 * @param	maxdelay	[optional]		The maximum time the filter can take to resolve z-depth before timing out.
*/
public function QuadrantZFilter (maxdelay:int = 60000);/**
* @inheritDoc
*/
public function filterTree (tree:QuadTree, scene:Scene3D, camera:Camera3D, clip:Clipping) : void;/**
* Used to trace the values of a filter.
		 * 
		 * @return A string representation of the filter object.
*/
public function toString () : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\material\IUpdateAfterMaterial.as
package org.papervision3d.core.render.material{import org.papervision3d.core.render.data.RenderSessionData;public interface IUpdateAfterMaterial{public function updateAfterRender (renderSessionData:RenderSessionData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\material\IUpdateBeforeMaterial.as
package org.papervision3d.core.render.material{import org.papervision3d.core.render.data.RenderSessionData;public interface IUpdateBeforeMaterial{public function updateBeforeRender (renderSessionData:RenderSessionData) : void;public function isUpdateable () : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\material\MaterialManager.as
package org.papervision3d.core.render.material{import flash.utils.Dictionary;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;/**
* @Author Ralph Hauwert
	 * 
	 * <code>MaterialManager</code> (used internally) is a singleton that tracks 
	 * all materials. Each time a material is created, the <code>MaterialManager</code> 
	 * registers the material for access in the render engine.
*/
public class MaterialManager{private static var instance : MaterialManager;private var materials : Dictionary;/**
* MaterialManager singleton constructor
*/
public function MaterialManager ();/**
@private
*/
private function init () : void;/**
@private
*/
private function _registerMaterial (material:MaterialObject3D) : void;/**
@private
*/
private function _unRegisterMaterial (material:MaterialObject3D) : void;/**
* Allows for materials that animate or change (e.g., MovieMaterial) to 
		 * be updated prior to the render
		 * 
		 * @param renderSessionData		the data used in updating the material
*/
public function updateMaterialsBeforeRender (renderSessionData:RenderSessionData) : void;/**
* Allows for materials that animate or change (e.g., MovieMaterial) to 
		 * be updated after the render
		 * 
		 * @param renderSessionData		the data used in updating the material
*/
public function updateMaterialsAfterRender (renderSessionData:RenderSessionData) : void;/**
* Registers a material
*/
public static function registerMaterial (material:MaterialObject3D) : void;/**
* Unregisters a material
*/
public static function unRegisterMaterial (material:MaterialObject3D) : void;/**
* Returns a singleton instance of the <code>MaterialManager</code>
*/
public static function getInstance () : MaterialManager;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\project\BasicProjectionPipeline.as
package org.papervision3d.core.render.project{import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;public class BasicProjectionPipeline extends ProjectionPipeline{public function BasicProjectionPipeline ();protected function init () : void;/**
* project(renderSessionData:RenderSessionData);
		 * 
		 * Projects all base objects
		 * 
		 * @returns void;
*/
public function project (renderSessionData:RenderSessionData) : void;protected function projectObject (object:DisplayObject3D, renderSessionData:RenderSessionData, test:Number) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\project\ProjectionPipeline.as
package org.papervision3d.core.render.project{import org.papervision3d.core.render.data.RenderSessionData;/**
* @author Ralph Hauwert
*/
public class ProjectionPipeline{/**
* ProjectionPipeline();
		 * 
		 * A projection pipeline defines the way a scene and it's contained objects will be projected and culled.
		 * It's designed to create flexibility within the rendering of Papervision3D, allowing multiple projection methods and culling.
*/
public function ProjectionPipeline ();/**
* project(renderSessionData:RenderSessionData);
		 * 
		 * The main projection function as called by the renderer.
*/
public function project (renderSessionData:RenderSessionData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\project\basic\IProjector.as
package org.papervision3d.core.render.project.basic{import org.papervision3d.core.render.data.RenderSessionData;public interface IProjector{public function project (renderSessionData:RenderSessionData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\shader\IShaderRenderer.as
package org.papervision3d.core.render.shader{import flash.display.Sprite;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.shaders.Shader;public interface IShaderRenderer{public function render (renderSessionData:RenderSessionData) : void;public function clear () : void;public function getLayerForShader (shader:Shader) : Sprite;public function destroy () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\shader\ShaderObjectData.as
package org.papervision3d.core.render.shader{import flash.display.BitmapData;import flash.geom.Matrix;import flash.geom.Point;import flash.geom.Rectangle;import flash.utils.Dictionary;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.materials.BitmapMaterial;import org.papervision3d.materials.shaders.ShadedMaterial;import org.papervision3d.objects.DisplayObject3D;/**
* Author Ralph Hauwert
*/
public class ShaderObjectData{private var origin : Point;public var shaderRenderer : ShaderRenderer;public var uvMatrices : Dictionary;public var lightMatrices : Dictionary;public var object : DisplayObject3D;public var material : BitmapMaterial;public var shadedMaterial : ShadedMaterial;public var triangleUVS : Dictionary;public var renderTriangleUVS : Dictionary;protected var triangleBitmaps : Dictionary;public var triangleRects : Dictionary;public function ShaderObjectData (object:DisplayObject3D, material:BitmapMaterial, shadedMaterial:ShadedMaterial);/**
* Returns a matrix for the original texturemap coordinates
*/
public function getUVMatrixForTriangle (triangle:Triangle3D, perturb:Boolean = false) : Matrix;/**
* Returns a per tri bitmap to use to render to screen.
*/
public function getOutputBitmapFor (triangle:Triangle3D) : BitmapData;/**
* For per tri mode. Returns a correct uvmap for the material to draw to an individual bitmap to screen.
*/
public function getPerTriUVForDraw (triangle:Triangle3D) : Matrix;/**
* For per tri mode. Returns a correct uvmap for the shader to draw to an individual bitmap.
*/
public function getPerTriUVForShader (triangle:Triangle3D) : Matrix;/**
* For PER_TRI MODE. Returns a rectangle for the surface size to draw too.
*/
public function getRectFor (triangle:Triangle3D) : Rectangle;public function updateBeforeRender () : void;public function destroy () : void;private function perturbUVMatrix (matrix:Matrix, triangle:Triangle3D, numPixels:Number = 2) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\shader\ShaderRenderer.as
package org.papervision3d.core.render.shader{import flash.display.Bitmap;import flash.display.BitmapData;import flash.display.BitmapDataChannel;import flash.display.BlendMode;import flash.display.Sprite;import flash.events.EventDispatcher;import flash.geom.Point;import flash.utils.Dictionary;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.shaders.Shader;/**
* Author Ralph Hauwert
*/
public class ShaderRenderer extends EventDispatcher implements IShaderRenderer{public var resizedInput : Boolean;public var bitmapLayer : Sprite;public var container : Sprite;public var bitmapContainer : Bitmap;public var shadeLayers : Dictionary;public var outputBitmap : BitmapData;private var _inputBitmapData : BitmapData;public function set inputBitmap (bitmapData:BitmapData) : Void;public function get inputBitmap () : BitmapData;public function ShaderRenderer ();public function render (renderSessionData:RenderSessionData) : void;public function clear () : void;public function destroy () : void;public function getLayerForShader (shader:Shader) : Sprite;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\sort\BasicRenderSorter.as
package org.papervision3d.core.render.sort{/**
* @author Ralph Hauwert
*/
public class BasicRenderSorter implements IRenderSorter{public function sort (array:Array) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\sort\IRenderSorter.as
package org.papervision3d.core.render.sort{/**
* @Author Ralph Hauwert
*/
public interface IRenderSorter{public function sort (array:Array) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\sort\NullSorter.as
package org.papervision3d.core.render.sort{public class NullSorter implements IRenderSorter{/**
* NullSorter();
		 * 
		 * Doesn't do anything to the renderlist, during the sort phase.
*/
public function NullSorter ();public function sort (array:Array) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\InteractiveSceneManager.as
package org.papervision3d.core.utils{import flash.display.Sprite;import flash.events.Event;import flash.events.EventDispatcher;import flash.events.MouseEvent;import flash.geom.Point;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.core.utils.virtualmouse.IVirtualMouseEvent;import org.papervision3d.core.utils.virtualmouse.VirtualMouse;import org.papervision3d.events.InteractiveScene3DEvent;import org.papervision3d.materials.MovieMaterial;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.Viewport3D;/**
* @author John Grden
*/
public class InteractiveSceneManager extends EventDispatcher{/**
* MOUSE_IS_DOWN is a quick static property to check and is maintained by the ISM
*/
public static var MOUSE_IS_DOWN : Boolean;/**
* VirtualMouse is used with faceLevelMode of ISM or DO3D's.  Its a virtual mouse that causes the objects in your materials movieclip containers to fire off their mouse events such as click, over, out, release, press etc
		 * </p>
		 * <p>
		 * Using these events requires you only to do what you normally do - establish listeners with your objects like you normally would, and you'll receive them!
*/
public var virtualMouse : VirtualMouse;public var mouse3D : Mouse3D;public var viewport : Viewport3D;/**
* Main container for ISM to create the sub InteractiveSprite containers for the faces and DO3D objects passed in during the render loop
*/
public var container : Sprite;public var renderHitData : RenderHitData;public var currentDisplayObject3D : DisplayObject3D;public var currentMaterial : MaterialObject3D;public var enableOverOut : Boolean;public var currentMouseDO3D : DisplayObject3D;public var debug : Boolean;public var currentMousePos : Point;public var lastMousePos : Point;public var _viewportRendered : Boolean;public function InteractiveSceneManager (viewport:Viewport3D);public function destroy () : void;public function init () : void;/**
* @private
		 * @param e
		 *
*/
protected function handleAddedToStage (e:Event) : void;protected function initVirtualMouse () : void;public function initListeners () : void;public function updateRenderHitData () : void;protected function manageOverOut () : void;protected function resolveRenderHitData () : void;/**
* Handles the MOUSE_DOWN event on an InteractiveSprite container
		 * @param e
		 *
*/
protected function handleMousePress (e:MouseEvent) : void;/**
* Handles the MOUSE_UP event on an InteractiveSprite container
		 * @param e
		 *
*/
protected function handleMouseRelease (e:MouseEvent) : void;/**
* Handles the MOUSE_CLICK event on an InteractiveSprite container
		 * @param e
		 *
*/
protected function handleMouseClick (e:MouseEvent) : void;/**
* Handles the MOUSE_CLICK event on an InteractiveSprite container
		 * @param e
		 *
*/
protected function handleMouseDoubleClick (e:MouseEvent) : void;/**
* Handles the MOUSE_OVER event on an InteractiveSprite container
		 * @param e
		 *
*/
protected function handleMouseOver (DO3D:DisplayObject3D) : void;/**
* Handles the MOUSE_OUT event on an InteractiveSprite container
		 * @param e
		 *
*/
protected function handleMouseOut (DO3D:DisplayObject3D) : void;public function updateAfterRender () : void;protected function hasMouseMoved () : Boolean;/**
* This handles the MOUSE_MOVE event on an InteractiveSprite container
		 * and replaces handleMouseMove. 
		 * 
		 * By using ENTER_FRAME and manually checking for mouse movement we should save CPU.
		 * 
		 * @param e
		 *
*/
protected function handleEnterFrame (e:Event) : void;/**
* @private
		 * @param event
		 * @param currentTarget
		 *
*/
protected function dispatchObjectEvent (event:String, DO3D:DisplayObject3D) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\InteractiveUtils.as
package org.papervision3d.core.utils{import flash.display.BitmapData;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.materials.BitmapMaterial;import org.papervision3d.objects.DisplayObject3D;/**
* InteractiveUtils are used in conjunction with the ISM to resolve a face's mouse interaction and coordinates back to 2D screen space	 * 	 *
*/
public class InteractiveUtils{public static function UVatPoint (face3d:Triangle3D, x:Number, y:Number) : Object;public static function getCoordAtPoint (face3d:Triangle3D, x:Number, y:Number) : Vertex3D;public static function getMapCoordAtPointDO3D (displayObject:DisplayObject3D, x:Number, y:Number) : Object;public static function getMapCoordAtPoint (face3d:Triangle3D, x:Number, y:Number) : Object;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\MeshUtil.as
package org.papervision3d.core.utils{import flash.utils.Dictionary;import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.Plane3D;import org.papervision3d.core.math.util.ClassificationUtil;import org.papervision3d.core.math.util.TriangleUtil;import org.papervision3d.core.proto.GeometryObject3D;public class MeshUtil{public function MeshUtil ();public static function cutTriangleMesh (mesh:TriangleMesh3D, cuttingPlane:Plane3D) : Array;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\Mouse3D.as
package org.papervision3d.core.utils{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.objects.DisplayObject3D;/**
* Mouse3D tracks the mouse's position in relation to 3d space
*/
public class Mouse3D extends DisplayObject3D{private static var UP : Number3D;/**
* A boolean flag to enable or disable the mouse updating in the		 * <code>InteractiveSceneManager</code>
*/
public static var enabled : Boolean;private var target : Number3D;public function Mouse3D ();/**
* updates the mouse position		 * 		 * @param rhd		the data used to update the mouse position
*/
public function updatePosition (rhd:RenderHitData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\StopWatch.as
package org.papervision3d.core.utils{import flash.events.EventDispatcher;import flash.utils.getTimer;/**
* StopWatch times how long certain actions (e.g., a render) take
*/
public class StopWatch extends EventDispatcher{private var startTime : int;private var stopTime : int;private var elapsedTime : int;private var isRunning : Boolean;public function StopWatch ();/**
* Starts the timer
*/
public function start () : void;/**
* Stops the timer
*/
public function stop () : int;/**
* Resets the timer
*/
public function reset () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\virtualmouse\IVirtualMouseEvent.as
package org.papervision3d.core.utils.virtualmouse{/**
* Interface for virtual mouse events	 * allowing you to check an event for	 * the type of IVirtualMouseEvent to see	 * if it originated from VirtualMouse.
*/
public interface IVirtualMouseEvent{}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\virtualmouse\VirtualMouse.as
package org.papervision3d.core.utils.virtualmouse{import flash.display.DisplayObject;import flash.display.DisplayObjectContainer;import flash.display.InteractiveObject;import flash.display.SimpleButton;import flash.display.Sprite;import flash.display.Stage;import flash.events.Event;import flash.events.EventDispatcher;import flash.events.KeyboardEvent;import flash.events.MouseEvent;import flash.geom.Point;import flash.utils.Dictionary;import org.papervision3d.core.log.PaperLogger;/**
* The VirtualMouse class is used to create a programmatic 	 * version of the users mouse that can be moved about the	 * Flash player stage firing off mouse events of the display	 * objects it interacts with.  This can allow you to simulate	 * interaction with buttons and movie clips through ActionScript.	 * <br />	 * Handled events include:	 * 		Event.MOUSE_LEAVE,	 * 		MouseEvent.MOUSE_MOVE,	 * 		MouseEvent.MOUSE_OUT,	 * 		MouseEvent.ROLL_OUT,	 * 		MouseEvent.MOUSE_OVER,	 * 		MouseEvent.ROLL_OVER,	 * 		MouseEvent.MOUSE_DOWN,	 * 		MouseEvent.MOUSE_UP.	 * 		MouseEvent.CLICK, and,	 * 		MouseEvent.DOUBLE_CLICK.	 * Along with dispatching those events for their respective	 * targets, the VirtualMouse instance will also dispatch the	 * event on itself allowing to capture which events are being	 * fired by the virtual mouse.  The last event fired can also	 * be referenced in the lastEvent property.	 * <br />	 * VirtualMouse mouse cannot:	 * 		activate states of SimpleButton instances, 	 * 		change object focus, 	 * 		handle mouseWheel related events,	 * 		change the system's cursor location, or 	 * 		spoof the location of the mouseX and mouseY properties	 * 			(which some components rely on).
*/
public class VirtualMouse extends EventDispatcher{public static const UPDATE : String;private var altKey : Boolean;private var ctrlKey : Boolean;private var shiftKey : Boolean;private var delta : int;private var _stage : Stage;private var _container : Sprite;private var target : InteractiveObject;private var location : Point;private var isLocked : Boolean;private var isDoubleClickEvent : Boolean;private static var _mouseIsDown : Boolean;private var disabledEvents : Object;private var ignoredInstances : Dictionary;private var _lastEvent : Event;private var lastMouseDown : Boolean;private var updateMouseDown : Boolean;private var lastLocation : Point;private var lastDownTarget : DisplayObject;private var lastWithinStage : Boolean;private var _useNativeEvents : Boolean;private var eventEvent : Class;private var mouseEventEvent : Class;/**
* A reference to the Stage instance. This		 * reference needs to be passed to the 		 * VirtualMouse instance either in its constructor		 * or through assigning it's stage property.		 * Without a valid reference to the stage, the		 * virtual mouse will not function.		 * @see VirtualMouse()
*/
public function get stage () : Stage;public function set stage (s:Stage) : Void;/**
* 		* @param	value Sprite container you want VirtualMouse to use with its testing of sub containers		* @return
*/
public function set container (value:Sprite) : Void;public function get container () : Sprite;/**
* The last event dispatched by the VirtualMouse		 * instance.  This can be useful for preventing		 * event recursion if performing VirtualMouse		 * operations within MouseEvent handlers.
*/
public function get lastEvent () : Event;/**
* True if the virtual mouse is being		 * pressed, false if not.  The mouse is		 * down for the virtual mouse if press()		 * was called.		 * @see press()		 * @see release()
*/
public function get mouseIsDown () : Boolean;/**
* The x location of the virtual mouse. If you are		 * setting both the x and y properties of the		 * virtual mouse at the same time, you would probably		 * want to lock the VirtualMouse instance to prevent		 * additional events from firing.		 * @see lock		 * @see unlock		 * @see y		 * @see setLocation()		 * @see getLocation()
*/
public function get x () : Number;public function set x (n:Number) : Void;/**
* The y location of the virtual mouse.  If you are		 * setting both the x and y properties of the		 * virtual mouse at the same time, you would probably		 * want to lock the VirtualMouse instance to prevent		 * additional events from firing.		 * @see lock		 * @see unlock		 * @see x		 * @see setLocation()		 * @see getLocation()
*/
public function get y () : Number;public function set y (n:Number) : Void;/**
* Determines if the events dispatched by the		 * VirtualMouse instance are IVirualMouseEvent		 * Events (wrapping Event and MouseEvent) or events		 * of the native Event and MouseEvent type. When using		 * non-native events, you can check to see if the		 * events originated from VirtualMouse by seeing if		 * the events are of the type IVirualMouseEvent.		 * @see lastEvent
*/
public function get useNativeEvents () : Boolean;public function set useNativeEvents (b:Boolean) : Void;/**
* Initializes a new VirtualMouse instance. 		 * @param stage A reference to the stage instance.		 * @param startX The initial x location of		 * 		the virtual mouse.		 * @param startY The initial y location of		 * 		the virtual mouse.
*/
public function VirtualMouse (stage:Stage = null, container:Sprite = null, startX:Number = 0, startY:Number = 0);/**
* Returns the location (x and y) of the current		 * VirtualMouse instance. The location of the		 * virtual mouse is based in the global		 * coordinate space.		 * @return A Point instance representing the 		 * 		location of the virtual mouse in		 * 		global coordinate space.		 * @see x		 * @see y		 * @see setLocation()
*/
public function getLocation () : Point;/**
* Sets the location (x and y) of the current		 * VirtualMouse instance.  There are two ways to		 * call setLocation, either passing in a single		 * Point instance, or by passing in two Number		 * instances representing x and y coordinates.		 * The location of the virtual mouse is based in		 * the global coordinate space.		 * @param a A Point instance or x Number value.		 * @param b A y Number value if a is a Number.		 * @see x		 * @see y		 * @see getLocation()
*/
public function setLocation (a:*, b:* = null) : void;/**
* Locks the current VirtualMouse instance		 * preventing updates from being made as 		 * properties change within the instance.		 * To release and allow an update, call unlock().		 * @see lock()		 * @see update()
*/
public function lock () : void;/**
* Unlocks the current VirtualMouse instance		 * allowing updates to be made for the		 * dispatching of virtual mouse events. After		 * unlocking the instance, it will update and		 * additional calls to press(), release(), or		 * changing the location of the virtual mouse		 * will also invoke updates.		 * @see lock()		 * @see update()
*/
public function unlock () : void;/**
* Allows you to disable an event by type		 * preventing the virtual mouse from 		 * dispatching that event during an update.		 * @param type The type for the event to		 * 		disable, e.g. MouseEvent.CLICK		 * @see enableEvent()
*/
public function disableEvent (type:String) : void;/**
* Re-enables an event disabled with		 * disableEvent.		 * @param type The type for the event to		 * 		enable, e.g. MouseEvent.CLICK		 * @see disableEvent()
*/
public function enableEvent (type:String) : void;/**
* Ignores a display object preventing that		 * object from recieving events from the		 * virtual mouse.  This is useful for instances		 * used for cursors which may always be under		 * the virtual mouse's location.		 * @param instance A reference to the		 * 		DisplayObject instance to ignore.		 * @see unignore()
*/
public function ignore (instance:DisplayObject) : void;/**
* Removes an instance from the ignore list		 * defined by ignore().  When an ingored		 * object is passed into unignore(), it will		 * be able to receive events from the virtual		 * mouse.		 * @param instance A reference to the		 * 		DisplayObject instance to unignore.		 * @see ignore()
*/
public function unignore (instance:DisplayObject) : void;/**
* Simulates the pressing of the left		 * mouse button. To release the mouse		 * button, use release().		 * @see release()		 * @see click()
*/
public function press () : void;/**
* Simulates the release of the left		 * mouse button.  This method has no		 * effect unless press() was called first.		 * @see press()		 * @see click()
*/
public function release () : void;/**
* Simulates a click of the left		 * mouse button (press and release)		 * @see press()		 * @see release()		 * @see click()		 * @see doubleClick()
*/
public function click () : void;/**
* Simulates a double-click of the left		 * mouse button (press and release twice).		 * Calling this command is the only way to		 * simulate a double-click for the virtual		 * mouse.  Calling press() and release() or		 * click() is rapid succession will not		 * invoke a double-click event. The double-click		 * event will also only fire for an instance		 * if it's doubleClickEnabled property is		 * set to true.		 * @see click()
*/
public function doubleClick () : void;/**
Added by Jim Kremens kremens@gmail.com 08/16/07
*/
public function exitContainer () : void;/**
* Updates the VirtualMouse instance's state		 * to reflect a change in the virtual mouse.		 * Within this method all events will be dispatched.		 * update() is called any time a VirtualMouse		 * property is changed unless lock() was used to		 * lock the instance.  update() will then not be		 * called until unlock() is used to unlock		 * the instance. Typically you would never call		 * update() directly; it is called automatically		 * by the VirtualMouse class. Calling update()		 * manually will override lock(). Whenever update()		 * is called, the UPDATE event is dispatched.		 * @see lock()		 * @see unlock()
*/
public function update () : void;private function handleUpdate (event:Event) : void;private function keyHandler (event:KeyboardEvent) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\virtualmouse\VirtualMouseEvent.as
package org.papervision3d.core.utils.virtualmouse{import flash.events.Event;/**
* Wrapper for the Event class to let you check to	 * see if an event originated from the user's mouse	 * or a VirtualMouse instance.
*/
public class VirtualMouseEvent extends Event implements IVirtualMouseEvent{public function VirtualMouseEvent (type:String, bubbles:Boolean = false, cancelable:Boolean = false);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\virtualmouse\VirtualMouseMouseEvent.as
package org.papervision3d.core.utils.virtualmouse{import flash.display.InteractiveObject;import flash.events.MouseEvent;/**
* Wrapper for the MouseEvent class to let you check	 * to see if an event originated from the user's mouse	 * or a VirtualMouse instance.
*/
public class VirtualMouseMouseEvent extends MouseEvent implements IVirtualMouseEvent{public function VirtualMouseMouseEvent (type:String, bubbles:Boolean = false, cancelable:Boolean = false, localX:Number = NaN, localY:Number = NaN, relatedObject:InteractiveObject = null, ctrlKey:Boolean = false, altKey:Boolean = false, shiftKey:Boolean = false, buttonDown:Boolean = false, delta:int = 0);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\view\IView.as
package org.papervision3d.core.view{/**
* @Author Ralph Hauwert
*/
public interface IView{public function singleRender () : void;public function startRendering () : void;public function stopRendering (reRender:Boolean = false, cacheAsBitmap:Boolean = false) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\view\IViewport3D.as
package org.papervision3d.core.view{import org.papervision3d.core.render.data.RenderSessionData;/**
* @Author Ralph Hauwert
*/
public interface IViewport3D{public function updateBeforeRender (renderSessionData:RenderSessionData) : void;public function updateAfterRender (renderSessionData:RenderSessionData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\events\AnimationEvent.as
package org.papervision3d.events{import flash.events.Event;/**
* The AnimationEvent class represents events that are dispatched by the animation engine.
*/
public class AnimationEvent extends Event{public static const ANIMATION_COMPLETE : String;public static const ANIMATION_ERROR : String;public static const ANIMATION_NEXT_FRAME : String;public var currentFrame : uint;public var totalFrames : uint;public var message : String;public var dataObj : Object;public function AnimationEvent (type:String, currentFrame:uint, totalFrames:uint, message:String = "", dataObj:Object = null, bubbles:Boolean = false, cancelable:Boolean = false);public function clone () : Event;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\events\FileLoadEvent.as
package org.papervision3d.events{import flash.events.Event;/**
* The FileLoadEvent class represents events that are dispatched when files are loaded.
*/
public class FileLoadEvent extends Event{public static const LOAD_COMPLETE : String;public static const LOAD_ERROR : String;public static const SECURITY_LOAD_ERROR : String;public static const COLLADA_MATERIALS_DONE : String;public static const LOAD_PROGRESS : String;public static const ANIMATIONS_COMPLETE : String;public static const ANIMATIONS_PROGRESS : String;public var file : String;public var bytesLoaded : Number;public var bytesTotal : Number;public var message : String;public var dataObj : Object;public function FileLoadEvent (type:String, file:String = "", bytesLoaded:Number = -1, bytesTotal:Number = -1, message:String = "", dataObj:Object = null, bubbles:Boolean = false, cancelable:Boolean = false);public function clone () : Event;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\events\InteractiveScene3DEvent.as
package org.papervision3d.events{import flash.display.Sprite;import flash.events.Event;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.objects.DisplayObject3D;/**
* ...	* @author John Grden	* @version 0.1
*/
public class InteractiveScene3DEvent extends Event{/**
* Dispatched when a container in the ISM recieves a MouseEvent.CLICK event		* @eventType mouseClick
*/
public static const OBJECT_CLICK : String;/**
* Dispatched when a container in the ISM recieves a MouseEvent.CLICK event		* @eventType mouseClick
*/
public static const OBJECT_DOUBLE_CLICK : String;/**
* Dispatched when a container in the ISM receives an MouseEvent.MOUSE_OVER event		* @eventType mouseOver
*/
public static const OBJECT_OVER : String;/**
* Dispatched when a container in the ISM receives an MouseEvent.MOUSE_OUT event		* @eventType mouseOut
*/
public static const OBJECT_OUT : String;/**
* Dispatched when a container in the ISM receives a MouseEvent.MOUSE_MOVE event		* @eventType mouseMove
*/
public static const OBJECT_MOVE : String;/**
* Dispatched when a container in the ISM receives a MouseEvent.MOUSE_PRESS event		* @eventType mousePress
*/
public static const OBJECT_PRESS : String;/**
* Dispatched when a container in the ISM receives a MouseEvent.MOUSE_RELEASE event		* @eventType mouseRelease
*/
public static const OBJECT_RELEASE : String;/**
* Dispatched when the main container of the ISM is clicked		* @eventType mouseReleaseOutside
*/
public static const OBJECT_RELEASE_OUTSIDE : String;/**
* Dispatched when a container is created in the ISM for drawing and mouse interaction purposes		* @eventType objectAdded
*/
public static const OBJECT_ADDED : String;public var displayObject3D : DisplayObject3D;public var sprite : Sprite;public var face3d : Triangle3D;public var x : Number;public var y : Number;public var renderHitData : RenderHitData;public function InteractiveScene3DEvent (type:String, container3d:DisplayObject3D = null, sprite:Sprite = null, face3d:Triangle3D = null, x:Number = 0, y:Number = 0, renderhitData:RenderHitData = null, bubbles:Boolean = false, cancelable:Boolean = false);public function toString () : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\events\RendererEvent.as
package org.papervision3d.events{import flash.events.Event;import org.papervision3d.core.render.data.RenderSessionData;public class RendererEvent extends Event{public static const RENDER_DONE : String;public static const PROJECTION_DONE : String;public var renderSessionData : RenderSessionData;public function RendererEvent (type:String, renderSessionData:RenderSessionData);public function clear () : void;public function clone () : Event;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\lights\PointLight3D.as
package org.papervision3d.lights{import org.papervision3d.core.math.Number3D;import org.papervision3d.core.proto.LightObject3D;public class PointLight3D extends LightObject3D{public static var DEFAULT_POS : Number3D;/**
* Constructor.
		 * 
		 * @param	showLight	A Boolean value indicating whether the light is visible.
		 * @param	flipped		A Boolean value indicating whether to flip the light-direction (needed for correct DAE-shading).
*/
public function PointLight3D (showLight:Boolean = false, flipped:Boolean = false);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\BitmapAssetMaterial.as
package org.papervision3d.materials{import flash.display.BitmapData;import flash.utils.describeType;import flash.utils.getDefinitionByName;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.render.draw.ITriangleDrawer;/**
* The BitmapAssetMaterial class creates a texture from a Bitmap library symbol.	*	* Materials collects data about how objects appear when rendered.	*
*/
public class BitmapAssetMaterial extends BitmapMaterial implements ITriangleDrawer{private static var _library : Object;private static var _count : Object;/**
* A texture object.
*/
public function get texture () : Object;/**
* @private
*/
public function set texture (asset:Object) : Void;/**
* The BitmapAssetMaterial class creates a texture from a Bitmap library asset.		*		* @param	linkageID				The linkage name of the Bitmap symbol in the library.
*/
public function BitmapAssetMaterial (linkageID:String, precise:Boolean = false);/**
* [internal-use]		*		* @param	asset		* @return
*/
protected function createBitmapFromLinkageID (asset:String) : BitmapData;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\BitmapColorMaterial.as
package org.papervision3d.materials{import flash.display.BitmapData;import flash.display.Graphics;import flash.display.Sprite;import flash.geom.Matrix;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;public class BitmapColorMaterial extends BitmapMaterial implements ITriangleDrawer{private var uvMatrix : Matrix;private static const BITMAP_WIDTH : int;private static const BITMAP_HEIGHT : int;public function BitmapColorMaterial (color:Number = 0xFF00FF, alpha:Number = 1);private function init () : void;public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;private function createBitmapData () : void;private function createStaticUVMatrix () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\BitmapFileMaterial.as
package org.papervision3d.materials{import flash.display.Bitmap;import flash.display.BitmapData;import flash.display.Graphics;import flash.display.Loader;import flash.events.*;import flash.geom.Matrix;import flash.net.URLRequest;import flash.system.LoaderContext;import flash.utils.Dictionary;import flash.utils.Timer;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.events.FileLoadEvent;/**
* The BitmapFileMaterial class creates a texture by loading a bitmap from an external file.	*	* Materials collect data about how objects appear when rendered.
*/
public class BitmapFileMaterial extends BitmapMaterial implements ITriangleDrawer{/**
* The URL that has been requested.
*/
public var url : String;/**
* Whether or not the texture has been loaded.
*/
public var loaded : Boolean;/**
* Function to call when the last image has loaded.
*/
public static var callback : Function;/**
* The color to use in materials before loading has finished.
*/
public static var LOADING_COLOR : int;/**
* The color to use for the lines when there is an error.
*/
public static var ERROR_COLOR : int;/**
* A temporary bitmap to use if the file hasn't loaded yet.
*/
public static var loadingBitmap : BitmapData;/**
* Sets to check for the policy file or not.
*/
public var checkPolicyFile : Boolean;/**
* Internal		 * 		 * Used to define if the loading had failed.
*/
protected var errorLoading : Boolean;protected var bitmapLoader : Loader;protected static var _waitingBitmaps : Array;protected static var _loaderUrls : Dictionary;protected static var _bitmapMaterials : Dictionary;protected static var _subscribedMaterials : Object;protected static var _loadingIdle : Boolean;/**
* A texture object.
*/
public function get texture () : Object;/**
* @private
*/
public function set texture (asset:Object) : Void;public function get subscribedMaterials () : Object;public function get bitmapMaterials () : Dictionary;/**
* The BitmapFileMaterial class creates a texture by loading a bitmap from an external file.		*		* @param	url					The URL of the requested bitmap file.
*/
public function BitmapFileMaterial (url:String = "", precise:Boolean = false);/**
* [internal-use]		*		* @param	asset		* @return
*/
protected function createBitmapFromURL (asset:String) : BitmapData;private function queueBitmap (file:String) : void;protected function loadNextBitmap () : void;protected function loadBitmapErrorHandler (e:IOErrorEvent) : void;protected function loadBitmapProgressHandler (e:ProgressEvent) : void;protected function loadBitmapCompleteHandler (e:Event) : void;protected function setupAsyncLoadCompleteCallback () : void;protected function dispatchAsyncLoadCompleteEvent (e:TimerEvent) : void;protected function loadComplete () : void;protected function removeLoaderListeners () : void;/**
*  drawFace3D
*/
public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;protected function getBitmapForFilename (filename:String) : BitmapData;public function destroy () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\BitmapMaterial.as
package org.papervision3d.materials{import org.papervision3d.Papervision3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.material.TriangleMaterial;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.materials.utils.PrecisionMode;import org.papervision3d.materials.utils.RenderRecStorage;import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import flash.geom.Point;import flash.geom.Rectangle;import flash.utils.Dictionary;/**
* The BitmapMaterial class creates a texture from a BitmapData object.	*	* Materials collect data about how objects appear when rendered.	*
*/
public class BitmapMaterial extends TriangleMaterial implements ITriangleDrawer{protected static const DEFAULT_FOCUS : Number;protected static var hitRect : Rectangle;protected var renderRecStorage : Array;protected var focus : Number;protected var _precise : Boolean;protected var _precision : int;protected var _perPixelPrecision : int;public var minimumRenderSize : Number;protected var _texture : Object;/**
* Indicates if mip mapping is forced.
*/
public static var AUTO_MIP_MAPPING : Boolean;/**
* Levels of mip mapping to force.
*/
public static var MIP_MAP_DEPTH : Number;/**
* Precision mode indicates how triangles are created for precise texture render.
*/
public var precisionMode : int;public var uvMatrices : Dictionary;/**
* @private
*/
protected static var _triMatrix : Matrix;protected static var _triMap : Matrix;/**
* @private
*/
protected static var _localMatrix : Matrix;private var x0 : Number;private var y0 : Number;private var x1 : Number;private var y1 : Number;private var x2 : Number;private var y2 : Number;protected var ax : Number;protected var ay : Number;protected var az : Number;protected var bx : Number;protected var by : Number;protected var bz : Number;protected var cx : Number;protected var cy : Number;protected var cz : Number;protected var faz : Number;protected var fbz : Number;protected var fcz : Number;protected var mabz : Number;protected var mbcz : Number;protected var mcaz : Number;protected var mabx : Number;protected var maby : Number;protected var mbcx : Number;protected var mbcy : Number;protected var mcax : Number;protected var mcay : Number;protected var dabx : Number;protected var daby : Number;protected var dbcx : Number;protected var dbcy : Number;protected var dcax : Number;protected var dcay : Number;protected var dsab : Number;protected var dsbc : Number;protected var dsca : Number;protected var dmax : Number;protected var cullRect : Rectangle;protected var tempPreGrp : Graphics;protected var tempPreBmp : BitmapData;protected var tempPreRSD : RenderSessionData;protected var tempTriangleMatrix : Matrix;private var a2 : Number;private var b2 : Number;private var c2 : Number;private var d2 : Number;private var dx : Number;private var dy : Number;private var d2ab : Number;private var d2bc : Number;private var d2ca : Number;/**
* Sets the material's precise rendering mode. If set to true, material will adaptively render triangles to conquer texture distortion.
*/
public function set precise (boolean:Boolean) : Void;public function get precise () : Boolean;/**
* If the material is rendering with @see precise to true, this sets tesselation per pixel ratio.
*/
public function set precision (precision:int) : Void;public function get precision () : int;/**
* If the material is rendering with @see precise to true, this sets tesselation per pixel ratio.		 * 		 * corrected to set per pixel precision exactly.
*/
public function set pixelPrecision (precision:int) : Void;public function get pixelPrecision () : int;/**
* A texture object.
*/
public function get texture () : Object;/**
* @private
*/
public function set texture (asset:Object) : Void;/**
* The BitmapMaterial class creates a texture from a BitmapData object.		*		* @param	asset				A BitmapData object.
*/
public function BitmapMaterial (asset:BitmapData = null, precise:Boolean = false);protected function createRenderRecStorage () : void;/**
* Resets the mapping coordinates. Use when the texture has been resized.
*/
public function resetMapping () : void;/**
*  drawTriangle
*/
public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;/**
* Applies the updated UV texture mapping values to the triangle. This is required to speed up rendering.		*
*/
public function transformUV (face3D:Triangle3D) : Matrix;/**
* Applies the updated UV texture mapping values to the triangle. This is required to speed up rendering.		*
*/
public function transformUVRT (tri:RenderTriangle) : Matrix;protected function renderRec (emMap:Matrix, v0:Vertex3DInstance, v1:Vertex3DInstance, v2:Vertex3DInstance, index:Number) : void;/**
* Returns a string value representing the material properties in the specified BitmapMaterial object.		*		* @return	A string.
*/
public function toString () : String;protected function createBitmap (asset:BitmapData) : BitmapData;protected function correctBitmap (bitmap:BitmapData) : BitmapData;protected function extendBitmapEdges (bmp:BitmapData, originalWidth:Number, originalHeight:Number) : void;/**
* resetUVMatrices();		 * 		 * Resets the precalculated uvmatrices, so they can be recalculated
*/
public function resetUVS () : void;/**
* Copies the properties of a material.		*		* @param	material	Material to copy from.
*/
public function copy (material:MaterialObject3D) : void;/**
* Creates a copy of the material.		*		* @return	A newly created material that contains the same properties.
*/
public function clone () : MaterialObject3D;public function destroy () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\BitmapViewportMaterial.as
package org.papervision3d.materials{import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.view.BitmapViewport3D;public class BitmapViewportMaterial extends BitmapMaterial implements ITriangleDrawer{public function BitmapViewportMaterial (bitmapViewport:BitmapViewport3D, precise:Boolean = false);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\BitmapWireframeMaterial.as
package org.papervision3d.materials{import flash.display.BitmapData;import flash.display.Graphics;import flash.display.Sprite;import flash.geom.Matrix;import org.papervision3d.core.material.TriangleMaterial;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;public class BitmapWireframeMaterial extends TriangleMaterial implements ITriangleDrawer{private static const BITMAP_WIDTH : int;private static const BITMAP_HEIGHT : int;private var uvMatrix : Matrix;protected static var _triMatrix : Matrix;protected static var _localMatrix : Matrix;public function BitmapWireframeMaterial (color:Number = 0xFF00FF, alpha:Number = 1, thickness:Number = 3);private function init () : void;public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;private function createBitmapData () : void;private function createStaticUVMatrix () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\ColorMaterial.as
package org.papervision3d.materials{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.material.TriangleMaterial;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;/**
* The ColorMaterial class creates a solid color material.** Materials collects data about how objects appear when rendered.*
*/
public class ColorMaterial extends TriangleMaterial implements ITriangleDrawer{/**
* The ColorMaterial class creates a solid color material.	*	* @param	asset				A BitmapData object.
*/
public function ColorMaterial (color:Number = 0xFF00FF, alpha:Number = 1, interactive:Boolean = false);/**
*  drawTriangle
*/
public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;/**
* Returns a string value representing the material properties in the specified ColorMaterial object.	*	* @return	A string.
*/
public function toString () : String;public function clone () : MaterialObject3D;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\MovieAssetMaterial.as
package org.papervision3d.materials{import flash.display.MovieClip;import flash.display.Sprite;import flash.utils.getDefinitionByName;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.render.draw.ITriangleDrawer;/**
* The MovieAssetMaterial class creates a texture from a MovieClip library symbol.
	* <p/>
	* The texture can be animated and/or transparent.
	* <p/>
	* The MovieClip's content needs to be top left aligned with the registration point.
	* <p/>
	* Materials collects data about how objects appear when rendered.
*/
public class MovieAssetMaterial extends MovieMaterial implements ITriangleDrawer{private static var _library : Object;private static var _count : Object;/**
* By default, a MovieAssetMaterial is stored and resused, but there are times where a user may want a unique copy.  set to true if you want a unique instance
		 * created
*/
public var createUnique : Boolean;/**
* A texture object.
*/
public function get texture () : Object;/**
* @private
*/
public function set texture (asset:Object) : Void;/**
* The MovieAssetMaterial class creates a texture from a MovieClip library id.
		*
		* @param	linkageID			The linkage name of the MovieClip symbol in the library.
		* @param	transparent			[optional] - If it's not transparent, the empty areas of the MovieClip will be of fill32 color. Default value is false.
*/
public function MovieAssetMaterial (linkageID:String = "", transparent:Boolean = false, animated:Boolean = false, createUnique:Boolean = false, precise:Boolean = false);/**
* since we need to pass a movieclip reference to MovieMaterial, I changed this method
		* from createBitmap, to createMovie.  the super's constructor will take care of
		* creating the actual bitmap reference
		*
*/
protected function createMovie (asset:*) : MovieClip;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\MovieMaterial.as
package org.papervision3d.materials{import flash.display.BitmapData;import flash.display.DisplayObject;import flash.display.Graphics;import flash.display.Stage;import flash.geom.Matrix;import flash.geom.Rectangle;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.core.render.material.IUpdateAfterMaterial;import org.papervision3d.core.render.material.IUpdateBeforeMaterial;/**
* The MovieMaterial class creates a texture from an existing MovieClip instance.
	* <p/>
	* The texture can be animated and/or transparent. Current scale and color values of the MovieClip instance will be used. Rotation will be discarded.
	* <p/>
	* Materials collects data about how objects appear when rendered.
*/
public class MovieMaterial extends BitmapMaterial implements ITriangleDrawer{protected var recreateBitmapInSuper : Boolean;private var materialIsUsed : Boolean;/**
* The MovieClip that is used as a texture.
*/
public var movie : DisplayObject;/**
* A Boolean value that determines whether the MovieClip is transparent. The default value is false, which is much faster.
*/
public var movieTransparent : Boolean;/**
* When updateBitmap() is called on an animated material, it looks to handle a change in size on the texture.
		* 
		* This is true by default, but in certain situations, like drawing on an object, you wouldn't want the size to change
*/
public var allowAutoResize : Boolean;private var userClipRect : Rectangle;private var autoClipRect : Rectangle;private var movieAnimated : Boolean;private var quality : String;private var stage : Stage;/**
* A Boolean value that determines whether the texture is animated.
		*
		* If set, the material must be included into the scene so the BitmapData texture can be updated when rendering. For performance reasons, the default value is false.
*/
public function get animated () : Boolean;public function set animated (status:Boolean) : Void;/**
* A texture object.
*/
public function get texture () : Object;/**
* @private
*/
public function set texture (asset:Object) : Void;/**
*  Rectangle object that defines the area of the source object to draw.
		*  
		*  When present, this property defines bitmap size overriding allowAutoResize.
		*
		*  If you do not supply this value, no clipping occurs and the entire source object is drawn.
		*
*/
public function get rect () : Rectangle;public function set rect (clipRect:Rectangle) : Void;/**
* The MovieMaterial class creates a texture from an existing MovieClip instance.
		*
		* @param	movieAsset		A reference to an existing MovieClip loaded into memory or on stage
		* @param	transparent		[optional] - If it's not transparent, the empty areas of the MovieClip will be of fill32 color. Default value is false.
		* @param	animated		[optional] - a flag setting whether or not this material has animation.  If set to true, it will be updated during each render loop
*/
public function MovieMaterial (movieAsset:DisplayObject = null, transparent:Boolean = false, animated:Boolean = false, precise:Boolean = false, rect:Rectangle = null);/**
* 
		* @param	asset
		* @return
*/
protected function createBitmapFromSprite (asset:DisplayObject) : BitmapData;protected function initBitmap (asset:DisplayObject) : void;public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;/**
* Updates animated MovieClip bitmap.
		*
		* Draws the current MovieClip image onto bitmap.
*/
public function updateBeforeRender (renderSessionData:RenderSessionData) : void;public function updateAfterRender (renderSessionData:RenderSessionData) : void;public function drawBitmap () : void;/**
* Specifies which rendering quality Flash Player uses when drawing the bitmap texture from the movie asset.
		* 
		* If not set, bitmaps are drawn using the current stage quality setting.
*/
public function setQuality (quality:String, stage:Stage, updateNow:Boolean = true) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\VideoStreamMaterial.as
package org.papervision3d.materials{import flash.display.DisplayObject;import flash.events.NetStatusEvent;import flash.geom.Matrix;import flash.media.Video;import flash.net.NetStream;import org.papervision3d.core.render.draw.ITriangleDrawer;/**
* The VideoMaterial class creates a texture from an existing Video instance and is for use with a Video and NetStream objects with an RTMP stream.	* <p/>	* The texture can be animated and/or transparent.	* <p/>	* Materials collects data about how objects appear when rendered.
*/
public class VideoStreamMaterial extends MovieMaterial implements ITriangleDrawer{/**
* The NetStream and Vdeo that are used as a texture.
*/
public var stream : NetStream;public var video : Video;/**
* The MovieMaterial class creates a texture from an existing Video instance.		*		* @param	video			A video object that display the FLV file		* @param	stream			Stream that is used to play the FLV file		* @param 	transparent		Whether we're using a transparent video or not.
*/
public function VideoStreamMaterial (video:Video, stream:NetStream, precise:Boolean = false, transparent:Boolean = false);/**
* Executes when the VideoMaterial is instantiated
*/
private function initMaterial (video:Video, stream:NetStream) : void;/**
* Updates Video Bitmap		*		* Draws the current Video frame onto bitmap.
*/
public function updateBitmap () : void;/**
* Executes when the status of the NetStream object changes		*		* @param Event that invoked the handler
*/
private function onStreamStatus (event:NetStatusEvent) : void;/**
* Returns a string value representing the material properties in the specified VideoMaterial object.		*		* @return	A string.
*/
public function toString () : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\WireframeMaterial.as
package org.papervision3d.materials{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.material.TriangleMaterial;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;/**
* The WireframeMaterial class creates a wireframe material, where only the outlines of the faces are drawn.	* <p/>	* Materials collects data about how objects appear when rendered.
*/
public class WireframeMaterial extends TriangleMaterial implements ITriangleDrawer{/**
* The WireframeMaterial class creates a wireframe material, where only the outlines of the faces are drawn.		*		* @param	asset				A BitmapData object.
*/
public function WireframeMaterial (color:Number = 0xFF00FF, alpha:Number = 1, thickness:Number = 0);/**
*  drawTriangle
*/
public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;/**
* Returns a string value representing the material properties in the specified WireframeMaterial object.		*		* @return	A string.
*/
public function toString () : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shadematerials\CellMaterial.as
package org.papervision3d.materials.shadematerials{import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.materials.utils.LightMaps;/**
* @Author Ralph Hauwert
*/
public class CellMaterial extends EnvMapMaterial{public function CellMaterial (light:LightObject3D, color_1:int, color_2:int, steps:int);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shadematerials\EnvMapMaterial.as
package org.papervision3d.materials.shadematerials{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.material.AbstractSmoothShadeMaterial;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;/**
* @Author Ralph Hauwert
*/
public class EnvMapMaterial extends AbstractSmoothShadeMaterial implements ITriangleDrawer{private static var p0 : Number;private static var q0 : Number;private static var p1 : Number;private static var q1 : Number;private static var p2 : Number;private static var q2 : Number;private static var v0 : Vertex3DInstance;private static var v1 : Vertex3DInstance;private static var v2 : Vertex3DInstance;private static var x1 : Number;private static var x0 : Number;private static var x2 : Number;private static var y0 : Number;private static var y1 : Number;private static var y2 : Number;protected var lightmapHalfheight : Number;protected var lightmapHalfwidth : Number;public var _lightMap : BitmapData;public var backenvmap : BitmapData;/**
* Localized stuff.
*/
private static var useMap : BitmapData;public function set lightMap (lightMap:BitmapData) : Void;public function get lightMap () : BitmapData;public function EnvMapMaterial (light:LightObject3D, lightMap:BitmapData, backEnvMap:BitmapData = null, ambientColor:int = 0);public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shadematerials\FlatShadeMaterial.as
package org.papervision3d.materials.shadematerials{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.material.AbstractLightShadeMaterial;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.materials.utils.LightMaps;/**
*	@Author Ralph Hauwert
*/
public class FlatShadeMaterial extends AbstractLightShadeMaterial implements ITriangleDrawer{private static var currentColor : int;private static var zAngle : int;protected var _colors : Array;/**
* Localized stuff.
*/
private static var zd : Number;private static var x0 : Number;private static var y0 : Number;public function FlatShadeMaterial (light:LightObject3D, lightColor:uint = 0xffffff, ambientColor:uint = 0x000000, specularLevel:uint = 0);public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shadematerials\GouraudMaterial.as
package org.papervision3d.materials.shadematerials{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.material.AbstractSmoothShadeMaterial;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.core.render.material.IUpdateBeforeMaterial;import org.papervision3d.materials.utils.LightMaps;/**
* @Author Ralph Hauwert
*/
public class GouraudMaterial extends AbstractSmoothShadeMaterial implements ITriangleDrawer{private var gouraudMap : BitmapData;public function GouraudMaterial (light:LightObject3D, lightColor:uint = 0xFFFFFF, ambientColor:uint = 0x000000, specularLevel:uint = 0);public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shadematerials\PhongMaterial.as
package org.papervision3d.materials.shadematerials{import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.materials.utils.LightMaps;/**
* @Author Ralph Hauwert
*/
public class PhongMaterial extends EnvMapMaterial{public function PhongMaterial (light:LightObject3D, lightColor:uint, ambientColor:uint, specularLevel:uint);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\CellShader.as
package org.papervision3d.materials.shaders{import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.materials.utils.LightMaps;/**
*@Author Ralph Hauwert
*/
public class CellShader extends EnvMapShader{public function CellShader (light:LightObject3D, color_1:int = 0xFFFFFF, color_2:int = 0x000000, steps:int = 3);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\EnvMapShader.as
package org.papervision3d.materials.shaders{import flash.display.BitmapData;import flash.display.BitmapDataChannel;import flash.display.Graphics;import flash.display.Sprite;import flash.filters.DisplacementMapFilter;import flash.filters.DisplacementMapFilterMode;import flash.geom.Matrix;import flash.geom.Point;import flash.geom.Rectangle;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.shader.ShaderObjectData;import org.papervision3d.materials.utils.BumpmapGenerator;/**
* @Author Ralph Hauwert
*/
public class EnvMapShader extends LightShader implements IShader{protected var lightmapHalfwidth : Number;protected var lightmapHalfheight : Number;private var dFilter : DisplacementMapFilter;private var _envMap : BitmapData;private var _backEnvMap : BitmapData;private var _specularMap : BitmapData;private var _bumpMap : BitmapData;private var _ambientColor : int;private static var mapOrigin : Point;private static var origin : Point;private static var triMatrix : Matrix;private static var transformMatrix : Matrix;private static var light : Number3D;private static var p0 : Number;private static var q0 : Number;private static var p1 : Number;private static var q1 : Number;private static var p2 : Number;private static var q2 : Number;private static var v0 : Vertex3DInstance;private static var v1 : Vertex3DInstance;private static var v2 : Vertex3DInstance;private static var currentGraphics : Graphics;private static var v0x : Number;private static var v0y : Number;private static var v0z : Number;private static var v1x : Number;private static var v1y : Number;private static var v1z : Number;private static var v2x : Number;private static var v2y : Number;private static var v2z : Number;private static var sod : ShaderObjectData;private static var n0 : Number3D;private static var n1 : Number3D;private static var n2 : Number3D;private static var r : Rectangle;private static var lm : Matrix3D;/**
* Localized stuff.
*/
private static var useMap : BitmapData;private static var ts : Sprite;public function set bumpmap (bumpmap:BitmapData) : Void;public function get bumpmap () : BitmapData;public function set envMap (lightMap:BitmapData) : Void;public function get envMap () : BitmapData;public function set specularMap (specularMap:BitmapData) : Void;public function get specularMap () : BitmapData;public function set ambientColor (ambient:int) : Void;public function get ambientColor () : int;public function set backenvmap (envmap:BitmapData) : Void;public function get backenvmap () : BitmapData;public function EnvMapShader (light:LightObject3D, envmap:BitmapData, backenvmap:BitmapData = null, ambientColor:int = 0x000000, bumpMap:BitmapData = null, specularMap:BitmapData = null);public function renderLayer (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;public function renderTri (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData, bmp:BitmapData) : void;public function updateAfterRender (renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\FlatShader.as
package org.papervision3d.materials.shaders{import flash.display.BitmapData;import flash.display.Graphics;import flash.display.Sprite;import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.shader.ShaderObjectData;import org.papervision3d.materials.utils.LightMaps;/**
* @Author Ralph Hauwert
*/
public class FlatShader extends LightShader implements IShader{private static var triMatrix : Matrix;private static var currentGraphics : Graphics;private static var zAngle : Number;private static var currentColor : int;private static var vx : Number;private static var vy : Number;private static var vz : Number;public var lightColor : int;public var ambientColor : int;public var specularLevel : int;private var _colors : Array;private var _colorRamp : BitmapData;/**
* Localized vars
*/
private static var zd : Number;private static var lightMatrix : Matrix3D;private static var sod : ShaderObjectData;/**
*Localized var
*/
public static var scaleMatrix : Matrix;public function FlatShader (light:LightObject3D, lightColor:int = 0xFFFFFF, ambientColor:int = 0x000000, specularLevel:int = 0);public function renderLayer (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;public function renderTri (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData, bmp:BitmapData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\GouraudShader.as
package org.papervision3d.materials.shaders{import flash.display.BitmapData;import flash.display.Graphics;import flash.display.Sprite;import flash.geom.Matrix;import flash.geom.Rectangle;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.shader.ShaderObjectData;import org.papervision3d.materials.utils.LightMaps;/**
* @Author Ralph Hauwert
*/
public class GouraudShader extends LightShader{private var _ambientColor : int;private var gouraudMap : BitmapData;private static var triMatrix : Matrix;private static var transformMatrix : Matrix;private static var light : Number3D;private static var p0 : Number;private static var q0 : Number;private static var p1 : Number;private static var q1 : Number;private static var p2 : Number;private static var q2 : Number;private static var v0 : Vertex3DInstance;private static var v1 : Vertex3DInstance;private static var v2 : Vertex3DInstance;private static var currentGraphics : Graphics;/**
* Localized vars
*/
private var lightMatrix : Matrix3D;private static var ts : Sprite;public function set ambientColor (ambient:int) : Void;public function get ambientColor () : int;public function GouraudShader (light:LightObject3D, lightColor:uint = 0xFFFFFF, ambientColor:uint = 0x000000, specularLevel:uint = 0);public function renderLayer (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;public function renderTri (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData, bmp:BitmapData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\ILightShader.as
package org.papervision3d.materials.shaders{import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.shader.ShaderObjectData;public interface ILightShader{public function updateLightMatrix (sod:ShaderObjectData, renderSessionData:RenderSessionData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\IShader.as
package org.papervision3d.materials.shaders{import flash.display.BitmapData;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.shader.ShaderObjectData;/**
* @Author Ralph Hauwert
*/
public interface IShader{public function renderLayer (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;public function renderTri (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData, bmp:BitmapData) : void;public function updateAfterRender (renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;public function destroy () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\LightShader.as
package org.papervision3d.materials.shaders{import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.shader.ShaderObjectData;import org.papervision3d.materials.utils.LightMatrix;/**
* @Author Ralph Hauwert
*/
public class LightShader extends Shader implements IShader{private var _light : LightObject3D;public function set light (light:LightObject3D) : Void;public function get light () : LightObject3D;public function LightShader ();public function updateLightMatrix (sod:ShaderObjectData, renderSessionData:RenderSessionData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\PhongShader.as
package org.papervision3d.materials.shaders{import flash.display.BitmapData;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.materials.utils.LightMaps;/**
*	@Author Ralph Hauwert
*/
public class PhongShader extends EnvMapShader{public function PhongShader (light:LightObject3D, lightColor:int, ambientColor:int = 0x000000, specularLevel:int = 0, bumpMap:BitmapData = null, specularMap:BitmapData = null);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\ShadedMaterial.as
package org.papervision3d.materials.shaders{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import flash.utils.Dictionary;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.material.TriangleMaterial;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.core.render.material.IUpdateAfterMaterial;import org.papervision3d.core.render.material.IUpdateBeforeMaterial;import org.papervision3d.core.render.shader.ShaderObjectData;import org.papervision3d.materials.BitmapMaterial;import org.papervision3d.objects.DisplayObject3D;/**
* @Author Ralph Hauwert
*/
public class ShadedMaterial extends TriangleMaterial implements ITriangleDrawer{private var _shaderCompositeMode : int;public var shader : Shader;public var material : BitmapMaterial;public var shaderObjectData : Dictionary;/**
* Localized vars
*/
private static var bmp : BitmapData;public function set shaderCompositeMode (compositeMode:int) : Void;public function get shaderCompositeMode () : int;public function ShadedMaterial (material:BitmapMaterial, shader:Shader, compositeMode:int = 0);private function init () : void;public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;public function updateBeforeRender (renderSessionData:RenderSessionData) : void;public function updateAfterRender (renderSessionData:RenderSessionData) : void;public function registerObject (displayObject3D:DisplayObject3D) : void;public function unregisterObject (displayObject3D:DisplayObject3D) : void;/**
* Debug thingy.
*/
public function getOutputBitmapDataFor (object:DisplayObject3D) : BitmapData;public function destroy () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\Shader.as
package org.papervision3d.materials.shaders{import flash.display.BitmapData;import flash.display.BlendMode;import flash.display.Sprite;import flash.events.EventDispatcher;import flash.filters.BitmapFilter;import flash.utils.Dictionary;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.shader.ShaderObjectData;import org.papervision3d.objects.DisplayObject3D;/**
* @Author Ralph Hauwert
*/
public class Shader extends EventDispatcher implements IShader{protected var _filter : BitmapFilter;protected var _blendMode : String;protected var _object : DisplayObject3D;protected var layers : Dictionary;public function set filter (filter:BitmapFilter) : Void;public function get filter () : BitmapFilter;public function set layerBlendMode (blendMode:String) : Void;public function get layerBlendMode () : String;public function Shader ();public function renderLayer (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;public function renderTri (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData, bmp:BitmapData) : void;public function destroy () : void;public function setContainerForObject (object:DisplayObject3D, layer:Sprite) : void;public function updateAfterRender (renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\ShaderCompositeModes.as
package org.papervision3d.materials.shaders{/**
* @Author Ralph Hauwert
*/
public class ShaderCompositeModes{public static var PER_LAYER : int;public static var PER_TRIANGLE_IN_BITMAP : int;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\BitmapParticleMaterial.as
package org.papervision3d.materials.special{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import flash.geom.Rectangle;import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.Number2D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.util.FastRectangleTools;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.IParticleDrawer;/**
* A Particle material that is made from BitmapData object
	 * 
	 * @author Ralph Hauwert
 	 * @author Seb Lee-Delisle
*/
public class BitmapParticleMaterial extends ParticleMaterial implements IParticleDrawer{private var renderRect : Rectangle;public var particleBitmap : ParticleBitmap;/**
* 
		 * @param bitmap	The BitmapData object to make the material from. 
		 *
*/
public function BitmapParticleMaterial (bitmap:*, scale:Number = 1, offsetx:Number = 0, offsety:Number = 0);/**
* Draws the particle as part of the render cycle. 
		 *  
		 * @param particle			The particle we're drawing
		 * @param graphics			The graphics object we're drawing into
		 * @param renderSessionData	The renderSessionData for this render cycle.
		 *
*/
public function drawParticle (particle:Particle, graphics:Graphics, renderSessionData:RenderSessionData) : void;/**
* This is called during the projection cycle. It updates the rectangular area that 
		 * the particle is drawn into. It's important for the culling phase. 
		 *  
		 * @param particle	The particle whose renderRect we're updating. 
		 *
*/
public function updateRenderRect (particle:Particle) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\CompositeMaterial.as
package org.papervision3d.materials.special{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.material.TriangleMaterial;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.objects.DisplayObject3D;public class CompositeMaterial extends TriangleMaterial implements ITriangleDrawer{public var materials : Array;public function CompositeMaterial ();private function init () : void;public function addMaterial (material:MaterialObject3D) : void;public function removeMaterial (material:MaterialObject3D) : void;public function removeAllMaterials () : void;public function registerObject (displayObject3D:DisplayObject3D) : void;public function unregisterObject (displayObject3D:DisplayObject3D) : void;public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\FogMaterial.as
package org.papervision3d.materials.special{import flash.display.Graphics;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.view.Viewport3D;public class FogMaterial{public var color : uint;public var alpha : Number;public function FogMaterial (color:uint = 0);public function draw (renderSessionData:RenderSessionData, graphics:Graphics, alpha:Number) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\Letter3DMaterial.as
package org.papervision3d.materials.special{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.objects.special.VectorShape3D;import org.papervision3d.objects.special.commands.CurveTo;import org.papervision3d.objects.special.commands.LineTo;import org.papervision3d.objects.special.commands.MoveTo;import flash.display.Graphics;/**
* @author Mark Barcinski
*/
public class Letter3DMaterial extends VectorShapeMaterial{public var scaleStroke : Boolean;private static var viewVector : Number3D;private static var normalVector : Number3D;public function Letter3DMaterial (fillColor:uint = 0xFF00FF, fillAlpha:Number = 1);public function drawShape (vectorShape:VectorShape3D, graphics:Graphics, renderSessionData:RenderSessionData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\LineMaterial.as
package org.papervision3d.materials.special{import flash.display.Graphics;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.command.RenderLine;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ILineDrawer;public class LineMaterial extends MaterialObject3D implements ILineDrawer{public function LineMaterial (color:Number = 0xFF0000, alpha:Number = 1);public function drawLine (line:RenderLine, graphics:Graphics, renderSessionData:RenderSessionData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\MovieAssetParticleMaterial.as
package org.papervision3d.materials.special{import flash.utils.Dictionary;import flash.utils.getDefinitionByName;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.render.draw.IParticleDrawer;/**
* @author Seb Lee-Delisle	 * 	 * version 0.1 of MovieAssetParticleMaterial that uses a reference to a	 * library symbol to create a particle.	 *
*/
public class MovieAssetParticleMaterial extends MovieParticleMaterial implements IParticleDrawer{public static var movieLibrary : Dictionary;private var movieAsset : Class;/**
* A Particle material that is made from a single DisplayObject (Sprite, MovieClip, etc) or a		 * Class that extends a DisplayObject (ie a library symbol)		 * 		 * v0.1 - TODO implement reusable assets in the same way as MovieAssetMaterial		 * 		 * @param linkageID		The Library symbol to make the material out of.		 * @param transparent	[optional] - whether the image is transparent or not		 * @param animated		[optional] If true, then the bitmap updates every frame. 		 * @param forceMipMap	If true, we'll make a bitmap that scales up or down to 		 * 						the nearest mip-map-able size. Thus making your particles 		 * 						appear smoother. 		 *
*/
public function MovieAssetParticleMaterial (classRef:*, transparent:Boolean = true, animated:Boolean = false);public function destroy () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\MovieParticleMaterial.as
package org.papervision3d.materials.special{import flash.display.DisplayObject;import flash.utils.Dictionary;import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.material.IUpdateBeforeMaterial;/**
* @author Seb Lee-Delisle
	 * 
	 * version 0.1 of MovieAssetParticleMaterial that uses a reference to a
	 * library symbol to create a particle.
	 *
*/
public class MovieParticleMaterial extends BitmapParticleMaterial implements IUpdateBeforeMaterial{public static var bitmapLibrary : Dictionary;/**
* The MovieClip that is used as a texture.
*/
public var movie : DisplayObject;/**
* A Boolean value that determines whether the MovieClip is transparent. The default value is true, which, 
		* although slower, is usually what you need for particles.
*/
public var movieTransparent : Boolean;public var animated : Boolean;public var actualSize : Boolean;/**
* A Particle material that is made from a single DisplayObject (Sprite, MovieClip, etc) or a
		 * Class that extends a DisplayObject (ie a library symbol)
		 * 
		 * v0.1 - TODO implement reusable assets in the same way as MovieAssetMaterial
		 * 
		 * @param linkageID		The Library symbol to make the material out of.
		 * @param transparent	[optional] - whether the image is transparent or not
		 * @param animated		[optional] NOT IMPLEMENTED YET! Please do not use!
		 * @param createUnique	If true, we'll make a bitmap especially for use with this instance of the material, otherwise we'll use a cached version (if there is one)
		 *
*/
public function MovieParticleMaterial (displayobject:DisplayObject, transparent:Boolean = true, animated:Boolean = false);public function updateParticleBitmap (scale:Number = 1, posX:Number = 0, posY:Number = 0) : void;public function updateRenderRect (particle:Particle) : void;public function updateBeforeRender (renderSessionData:RenderSessionData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\ParticleBitmap.as
package org.papervision3d.materials.special{import flash.display.BitmapData;import flash.display.DisplayObject;import flash.display.Sprite;import flash.geom.Matrix;import flash.geom.Rectangle;import org.papervision3d.core.log.PaperLogger;/**
* Used to store the bitmap for a particle material. It also stores scale and offsets for moving the registration point of the bitmap. 
	 * 
	 * @author Seb Lee-Delisle
*/
public class ParticleBitmap{public var offsetX : Number;public var offsetY : Number;public var scaleX : Number;public var scaleY : Number;public var bitmap : BitmapData;public var width : int;public var height : int;private static var drawMatrix : Matrix;private static var tempSprite : Sprite;public function ParticleBitmap (source:* = null, scale:Number = 1, forceMipMap:Boolean = false, transparent:Boolean = true);public function create (clip:DisplayObject, scale:Number = 1, transparent:Boolean = true) : BitmapData;public function createExact (clip:DisplayObject, posX:Number = 1, posY:Number = 1, scaleX:Number = 1, scaleY:Number = 1, rotation:Number = 0) : BitmapData;/**
* rounds up to the nearest MIPMAP-able size to the value you pass in. 
		 * 
		 * Kudos to Jack Lang for writing this optimised function. 
		 * 
		 * 
		 *
*/
protected function roundUpToMipMap (val:Number) : uint;/**
* Finds the nearest MIPMAP-able size to the value you pass in. 
		 * 
		 * Kudos to Jack Lang for writing this optimised function. 
		 * 
		 * 
		 *
*/
protected function getNearestMipMapSize (val:Number) : uint;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\ParticleMaterial.as
package org.papervision3d.materials.special{import flash.display.Graphics;import flash.geom.Rectangle;import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.IParticleDrawer;/**
* @Author Ralph Hauwert
	 * 
	 * updated by Seb Lee-Delisle 
	 *  - added size implementation
	 *  - added rectangle of particle for smart culling and drawing
	 *
*/
public class ParticleMaterial extends MaterialObject3D implements IParticleDrawer{public static var SHAPE_SQUARE : int;public static var SHAPE_CIRCLE : int;public var shape : int;public var scale : Number;public function ParticleMaterial (color:Number, alpha:Number, shape:int = 0, scale:Number = 1);public function drawParticle (particle:Particle, graphics:Graphics, renderSessionData:RenderSessionData) : void;public function updateRenderRect (particle:Particle) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\VectorShapeMaterial.as
package org.papervision3d.materials.special{import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.special.VectorShape3D;import org.papervision3d.objects.special.commands.IVectorShape;import flash.display.Graphics;/**
* @author Mark Barcinski
*/
public class VectorShapeMaterial extends MaterialObject3D{public function VectorShapeMaterial ();public function drawShape (vectorShape:VectorShape3D, graphics:Graphics, renderSessionData:RenderSessionData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\utils\BitmapMaterialTools.as
package org.papervision3d.materials.utils{import flash.display.Bitmap;import flash.display.BitmapData;import flash.geom.Matrix;import org.papervision3d.materials.BitmapMaterial;public class BitmapMaterialTools{public static function createBitmapMaterial (bitmapClass:Class, oneSided:Boolean = true) : BitmapMaterial;public static function getTexture (bitmapClass:Class) : BitmapData;/**
* Mirrors the bitmap over its X axis		 * 		 * @param	bitmap The bitmap to mirror.
*/
public static function mirrorBitmapX (bitmap:BitmapData) : void;/**
* Mirrors the bitmap over its Y axis		 * 		 * @param	bitmap The bitmap to mirror.
*/
public static function mirrorBitmapY (bitmap:BitmapData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\utils\BumpmapGenerator.as
package org.papervision3d.materials.utils{import flash.display.BitmapData;import flash.filters.ConvolutionFilter;import flash.geom.Point;public class BumpmapGenerator{public static function generateBumpmapFrom (bitmapData:BitmapData) : BitmapData;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\utils\LightMaps.as
package org.papervision3d.materials.utils{import flash.display.BitmapData;import flash.display.GradientType;import flash.display.Sprite;import flash.filters.BlurFilter;import flash.geom.Matrix;import flash.geom.Point;/**
* @Author Ralph Hauwert
*/
public class LightMaps{private static var origin : Point;public static function getFlatMapArray (lightColor:uint, ambientColor:uint, specularLevel:uint) : Array;public static function getFlatMap (lightColor:uint, ambientColor:uint, specularLevel:uint) : BitmapData;public static function getPhongMap (lightColor:uint, ambientColor:uint, specularLevel:uint, height:int = 255, width:int = 255) : BitmapData;public static function getGouraudMap (lightColor:uint, ambientColor:uint, specularLevel:uint) : BitmapData;public static function getGouraudMaterialMap (lightColor:uint, ambientColor:uint, specularLevel:uint) : BitmapData;public static function getCellMap (color_1:uint, color_2:uint, steps:int) : BitmapData;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\utils\LightMatrix.as
package org.papervision3d.materials.utils{import org.papervision3d.Papervision3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.lights.PointLight3D;import org.papervision3d.objects.DisplayObject3D;/**
* @Author Tim Knip / Ralph Hauwert
*/
public class LightMatrix{private static var lightMatrix : Matrix3D;private static var invMatrix : Matrix3D;private static var _targetPos : Number3D;private static var _lightPos : Number3D;private static var _lightDir : Number3D;private static var _lightUp : Number3D;private static var _lightSide : Number3D;protected static var UP : Number3D;/**
* Gets the 'lightmatrix' for a light and object.
		 * 
		 * @param	light
		 * @param	object
		 * @return
*/
public static function getLightMatrix (light:LightObject3D, object:DisplayObject3D, renderSessionData:RenderSessionData, objectLightMatrix:Matrix3D) : Matrix3D;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\utils\MaterialsList.as
package org.papervision3d.materials.utils{import flash.utils.Dictionary;import org.papervision3d.core.proto.*;/**
* The MaterialsList class contains a list of materials.	* <p/>	* Each MaterialsList object has its own materials list.
*/
public class MaterialsList{/**
* [internal-use] List of materials.
*/
protected var _materials : Dictionary;private var _materialsTotal : int;/**
* List of materials indexed by name.
*/
public var materialsByName : Dictionary;/**
* Returns the number of children of this object.
*/
public function get numMaterials () : int;/**
* Creates a list of materials.		*		* @param	materials	An array or name indexed object with materials to populate the list with.
*/
public function MaterialsList (materials:* = null);/**
* Adds a material to this MaterialsList object.		*		* @param	material	The material to add.		* @param	name		An optional name of the material. If no name is provided, the material name will be used.		* @return	The material you have added.
*/
public function addMaterial (material:MaterialObject3D, name:String = null) : MaterialObject3D;/**
* Removes the specified material from the materials list.		*		* @param	material	The material to remove.		* @return	The material you have removed.
*/
public function removeMaterial (material:MaterialObject3D) : MaterialObject3D;/**
* Returns the material that exists with the specified name.		* </p>		* @param	name	The name of the material to return.		* @return	The material with the specified name.
*/
public function getMaterialByName (name:String) : MaterialObject3D;/**
* Removes the material that exists with the specified name.		* </p>		* The material object is garbage collected if no other references to the material exist.		* </p>		* The garbage collector is the process by which Flash Player reallocates unused memory space. When a variable or object is no longer actively referenced or stored somewhere, the garbage collector sweeps through and wipes out the memory space it used to occupy if no other references to it exist.		* </p>		* @param	name	The name of the material to remove.		* @return	The material object that was removed.
*/
public function removeMaterialByName (name:String) : MaterialObject3D;/**
* Creates a copy of the materials list.		*		* @return	A newly created materials list that contains a duplicate of each of its materials.
*/
public function clone () : MaterialsList;/**
* Returns a string with the names of the materials in the list.		*		* @return	A string.
*/
public function toString () : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\utils\PrecisionMode.as
package org.papervision3d.materials.utils{/**
* @Author Ralph Hauwert
*/
public class PrecisionMode{/**
* Original precision mode.
*/
public static var ORIGINAL : int;public static var STABLE : int;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\utils\RenderRecStorage.as
package org.papervision3d.materials.utils{import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Vertex3DInstance;public class RenderRecStorage{public var v0 : Vertex3DInstance;public var v1 : Vertex3DInstance;public var v2 : Vertex3DInstance;public var mat : Matrix;public function RenderRecStorage ();}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\DisplayObject3D.as
package org.papervision3d.objects{import flash.display.BlendMode;import org.papervision3d.Papervision3D;import org.papervision3d.core.culling.FrustumTestMethod;import org.papervision3d.core.data.UserData;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.material.AbstractLightShadeMaterial;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.Quaternion;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.proto.DisplayObjectContainer3D;import org.papervision3d.core.proto.GeometryObject3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.proto.SceneObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.shaders.ShadedMaterial;import org.papervision3d.materials.utils.MaterialsList;import org.papervision3d.view.Viewport3D;import org.papervision3d.view.layer.ViewportLayer;/**
* The DisplayObject class represents instances of 3D objects that are contained in the scene.	* <p/>	* That includes all objects in the scene, not only those that can be rendered, but also the camera and its target.	* <p/>	* The DisplayObject3D class supports basic functionality like the x, y and z position of an object, as well as rotationX, rotationY, rotationZ, scaleX, scaleY and scaleZ and visible. It also supports more advanced properties of the object such as its transform Matrix3D.	* <p/>	* <p/>	* DisplayObject3D is not an abstract base class; therefore, you can call DisplayObject3D directly. Invoking new DisplayObject() creates a new empty object in 3D space, like when you used createEmptyMovieClip().	*
*/
public class DisplayObject3D extends DisplayObjectContainer3D{/**
* tells Mesh3D's render() method to sort by measuring from the center of a triangle
*/
public static const MESH_SORT_CENTER : uint;/**
* tells Mesh3D's render() method to sort by measuring from the farthest point of a triangle
*/
public static const MESH_SORT_FAR : uint;/**
* tells Mesh3D's render() method to sort by measuring from the closest point of a triangle
*/
public static const MESH_SORT_CLOSE : uint;/**
* A Matrix3D object containing values that affect the scaling, rotation, and translation of the display object.
*/
public var transform : Matrix3D;/**
* [internal-use] A camera transformed Matrix3D object.
*/
public var view : Matrix3D;/**
* World transformation.
*/
public var world : Matrix3D;/**
* [internal-use]
*/
public var faces : Array;/**
* This allows objects faces to have their own containers.
*/
public static var faceLevelMode : Boolean;public static var sortedArray : Array;/**
* The GeometryObject3D object that contains the 3D definition of this instance.		* <p/>		* When different objects share the same geometry, they become instances. They are the same object, displayed multiple times. Changing the shape of this object changes the shape of all of its instances.		* <p/>		* Instancing an object saves system memory, and is useful to display an object multiple times while maintaining its shape.		* <p/>		* For example, you could create armies and forests full of duplicate objects without needing the memory to handle that much actual geometry. Each instance has its own transform node so it can have its own position, rotation, and scaling.
*/
public var geometry : GeometryObject3D;/**
* [internal-use] The average depth of the object faces center. Used internally for z-sorting.
*/
public var screenZ : Number;/**
* [internal use] Is this object culled by camera frustum?
*/
public var culled : Boolean;/**
* The list of materials for this instance.
*/
public var materials : MaterialsList;/**
* tells Mesh3D's render() method to compare the measurement choice of the user for a triangle's sorting
*/
public var meshSort : uint;public var container : ViewportLayer;public var alpha : Number;public var blendMode : String;public var filters : Array;public var parentContainer : DisplayObject3D;public var flipLightDirection : Boolean;public var frustumTestMethod : int;/**
* [read-only] Indicates the DisplayObjectContainer3D object that contains this display object.
*/
public var parent : DisplayObjectContainer3D;/**
* [read-only] The coordinate of the object on screen.
*/
public var screen : Number3D;/**
* Whether or not the display object is visible.		* <p/>		* A Boolean value that indicates whether the object is projected, transformed and rendered. A value of false will effectively ignore the object. The default value is true.
*/
public var visible : Boolean;/**
* An optional object name.
*/
public var name : String;/**
* [read-only] Unique id of this instance.
*/
public var id : int;/**
* An object that contains user defined properties.		* <p/>		* All properties of the extra field are copied into the new instance. The properties specified with extra are publicly available.
*/
public var extra : Object;public var cullTest : Number;public var useClipping : Boolean;public var testQuad : Boolean;/**
* Relative directions.
*/
private static const FORWARD : Number3D;private static const BACKWARD : Number3D;private static const LEFT : Number3D;private static const RIGHT : Number3D;private static const UP : Number3D;private static const DOWN : Number3D;private static var _tempMatrix : Matrix3D;private static var _tempQuat : Quaternion;private static var _newID : int;private static var toDEGREES : Number;private static var toRADIANS : Number;private static var entry_count : uint;/**
* [internal-use]
*/
protected var _transformDirty : Boolean;protected var _sorted : Array;protected var _useOwnContainer : Boolean;protected var _userData : UserData;/**
* The scene where the object belongs.
*/
protected var _scene : SceneObject3D;/**
* pre-made Number3Ds and Matrix3Ds for use in the lookAt function		 * and others		 *
*/
private var _position : Number3D;private var _lookatTarget : Number3D;private var _zAxis : Number3D;private var _xAxis : Number3D;private var _yAxis : Number3D;private var _rotation : Number3D;private var _rotationDirty : Boolean;private var _rotationX : Number;private var _rotationY : Number;private var _rotationZ : Number;private var _scaleX : Number;private var _scaleY : Number;private var _scaleZ : Number;private var _scaleDirty : Boolean;private var _tempScale : Number3D;private var _numClones : uint;private var _material : MaterialObject3D;private var _rot : Quaternion;private var _qPitch : Quaternion;private var _qYaw : Quaternion;private var _qRoll : Quaternion;private var _localRotationX : Number;private var _localRotationY : Number;private var _localRotationZ : Number;private var _autoCalcScreenCoords : Boolean;/**
* Returns an empty DiplayObject3D object positioned in the center of the 3D coordinate system (0, 0 ,0).
*/
public static function get ZERO () : DisplayObject3D;public function set useOwnContainer (value:Boolean) : Void;public function get useOwnContainer () : Boolean;public function set userData (userData:UserData) : Void;public function get userData () : UserData;/**
* An Number that sets the X coordinate of a object relative to the origin of its parent.
*/
public function get x () : Number;public function set x (value:Number) : Void;/**
* An Number that sets the Y coordinate of a object relative to the origin of its parent.
*/
public function get y () : Number;public function set y (value:Number) : Void;/**
* An Number that sets the Z coordinate of a object relative to the origin of its parent.
*/
public function get z () : Number;public function set z (value:Number) : Void;/**
* A Number3D containing the current x, y, and z of the DisplayObject3D
*/
public function get position () : Number3D;public function set position (n:Number3D) : Void;/**
* Specifies the rotation around the X axis from its original orientation.
*/
public function get rotationX () : Number;public function set rotationX (rot:Number) : Void;/**
* Specifies the rotation around the Y axis from its original orientation.
*/
public function get rotationY () : Number;public function set rotationY (rot:Number) : Void;/**
* Specifies the rotation around the Z axis from its original orientation.
*/
public function get rotationZ () : Number;public function set rotationZ (rot:Number) : Void;/**
* Sets the 3D scale as applied from the registration point of the object.
*/
public function get scale () : Number;public function set scale (scale:Number) : Void;/**
* Sets the scale along the local X axis as applied from the registration point of the object.
*/
public function get scaleX () : Number;public function set scaleX (scale:Number) : Void;/**
* Sets the scale along the local Y axis as applied from the registration point of the object.
*/
public function get scaleY () : Number;public function set scaleY (scale:Number) : Void;/**
* Sets the scale along the local Z axis as applied from the registration point of the object.
*/
public function get scaleZ () : Number;public function set scaleZ (scale:Number) : Void;/**
* The X coordinate of a object relative to the scene coordinate system.
*/
public function get sceneX () : Number;/**
* The Y coordinate of a object relative to the scene coordinate system.
*/
public function get sceneY () : Number;/**
* The Z coordinate of a object relative to the scene coordinate system.
*/
public function get sceneZ () : Number;/**
* The default material for the object instance. Materials collect data about how objects appear when rendered.
*/
public function set material (material:MaterialObject3D) : Void;public function get material () : MaterialObject3D;public function set scene (p_scene:SceneObject3D) : Void;public function get scene () : SceneObject3D;public function set autoCalcScreenCoords (autoCalculateScreenCoords:Boolean) : Void;public function get autoCalcScreenCoords () : Boolean;/**
* Rotate the display object around its lateral or transverse axis —an axis running from the pilot's left to right in piloted aircraft, and parallel to the wings of a winged aircraft; thus the nose pitches up and the tail down, or vice-versa.		*		* @param	angle	The angle to rotate.
*/
public function set localRotationX (angle:Number) : Void;public function get localRotationX () : Number;/**
* Rotate the display object around about the vertical axis —an axis drawn from top to bottom.		*		* @param	angle	The angle to rotate.
*/
public function set localRotationY (angle:Number) : Void;public function get localRotationY () : Number;/**
* Rotate the display object around the longitudinal axis —an axis drawn through the body of the vehicle from tail to nose in the normal direction of flight, or the direction the object is facing.		*		* @param	angle
*/
public function set localRotationZ (angle:Number) : Void;public function get localRotationZ () : Number;/**
* Creates a new DisplayObject3D instance. After creating the instance, call the addChild() method of a DisplayObjectContainer3D.		*		* @param	name		[optional] - The name of the newly created object.		* @param	geometry	[optional] - The geometry of the newly created object.		*		* <ul>		* <li><b>x</b></b>: An Number that sets the X coordinate of a object relative to the scene coordinate system.</li>		* <p/>		* <li><b>y</b>: An Number that sets the Y coordinate of a object relative to the scene coordinate system.</li>		* <p/>		* <li><b>z</b>: An Number that sets the Z coordinate of a object relative to the scene coordinate system.</li>		* <p/>		* <li><b>rotationX</b>: Specifies the rotation around the X axis from its original orientation.</li>		* <p/>		* <li><b>rotationY</b>: Specifies the rotation around the Y axis from its original orientation.</li>		* <p/>		* <li><b>rotationZ</b>: Specifies the rotation around the Z axis from its original orientation.</li>		* <p/>		* <li><b>scaleX</b>: Sets the scale along the local X axis as applied from the registration point of the object.</li>		* <p/>		* <li><b>scaleY</b>: Sets the scale along the local Y axis as applied from the registration point of the object.</li>		* <p/>		* <li><b>scaleZ</b>: Sets the scale along the local Z axis as applied from the registration point of the object.</li>		* <p/>		* <li><b>visible</b>: Whether or not the display object is visible.		* <p/>		* A Boolean value that indicates whether the object is projected, transformed and rendered. A value of false will effectively ignore the object. The default value is true.</li>		* <p/>		* <li><b>container</b>: The MovieClip that you draw into when rendering. Use only when the object is rendered in its own unique MovieClip.		* <p/>		* It's Boolean value determines whether the container MovieClip should be cleared before rendering.</li>		* <p/>		* <li><b>extra</b>: An object that contains user defined properties.		* <p/>		* All properties of the extra field are copied i
*/
public function DisplayObject3D (name:String = null, geometry:GeometryObject3D = null);/**
* Adds a child DisplayObject3D instance to this DisplayObjectContainer instance.		*		* [TODO: If you add a child object that already has a different display object container as a parent, the object is removed from the child list of the other display object container.]		*		* @param	child	The DisplayObject3D instance to add as a child of this DisplayObjectContainer3D instance.		* @param	name	An optional name of the child to add or create. If no name is provided, the child name will be used.		* @return	The DisplayObject3D instance that you have added or created.
*/
public function addChild (child:DisplayObject3D, name:String = null) : DisplayObject3D;/**
* Adds a geometry definition to the instance.		*		* A geometry describes the visual shape and appearance of an object in a scene.		*		* @param	geometry	A geometry definition.
*/
public function addGeometry (geometry:GeometryObject3D = null) : void;/**
* Clones this object.		 * 		 * @return	The cloned DisplayObject3D.
*/
public function clone () : DisplayObject3D;/**
* Gets the distance to the position of the given object.		*		* @param	obj		The display object to measure the distance to.		* @return	The distance to the registration point of the given object.
*/
public function distanceTo (obj:DisplayObject3D) : Number;/**
* Evaluates the display object to see if it overlaps or intersects with the point specified by the x, y and z parameters.		* <p/>		* The x, y and z parameters specify a point in the coordinate space of the instance parent object, not the scene (unless that parent object is the scene).		*		* @param	x	The x coordinate to test against this object.		* @param	y	The y coordinate to test against this object.		* @param	z	The z coordinate to test against this object.		* @return	true if the display object overlaps or intersects with the specified point; false otherwise.
*/
public function hitTestPoint (x:Number, y:Number, z:Number) : Boolean;/**
* Evaluates the display object to see if it overlaps or intersects with the obj display object.		*		* @param	obj	 The display object to test against.		* @return	true if the display objects intersect; false if not.
*/
public function hitTestObject (obj:DisplayObject3D, multiplier:Number = 1) : Boolean;/**
* Returns the material that exists with the specified name in the materials list.		* </p>		* If more that one material object has the specified name, the method returns the first material object in the materials list.		* </p>		* @param	name	The name of the material to return.		* @return	The material object with the specified name.
*/
public function getMaterialByName (name:String) : MaterialObject3D;/**
* Returns a string value with the list of material names of the materials list.		*		* @return	A string.
*/
public function materialsList () : String;/**
* Replaces a material by its name.		 * 		 * @param	material		 * @param	name		 * @return
*/
public function replaceMaterialByName (material:MaterialObject3D, name:String) : void;/**
* Sets the material for a child DisplayObject3D.		 * 		 * @param child		A child DisplayObject3D of this DAE.		 * @param material	The new material for the child.		 * @param existingMaterial Optional existing material to be replaced.
*/
public function setChildMaterial (child:DisplayObject3D, material:MaterialObject3D, existingMaterial:MaterialObject3D = null) : void;/**
* Sets the material for a child DisplayObject3D by the child's name.		 * 		 * @param childName The name of the DisplayObject3D.		 * @param material	The new material for the child.
*/
public function setChildMaterialByName (childName:String, material:MaterialObject3D) : void;/**
* 		 * @param	do3d		 * @param	existingMaterial		 * @param	newMaterial
*/
private function updateMaterials (do3d:DisplayObject3D, existingMaterial:MaterialObject3D, newMaterial:MaterialObject3D) : void;/**
* [internal-use] Projects three dimensional coordinates onto a two dimensional plane to simulate the relationship of the camera to subject.		* <p/>		* This is the first step in the process of representing three dimensional shapes two dimensionally.		*	 	* @param	parent	The DisplayObject3D object that contains this display object.		* @param	renderSessionData Data for the current render.
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
*
*/
public function calculateScreenCoords (camera:CameraObject3D) : void;/**
* Translate the display object in the direction it is facing, i.e. it's positive Z axis.		*		* @param	distance	The distance that the object should move forward.
*/
public function moveForward (distance:Number) : void;/**
* Translate the display object in the opposite direction it is facing, i.e. it's negative Z axis.		*		* @param	distance	The distance that the object should move backward.
*/
public function moveBackward (distance:Number) : void;/**
* Translate the display object lateraly, to the left of the direction it is facing, i.e. it's negative X axis.		*		* @param	distance	The distance that the object should move left.
*/
public function moveLeft (distance:Number) : void;/**
* Translate the display object lateraly, to the right of the direction it is facing, i.e. it's positive X axis.		*		* @param	distance	The distance that the object should move right.
*/
public function moveRight (distance:Number) : void;/**
* Translate the display object upwards, with respect to the direction it is facing, i.e. it's positive Y axis.		*		* @param	distance	The distance that the object should move up.
*/
public function moveUp (distance:Number) : void;/**
* Translate the display object downwards, with respect to the direction it is facing, i.e. it's negative Y axis.		*		* @param	distance	The distance that the object should move down.
*/
public function moveDown (distance:Number) : void;/**
* Move the object along a given direction.		*		* @param	distance	The distance that the object should travel.		* @param	axis		The direction that the object should move towards.
*/
public function translate (distance:Number, axis:Number3D) : void;/**
* Rotate the display object around its lateral or transverse axis —an axis running from the pilot's left to right in piloted aircraft, and parallel to the wings of a winged aircraft; thus the nose pitches up and the tail down, or vice-versa.		*		* @param	angle	The angle to rotate.
*/
public function pitch (angle:Number) : void;/**
* Rotate the display object around about the vertical axis —an axis drawn from top to bottom.		*		* @param	angle	The angle to rotate.
*/
public function yaw (angle:Number) : void;/**
* Rotate the display object around the longitudinal axis —an axis drawn through the body of the vehicle from tail to nose in the normal direction of flight, or the direction the object is facing.		*		* @param	angle
*/
public function roll (angle:Number) : void;/**
* Make the object look at a specific position.		*		* @param	targetObject	Object to look at.		* @param	upAxis			The vertical axis of the universe. Normally the positive Y axis.
*/
public function lookAt (targetObject:DisplayObject3D, upAxis:Number3D = null) : void;/**
* Copies the position information (x, y and z coordinates) from another object or Matrix3D.		*		* @param	reference	A DisplayObject3D or Matrix3D object to copy the position from.
*/
public function copyPosition (reference:*) : void;/**
* Copies the transformation information (position, rotation and scale) from another object or Matrix3D.		*		* @param	reference	A DisplayObject3D or Matrix3D object to copy the position from.
*/
public function copyTransform (reference:*) : void;/**
* Returns a string value representing the three-dimensional position values of the display object instance.		*		* @return	A string.
*/
public function toString () : String;public function createViewportLayer (viewport:Viewport3D, recurse:Boolean = true) : ViewportLayer;public function addChildrenToLayer (do3d:DisplayObject3D, layer:ViewportLayer) : void;protected function setParentContainer (parent:DisplayObject3D, assign:Boolean = true) : void;/**
* [internal-use] Updates the transform Matrix3D with the current rotation and scale values.
*/
public function updateTransform () : void;private function updateRotation () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\Ase.as
package org.papervision3d.objects.parsers{import flash.events.*;import flash.net.URLLoader;import flash.net.URLRequest;import org.papervision3d.core.geom.*;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.*;import org.papervision3d.events.FileLoadEvent;/**
* The Ase class lets you load and parse ASE format objects exported from 3DS Max.	* <p/>	* Only the geometry and mapping of one mesh is currently parsed.	* <p/>	* For more complex objects, it is recommended to import Collada scenes with addCollada method.
*/
public class Ase extends TriangleMesh3D{/**
* Whether or not the scene has been loaded.
*/
public var loaded : Boolean;/**
* Default scaling value for constructor.
*/
public static var DEFAULT_SCALING : Number;/**
* Internal scaling value.
*/
public static var INTERNAL_SCALING : Number;private var _scaleAse : Number;private var _loaderAse : URLLoader;private var _filename : String;/**
* Creates a new Ase object that will load and parse a 3DS Max exported .ASE mesh.		* <p/>		* Only the geometry and mapping of one mesh is currently parsed.		* <p/>		* @param	material	A MaterialObject3D object that contains the material properties of the object.		* <p/>		* @param	filename	Filename of the .ASE object to parse.		* <p/>		* @param	scale		Scaling factor.		* <p/>
*/
public function Ase (material:MaterialObject3D, filename:String, scale:Number = 1);private function loadAse (filename:String) : void;/**
* Taken from w3d at http://blog.andre-michelle.com/2005/flash8-sourcecodes		* By Andre Michelle, with much respect
*/
private function parseAse (e:Event) : void;private function ioErrorHandler (event:IOErrorEvent) : void;private function progressHandler (event:ProgressEvent) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\Collada.as
package org.papervision3d.objects.parsers{import flash.events.Event;import flash.events.IOErrorEvent;import flash.events.ProgressEvent;import flash.events.SecurityErrorEvent;import flash.net.URLLoader;import flash.net.URLRequest;import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.DisplayObjectContainer3D;import org.papervision3d.core.proto.GeometryObject3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.events.FileLoadEvent;import org.papervision3d.materials.BitmapFileMaterial;import org.papervision3d.materials.utils.MaterialsList;import org.papervision3d.objects.DisplayObject3D;/**
* The Collada class lets you load and parse Collada scenes.	* <p/>	* Recommended DCC Settings:	* <ul><li><b>Maya</b>:	* <ul><li>General Export Options	* <ul><li>Relative Paths, Triangulate.</li></ul>	* <li>Filter Export	* <ul><li>Polygon meshes, Normals, Texture Coordinates.</li></ul>	* </li></ul>	* <li><b>3DS Max</b>:	* <ul><li>Standard Options	* <ul><li>Relative Paths.</li></ul>	* <li>Geometry	* <ul><li>Normals, Triangulate.</li></ul>	* </li></ul>
*/
public class Collada extends DisplayObject3D{/**
* Default scaling value for constructor.
*/
public static var DEFAULT_SCALING : Number;/**
* Internal scaling value.
*/
private static var INTERNAL_SCALING : Number;/**
* Whether or not the scene has been loaded.
*/
public var loaded : Boolean;public var materialsToLoad : int;private static var COLLADASECTION : String;private static var LIBRARYSECTION : String;private static var ASSETSECTION : String;private static var SCENESECTION : String;private static var LIGHTPREFAB : String;private static var CAMERAPREFAB : String;private static var MATERIALSECTION : String;private static var GEOMETRYSECTION : String;private static var MESHSECTION : String;private static var SOURCESECTION : String;private static var ARRAYSECTION : String;private static var ACCESSORSECTION : String;private static var VERTICESSECTION : String;private static var INPUTTAG : String;private static var POLYGONSSECTION : String;private static var POLYGON : String;private static var NODESECTION : String;private static var LOOKATNODE : String;private static var MATRIXNODE : String;private static var PERSPECTIVENODE : String;private static var ROTATENODE : String;private static var SCALENODE : String;private static var TRANSLATENODE : String;private static var SKEWNODE : String;private static var INSTANCENODE : String;private static var INSTACESCENE : String;private static var PARAMTAG : String;private static var POSITIONINPUT : String;private static var VERTEXINPUT : String;private static var NORMALINPUT : String;private static var TEXCOORDINPUT : String;private static var UVINPUT : String;private static var TANGENTINPUT : String;private var COLLADA : XML;private var _container : DisplayObjectContainer3D;private var _geometries : Object;private var _loader : URLLoader;private var _filename : String;private var _materials : MaterialsList;private var _scaling : Number;private var _yUp : Boolean;private var _doubleSidedMaterials : Boolean;private static var toDEGREES : Number;private static var toRADIANS : Number;/**
* Creates a new Collada object.		* <p/>		* The Collada class lets you load and parse a Collada scene.		* <p/>		* COLLADA is a COLLAborative Design Activity for establishing an interchange file format for interactive 3D applications.		* <p/>		* COLLADA defines an open standard XML schema for exchanging digital assets among various container software applications that might otherwise store their assets in incompatible formats.		* <p/>		* COLLADA documents that describe digital assets are XML files, usually identified with a .dae (digital asset exchange) filename extension.		* <p/>		* @param	COLLADA		An XML COLLADA object or the filename of the .dae scene to load.		* <p/>		* @param	materials	A MaterialsList object.		* <p/>		* @param	scale		Scaling factor.		* <p/>		* @param	doubleSided		Whether to make all materials doubleSided.		* <p/>
*/
public function Collada (COLLADA:* = null, materials:MaterialsList = null, scale:Number = 1, doubleSided:Boolean = false);/**
* Loads the COLLADA.		* 		* @param	COLLADA		An XML COLLADA object or the filename of the .dae scene to load.		* <p/>		* @param	materials	A MaterialsList object.		* <p/>		* @param	scale		Scaling factor.		* <p/>		* @param	doubleSided		Whether to make all materials doubleSided.
*/
public function load (COLLADA:*, materials:MaterialsList = null, scale:Number = 1, doubleSided:Boolean = false) : void;private function loadCollada () : void;private function handleLoadProgress (e:ProgressEvent) : void;private function handleIOError (e:IOErrorEvent) : void;private function handleSecurityLoadError (e:SecurityErrorEvent) : void;private function onComplete (evt:Event) : void;private function buildCollada () : void;private function parseScene (scene:XML) : void;private function parseNode (node:XML, parent:DisplayObjectContainer3D) : void;private function parseGeometry (geometry:XML, instance:DisplayObject3D, matrix2:Matrix3D = null, bindMaterial:Object = null) : void;private function buildObject (semantics:Object, instance:DisplayObject3D, matrix:Matrix3D = null) : void;private function getArray (spaced:String) : Array;private function addMaterial (instance:DisplayObject3D, name:String, bindMaterial:Object) : void;private function onMaterialLoadComplete (event:FileLoadEvent) : void;private function onMaterialLoadError (event:FileLoadEvent) : void;private function getTexture (name:String) : String;private function rotateMatrix (vector:Array) : Matrix3D;private function translateMatrix (vector:Array) : Matrix3D;private function scaleMatrix (vector:Array) : Matrix3D;private function bakedMatrix (matrix:Matrix3D) : Matrix3D;private function deserialize (input:XML, geo:XML) : Array;public function getMaterialsList () : MaterialsList;private function getId (url:String) : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\DAE.as
package org.papervision3d.objects.parsers{import org.papervision3d.core.animation.channel.Channel3D;import flash.events.Event;import flash.events.IOErrorEvent;import flash.events.ProgressEvent;import flash.system.Capabilities;import flash.utils.ByteArray;import flash.utils.Dictionary;import org.ascollada.ASCollada;import org.ascollada.core.*;import org.ascollada.fx.*;import org.ascollada.io.DaeReader;import org.ascollada.namespaces.*;import org.ascollada.types.*;import org.papervision3d.Papervision3D;import org.papervision3d.core.animation.IAnimatable;import org.papervision3d.core.animation.IAnimationProvider;import org.papervision3d.core.animation.channel.controller.MorphWeightChannel3D;import org.papervision3d.core.animation.channel.geometry.VertexChannel3D;import org.papervision3d.core.animation.channel.transform.*;import org.papervision3d.core.animation.clip.AnimationClip3D;import org.papervision3d.core.animation.key.LinearCurveKey3D;import org.papervision3d.core.animation.curve.Curve3D;import org.papervision3d.core.controller.*;import org.papervision3d.core.geom.*;import org.papervision3d.core.geom.renderables.*;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.material.AbstractLightShadeMaterial;import org.papervision3d.core.math.*;import org.papervision3d.core.proto.*;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.events.FileLoadEvent;import org.papervision3d.materials.*;import org.papervision3d.materials.shaders.ShadedMaterial;import org.papervision3d.materials.special.*;import org.papervision3d.materials.utils.*;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.objects.special.Skin3D;/**
* The DAE class represents a parsed COLLADA 1.4.1 file.	 * 	 * <p>Typical use case:</p>	 * <pre>	 * var dae :DAE = new DAE();	 * 	 * dae.addEventListener(FileLoadEvent.LOAD_COMPLETE, myOnLoadCompleteHandler);	 * 	 * dae.load( "path/to/collada" );	 * </pre>	 * 	 * <p>Its possible to pass you own materials via a MaterialsList:</p>	 * <pre>	 * var materials :MaterialsList = new MaterialsList();	 * 	 * materials.addMaterial( new ColorMaterial(), "MyMaterial" );	 * 	 * var dae :DAE = new DAE();	 * 	 * dae.addEventListener(FileLoadEvent.LOAD_COMPLETE, myOnLoadCompleteHandler);	 * 	 * dae.load( "path/to/collada", materials );	 * </pre>	 * <p>Note that in above case you need the material names as specified in your 3D modelling application.	 * The material names can also be found by looking at the COLLADA file: find the xml elements 	 * &lt;instance_material symbol="MyMaterialName" target="SomeTarget" /&gt;. The material names are specified	 * by the symbol attribute of this element.</p>	 * 	 * <p>A COLLADA file can contain animations. Animations take a long time to parse, hence 	 * animations are parsed asynchroniously. Listen for FileLoadEvent.ANIMATIONS_COMPLETE and 	 * FileLoadEvent.ANIMATIONS_PROGRESS:</p>	 * <pre>	 * var dae :DAE = new DAE();	 * 	 * dae.addEventListener(FileLoadEvent.LOAD_COMPLETE, myOnLoadCompleteHandler);	 * dae.addEventListener(FileLoadEvent.ANIMATIONS_COMPLETE, myOnAnimationsCompleteHandler);	 * dae.addEventListener(FileLoadEvent.ANIMATIONS_PROGRESS, myOnAnimationsProgressHandler);	 * 	 * dae.load( "path/to/collada" );	 * </pre>	 * 	 * @author Tim Knip
*/
public class DAE extends DisplayObject3D implements IAnimatable{public static const ROOTNODE_NAME : String;/**
Default line color for splines.
*/
public static var DEFAULT_LINE_COLOR : uint;/**
Default line width for splines
*/
public static var DEFAULT_LINE_WIDTH : Number;/**
change this to a value > 0 if you're DAE is picking the wrong coordinates
*/
public var forceCoordSet : int;/**
The loaded XML.
*/
public var COLLADA : XML;/**
The filename - if applicable.
*/
public var filename : String;/**
The filetitle - if applicable.
*/
public var fileTitle : String;/**
Base url.
*/
public var baseUrl : String;/**
The COLLADA parser.
*/
public var parser : DaeReader;/**
The DaeDocument. @see org.ascollada.core.DaeDocument
*/
public var document : DaeDocument;/**

*/
protected var _animation : AnimationController;/**

*/
protected var _colladaID : Dictionary;/**

*/
protected var _colladaSID : Dictionary;/**

*/
protected var _colladaIDToObject : Object;/**

*/
protected var _colladaSIDToObject : Object;/**

*/
protected var _objectToNode : Object;/**

*/
protected var _rootNode : DisplayObject3D;/**

*/
protected var _autoPlay : Boolean;/**

*/
protected var _rightHanded : Boolean;/**

*/
protected var _controllers : Array;protected var _playerType : String;protected var _loop : Boolean;protected var _fileSearchPaths : Array;private static var _numClone : int;/**
* Gets / sets the animation controller.		 * 		 * @see org.papervision3d.core.controller.AnimationController
*/
public function set animation (value:AnimationController) : Void;public function get animation () : AnimationController;/**
* Gets all controlllers.		 * 		 * @return	Array of controllers.		 * 		 * @see org.papervision3d.core.controller.IObjectController		 * @see org.papervision3d.core.controller.AnimationController		 * @see org.papervision3d.core.controller.MorphController		 * @see org.papervision3d.core.controller.SkinController
*/
public function get controllers () : Array;public function set controllers (value:Array) : Void;/**
* Whether the animation is playing. This property is read-only.		 * 		 * @return True when playing.
*/
public function get playing () : Boolean;/**
Whether the COLLADA uses Y-up, Z-up otherwise.
*/
public function get yUp () : Boolean;public function set rootNode (value:DisplayObject3D) : Void;public function get rootNode () : DisplayObject3D;/**
* Constructor.		 * 		 * @param	autoPlay	Whether to start the _animation automatically.		 * @param	name	Optional name for the DAE.
*/
public function DAE (autoPlay:Boolean = true, name:String = null, loop:Boolean = false);/**
* Pauses the animation.
*/
public function pause () : void;/**
* Plays the animation.		 * 		 * @param 	clip	Clip to play. Default is "all"		 * @param 	loop	Whether the animation should loop. Default is true.
*/
public function play (clip:String = "all", loop:Boolean = true) : void;/**
* Resumes a paused animation.		 * 		 * @param loop 	Whether the animation should loop. Defaults is true.
*/
public function resume (loop:Boolean = true) : void;/**
* Stops the animation.
*/
public function stop () : void;/**
*
*/
public function addFileSearchPath (path:String) : void;/**
*
*/
public function clone () : DisplayObject3D;private function getObjectByTransform (object:DisplayObject3D, transform:Matrix3D) : DisplayObject3D;/**
* Loads the COLLADA.		 * 		 * @param	asset The url, an XML object or a ByteArray specifying the COLLADA file.		 * @param	materials	An optional materialsList.
*/
public function load (asset:*, materials:MaterialsList = null, asynchronousParsing:Boolean = false) : void;/**
* Removes a child.		 * 		 * @param	child	The child to remove		 * 		 * @return	The removed child
*/
public function removeChild (child:DisplayObject3D) : DisplayObject3D;/**
* Project.		 * 		 * @param	parent		 * @param	renderSessionData		 * 		 * @return	Number
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
*
*/
protected function buildAnimatedTransforms (object:DisplayObject3D, node:DaeNode, channels:Array, bakeChannels:Boolean = true) : void;/**
* Builds animated vertices if needed. 		 * NOTE: this is a Feeling specific feature. Its not part of the COLLADA 1.4.1 spec.		 * 		 * @param target		 * @param vertices
*/
protected function buildAnimatedVertices (target:TriangleMesh3D, vertices:DaeVertices) : void;/**
*
*/
protected function buildAnimationClips () : void;/**
* Builds the _animation for an object and its children.		 * 		 * @param object
*/
protected function buildAnimations (object:DisplayObject3D) : void;/**
* Links the controllers to the objects.		 * 		 * @param instance
*/
protected function buildControllers (instance:DisplayObject3D = null) : void;/**
* 		 * @param	asset		 * @return
*/
protected function buildFileInfo (asset:*) : void;/**
*
*/
protected function buildGeometry (target:TriangleMesh3D, daeGeometry:DaeGeometry, daeBindMaterial:DaeBindMaterial) : void;/**
*
*/
protected function buildGeometryLines (target:Lines3D, daeGeometry:DaeGeometry, daeBindMaterial:DaeBindMaterial) : void;/**
*
*/
protected function buildMaterialInstance (daeInstanceMaterial:DaeInstanceMaterial, outBVI:DaeBindVertexInput) : MaterialObject3D;/**
* Builds a Matrix3D from a node's transform array. @see org.ascollada.core.DaeNode#transforms		 * 		 * @param	node		 * 		 * @return
*/
protected function buildMatrix (node:DaeNode) : Matrix3D;/**
* 		 * @param	node		 * @return
*/
protected function buildMatrixFromTransform (transform:DaeTransform) : Matrix3D;/**
* 		 * @param	node		 * @return
*/
protected function buildMatrixStack (node:DaeNode) : Array;/**
*
*/
protected function buildMesh (node:DaeNode) : DisplayObject3D;/**
* Builds a morph controller.		 * 		 * @param instance		 * @param morph		 * @param bindMaterial		 * 		 * @return
*/
protected function buildMorphController (instance:TriangleMesh3D, morph:DaeMorph) : MorphController;/**
* Builds a DisplayObject3D from a node. @see org.ascollada.core.DaeNode		 * 		 * @param	node			 * 		 * @return	The created DisplayObject3D. @see org.papervision3d.objects.DisplayObject3D
*/
protected function buildNode (node:DaeNode, parent:DisplayObject3D) : void;/**
* Builds a primitive.		 * 		 * @param mesh		 * @param daePrimitive		 * @param daeInstanceMaterial		 * @param vertexStart
*/
protected function buildPrimitive (mesh:TriangleMesh3D, daePrimitive:DaePrimitive, daeInstanceMaterial:DaeInstanceMaterial, vertexStart:int) : void;/**
* Builds the scene.
*/
protected function buildScene () : void;/**
* Builds a skin controller.		 * 		 * @param instance		 * @param skin
*/
protected function buildSkinController (instance:DisplayObject3D, skin:DaeSkin) : SkinController;/**
* Builds vertices from a COLLADA mesh.		 * 		 * @param	mesh	The COLLADA mesh. @see org.ascollada.core.DaeMesh		 * 		 * @return	Array of Vertex3D
*/
protected function buildVertices (mesh:DaeMesh) : Array;/**
* Called when the parser completed parsing animations.		 * 		 * @param	event
*/
protected function onParseAnimationsComplete (event:Event = null) : void;/**
* Called on parse animations progress.		 * 		 * @param	event
*/
protected function onParseAnimationsProgress (event:ProgressEvent) : void;/**
* Called when the DaeReader completed parsing.		 * 		 * @param	event
*/
protected function onParseComplete (event:Event) : void;/**
* Called on parsing error (invalid file name)		 * 		 * @param	event
*/
protected function onParseError (event:IOErrorEvent) : void;/**
* Called on parsing progress.		 * 		 * @param	event
*/
protected function onParseProgress (event:ProgressEvent) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\KMZ.as
package org.papervision3d.objects.parsers{import nochump.util.zip.*;import org.ascollada.namespaces.*;import org.papervision3d.core.geom.*;import org.papervision3d.events.FileLoadEvent;import org.papervision3d.materials.*;import org.papervision3d.materials.utils.*;import flash.display.Bitmap;import flash.display.Loader;import flash.events.*;import flash.net.URLLoader;import flash.net.URLLoaderDataFormat;import flash.net.URLRequest;import flash.utils.*;/**
* @author Tim Knip
*/
public class KMZ extends TriangleMesh3D{/**
The DAE
*/
public var dae : DAE;/**

*/
private var _loadedTextures : uint;/**

*/
private var _totalTextures : uint;/**

*/
private var _loadedDAE : ByteArray;/**
* Constructor.
*/
public function KMZ (name:String = null);/**
* Loads a KMZ.
		 *
		 * @param	asset	URL or ByteArray.
*/
public function load (asset:*, materials:MaterialsList = null) : void;private function progressHandler (event:ProgressEvent) : void;private function securityErrorHandler (event:SecurityErrorEvent) : void;private function httpStatusHandler (event:HTTPStatusEvent) : void;private function ioErrorHandler (event:IOErrorEvent) : void;/**
* Gets the COLLADA from the zip.
		 *
		 * @param	zipFile
*/
private function getColladaFromZip (zipFile:ZipFile) : ByteArray;/**
* The KMZ was successfully loaded.
		 *
		 * @param 	event
*/
private function onLoadComplete (event:Event) : void;/**
* A texture was successfully loaded.
		 *
		 * @param 	event
*/
private function onTextureComplete (event:Event = null) : void;/**
*
*/
private function onColladaComplete (event:Event) : void;/**
* Parse the KMZ data.
		 *
		 * @param	data
*/
private function parse (data:ByteArray) : void;/**
* Gets the number of textures inside a zip.
		 *
		 * @param	zipFile
		 *
		 * @return	The number of textures.
*/
private function numTexturesInZip (zipFile:ZipFile) : uint;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\Max3DS.as
package org.papervision3d.objects.parsers{import flash.events.Event;import flash.events.IOErrorEvent;import flash.net.URLLoader;import flash.net.URLLoaderDataFormat;import flash.net.URLRequest;import flash.utils.ByteArray;import flash.utils.Endian;import org.papervision3d.Papervision3D;import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.events.FileLoadEvent;import org.papervision3d.materials.BitmapFileMaterial;import org.papervision3d.materials.ColorMaterial;import org.papervision3d.materials.utils.MaterialsList;import org.papervision3d.objects.DisplayObject3D;/**
* 3DS File parser.
	 * 
	 * @author Tim Knip (based on Away3D's Max3DS class : http://away3d.com)
*/
public class Max3DS extends DisplayObject3D{/**

*/
public var filename : String;public const AMBIENT : String;public const DIFFUSE : String;public const SPECULAR : String;public const PRIMARY : int;public const EDIT3DS : int;public const KEYF3DS : int;public const VERSION : int;public const MESH_VERSION : int;public const KFVERSION : int;public const COLOR_F : int;public const COLOR_RGB : int;public const LIN_COLOR_24 : int;public const LIN_COLOR_F : int;public const INT_PERCENTAGE : int;public const FLOAT_PERC : int;public const MASTER_SCALE : int;public const IMAGE_FILE : int;public const AMBIENT_LIGHT : int;public const MESH : int;public const MESH_OBJECT : int;public const MESH_VERTICES : int;public const VERTEX_FLAGS : int;public const MESH_FACES : int;public const MESH_MATER : int;public const MESH_TEX_VERT : int;public const MESH_XFMATRIX : int;public const MESH_COLOR_IND : int;public const MESH_TEX_INFO : int;public const HEIRARCHY : int;public const MATERIAL : int;public const MAT_NAME : int;public const MAT_AMBIENT : int;public const MAT_DIFFUSE : int;public const MAT_SPECULAR : int;public const MAT_SHININESS : int;public const MAT_FALLOFF : int;public const MAT_EMISSIVE : int;public const MAT_SHADER : int;public const MAT_TEXMAP : int;public const MAT_TEXFLNM : int;public const OBJ_LIGHT : int;public const OBJ_CAMERA : int;public const ANIM_HEADER : int;public const ANIM_OBJ : int;public const ANIM_NAME : int;public const ANIM_POS : int;public const ANIM_ROT : int;public const ANIM_SCALE : int;private var _data : ByteArray;private var _textureDir : String;private var _textureExtensionReplacements : Object;/**
* Constuctor
		 * 
		 * @param	name
*/
public function Max3DS (name:String = null);/**
* Load.
		 * 
		 * @param	asset
		 * @param	materials
		 * @param	textureDir
*/
public function load (asset:*, materials:MaterialsList = null, textureDir:String = "./image/") : void;/**
* Replaces a texture extension with an alternative extension.
		 * 
		 * @param	originalExtension	For example "bmp", "gif", etc
		 * @param	preferredExtension	For example "png"
*/
public function replaceTextureExtension (originalExtension:String, preferredExtension:String = "png") : void;/**
* Build a mesh
		 * 
		 * @param	meshData
*/
private function buildMesh (meshData:MeshData) : void;/**
* 
		 * @param	event
*/
private function onFileLoadComplete (event:Event = null) : void;/**
* 
		 * @param	event
*/
private function onFileLoadError (event:IOErrorEvent) : void;/**
* Parse.
		 * 
		 * @param	data
*/
private function parse (data:ByteArray) : void;/**
* Read the base 3DS object.
		 * 
		 * @param chunk
		 *
*/
private function parse3DS (chunk:Chunk3ds) : void;/**
* Read the Edit chunk
		 * 
		 * @param chunk
*/
private function parseEdit3DS (chunk:Chunk3ds) : void;/**
* Read a material chunk.
		 * 
		 * @param	chunk
*/
private function parseMaterial (chunk:Chunk3ds) : String;private function parseMesh (chunk:Chunk3ds, meshData:MeshData) : void;/**
* 
		 * @param	chunk
*/
private function readMeshFaces (chunk:Chunk3ds) : Array;/**
* Read the Mesh Material chunk
		 * 
		 * @param chunk
*/
private function readMeshMaterial (chunk:Chunk3ds, meshData:MeshData) : void;/**
* 
		 * @param	chunk
		 *
		 * @return
*/
private function readMeshTexVert (chunk:Chunk3ds) : Array;/**
* 
		 * @param	chunk
*/
private function readMeshVertices (chunk:Chunk3ds) : Array;/**
* Reads a null-terminated ascii string out of a byte array.
		 * 
		 * @param data The byte array to read from.
		 * 
		 * @return The string read, without the null-terminating character.
*/
private function readASCIIZString (data:ByteArray) : String;/**
*
*/
private function readColor (colorChunk:Chunk3ds) : int;/**
* Read Scaled Color
		 * 
		 * @param	chunk
*/
private function readColorScale (chunk:Chunk3ds) : int;/**
* Read RGB
		 * 
		 * @param	chunk
*/
private function readColorRGB (chunk:Chunk3ds) : int;/**
* Read id and length of 3ds chunk
		 * 
		 * @param chunk
*/
private function readChunk (chunk:Chunk3ds) : void;/**
* Skips past a chunk. If we don't understand the meaning of a chunk id,
		 * we just skip past it.
		 * 
		 * @param chunk
*/
private function skipChunk (chunk:Chunk3ds) : void;}internal class Chunk3ds{public var id : int;public var length : int;public var bytesRead : int;}internal class MeshData{public var name : String;public var vertices : Array;public var faces : Array;public var uvs : Array;public var materials : Array;}internal class MaterialData{public var name : String;public var faces : Array;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\MD2.as
package org.papervision3d.objects.parsers{import org.papervision3d.Papervision3D;import flash.events.Event;import flash.events.ProgressEvent;import flash.net.URLLoader;import flash.net.URLLoaderDataFormat;import flash.net.URLRequest;import flash.utils.ByteArray;import flash.utils.Endian;import org.papervision3d.core.animation.IAnimatable;import org.papervision3d.core.animation.IAnimationProvider;import org.papervision3d.core.animation.clip.AnimationClip3D;import org.papervision3d.core.controller.IControllerProvider;import org.papervision3d.core.controller.IObjectController;import org.papervision3d.core.animation.key.LinearCurveKey3D;import org.papervision3d.core.animation.curve.Curve3D;import org.papervision3d.core.animation.channel.geometry.VerticesChannel3D;import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.controller.AnimationController;import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.*;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.events.FileLoadEvent;import org.papervision3d.objects.DisplayObject3D;/**
* Loads Quake 2 MD2 file with animation!	 * </p>Please feel free to use, but please mention me!</p>	 * 	 * @author Philippe Ajoux (philippe.ajoux@gmail.com) adapted by Tim Knip(tim.knip at gmail.com).	 * @website www.d3s.net	 * @version 04.11.07:11:56
*/
public class MD2 extends TriangleMesh3D implements IAnimatable{/**
*
*/
protected var _animation : AnimationController;/**
*
*/
protected var _controllers : Array;/**
* Variables used in the loading of the file
*/
protected var file : String;protected var loader : URLLoader;protected var loadScale : Number;/**
* MD2 Header data		 * These are all the variables found in the md2_header_t		 * C style struct that starts every MD2 file.
*/
protected var ident : int;protected var version : int;protected var skinwidth : int;protected var skinheight : int;protected var framesize : int;protected var num_skins : int;protected var num_vertices : int;protected var num_st : int;protected var num_tris : int;protected var num_glcmds : int;protected var num_frames : int;protected var offset_skins : int;protected var offset_st : int;protected var offset_tris : int;protected var offset_frames : int;protected var offset_glcmds : int;protected var offset_end : int;protected var _fps : int;protected var _autoPlay : Boolean;/**
* Gets / sets the animation controller.		 * 		 * @see org.papervision3d.core.controller.AnimationController
*/
public function set animation (value:AnimationController) : Void;public function get animation () : AnimationController;/**
* Gets / sets all controlllers.		 * 		 * @return	Array of controllers.		 * 		 * @see org.papervision3d.core.controller.IObjectController		 * @see org.papervision3d.core.controller.AnimationController		 * @see org.papervision3d.core.controller.MorphController		 * @see org.papervision3d.core.controller.SkinController
*/
public function set controllers (value:Array) : Void;public function get controllers () : Array;/**
* Whether the animation is playing. This property is read-only.		 * 		 * @return True when playing.
*/
public function get playing () : Boolean;/**
* Constructor.		 * 		 * @param	autoPlay	Whether to start the _animation automatically.
*/
public function MD2 (autoPlay:Boolean = true);/**
* Pauses the animation.
*/
public function pause () : void;/**
* Plays the animation.		 * 		 * @param 	clip	Clip to play. Default is "all"		 * @param 	loop	Whether the animation should loop. Default is true.
*/
public function play (clip:String = "all", loop:Boolean = true) : void;/**
* Resumes a paused animation.		 * 		 * @param loop 	Whether the animation should loop. Defaults is true.
*/
public function resume (loop:Boolean = true) : void;/**
* Stops the animation.
*/
public function stop () : void;/**
* Loads the MD2.		 * 		 * @param	asset	URL or ByteArray		 * @param	material	The material for the MD2		 * @param	fps		Frames per second		 * @param	scale	Scale
*/
public function load (asset:*, material:MaterialObject3D = null, fps:int = 6, scale:Number = 1) : void;/**
* Project.		 * 		 * @param	parent		 * @param	renderSessionData		 * 		 * @return	Number
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* <p>Parses the MD2 file. This is actually pretty straight forward.		 * Only complicated parts (bit convoluded) are the frame loading		 * and "metaface" loading. Hey, it works, use it =)</p>		 * 		 * @param	data	A ByteArray
*/
protected function parse (data:ByteArray) : void;/**
* Reads in all the frames
*/
protected function readFrames (data:ByteArray) : void;/**
* Reads in all that MD2 Header data that is declared as private variables.		 * I know its a lot, and it looks ugly, but only way to do it in Flash
*/
protected function readMd2Header (data:ByteArray) : void;/**
*
*/
protected function loadCompleteHandler (event:Event) : void;/**
* 		 * @param	event		 * @return
*/
protected function loadProgressHandler (event:ProgressEvent) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\Sketchup.as
package org.papervision3d.objects.parsers{import flash.display.Bitmap;import flash.display.Loader;import flash.events.Event;import flash.net.URLRequest;import flash.net.URLStream;import flash.utils.ByteArray;import nochump.util.zip.ZipEntry;import nochump.util.zip.ZipFile;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.materials.BitmapMaterial;import org.papervision3d.materials.utils.MaterialsList;import org.papervision3d.objects.DisplayObject3D;public class Sketchup extends DisplayObject3D{public var model : SketchupCollada;private var allMaterials : MaterialsList;private var count : Number;private var COLLADA : XML;private var totalMaterials : Number;private var _scale : Number;public function Sketchup (kmz:String);private function completeHandler (event:Event) : void;private function loadBitmapCompleteHandler (e:Event) : void;private function build () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\SketchupCollada.as
package org.papervision3d.objects.parsers{import flash.events.Event;import flash.events.IOErrorEvent;import flash.events.ProgressEvent;import flash.events.SecurityErrorEvent;import flash.net.URLLoader;import flash.net.URLRequest;import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.DisplayObjectContainer3D;import org.papervision3d.core.proto.GeometryObject3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.events.FileLoadEvent;import org.papervision3d.materials.BitmapFileMaterial;import org.papervision3d.materials.utils.MaterialsList;import org.papervision3d.objects.DisplayObject3D;/**
* The Collada class lets you load and parse Collada scenes.	* <p/>	* Recommended DCC Settings:	* <ul><li><b>Maya</b>:	* <ul><li>General Export Options	* <ul><li>Relative Paths, Triangulate.</li></ul>	* <li>Filter Export	* <ul><li>Polygon meshes, Normals, Texture Coordinates.</li></ul>	* </li></ul>	* <li><b>3DS Max</b>:	* <ul><li>Standard Options	* <ul><li>Relative Paths.</li></ul>	* <li>Geometry	* <ul><li>Normals, Triangulate.</li></ul>	* </li></ul>
*/
public class SketchupCollada extends DisplayObject3D{/**
* Default scaling value for constructor.
*/
public static var DEFAULT_SCALING : Number;/**
* Internal scaling value.
*/
private static var INTERNAL_SCALING : Number;/**
* Whether or not the scene has been loaded.
*/
public var loaded : Boolean;public var materialsToLoad : int;private static var COLLADASECTION : String;private static var LIBRARYSECTION : String;private static var ASSETSECTION : String;private static var SCENESECTION : String;private static var LIGHTPREFAB : String;private static var CAMERAPREFAB : String;private static var MATERIALSECTION : String;private static var GEOMETRYSECTION : String;private static var MESHSECTION : String;private static var SOURCESECTION : String;private static var ARRAYSECTION : String;private static var ACCESSORSECTION : String;private static var VERTICESSECTION : String;private static var INPUTTAG : String;private static var POLYGONSSECTION : String;private static var POLYGON : String;private static var NODESECTION : String;private static var LOOKATNODE : String;private static var MATRIXNODE : String;private static var PERSPECTIVENODE : String;private static var ROTATENODE : String;private static var SCALENODE : String;private static var TRANSLATENODE : String;private static var SKEWNODE : String;private static var INSTANCENODE : String;private static var INSTACESCENE : String;private static var PARAMTAG : String;private static var POSITIONINPUT : String;private static var VERTEXINPUT : String;private static var NORMALINPUT : String;private static var TEXCOORDINPUT : String;private static var UVINPUT : String;private static var TANGENTINPUT : String;private var COLLADA : XML;private var _container : DisplayObjectContainer3D;private var _geometries : Object;private var _loader : URLLoader;private var _filename : String;private var _materials : MaterialsList;private var _scaling : Number;private var _yUp : Boolean;private static var toDEGREES : Number;private static var toRADIANS : Number;/**
* Creates a new Collada object.		* <p/>		* The Collada class lets you load and parse a Collada scene.		* <p/>		* COLLADA is a COLLAborative Design Activity for establishing an interchange file format for interactive 3D applications.		* <p/>		* COLLADA defines an open standard XML schema for exchanging digital assets among various container software applications that might otherwise store their assets in incompatible formats.		* <p/>		* COLLADA documents that describe digital assets are XML files, usually identified with a .dae (digital asset exchange) filename extension.		* <p/>		* @param	COLLADA		An XML COLLADA object or the filename of the .dae scene to load.		* <p/>		* @param	materials	A MaterialsList object.		* <p/>		* @param	scale		Scaling factor.		* <p/>
*/
public function SketchupCollada (COLLADA:*, materials:MaterialsList = null, scale:Number = 1);private function loadCollada () : void;private function handleLoadProgress (e:ProgressEvent) : void;private function handleIOError (e:IOErrorEvent) : void;private function handleSecurityLoadError (e:SecurityErrorEvent) : void;private function onComplete (evt:Event) : void;private function buildCollada () : void;private function parseScene (scene:XML) : void;private function parseNode (node:XML, parent:DisplayObjectContainer3D) : void;private function parseGeometry (geometry:XML, instance:DisplayObject3D, matrix2:Matrix3D = null, bindMaterial:Object = null) : void;private function buildObject (semantics:Object, instance:DisplayObject3D, matrix:Matrix3D = null) : void;private function getArray (spaced:String) : Array;private function addMaterial (instance:DisplayObject3D, name:String, bindMaterial:Object) : void;private function onMaterialLoadComplete (event:FileLoadEvent) : void;private function onMaterialLoadError (event:FileLoadEvent) : void;private function getTexture (name:String) : String;private function rotateMatrix (vector:Array) : Matrix3D;private function translateMatrix (vector:Array) : Matrix3D;private function scaleMatrix (vector:Array) : Matrix3D;private function bakedMatrix (matrix:Matrix3D) : Matrix3D;private function deserialize (input:XML, geo:XML) : Array;public function getMaterialsList () : MaterialsList;private function getId (url:String) : String;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\primitives\Arrow.as
package org.papervision3d.objects.primitives{import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.MaterialObject3D;public class Arrow extends TriangleMesh3D{public var verts : Array;public var faceAr : Array;public var uvs : Array;private function v (x:Number, y:Number, z:Number) : void;private function uv (u:Number, v:Number) : void;private function f (vn0:int, vn1:int, vn2:int, uvn0:int, uvn1:int, uvn2:int) : void;public function Arrow (material:MaterialObject3D = null);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\primitives\Cone.as
package org.papervision3d.objects.primitives{import org.papervision3d.core.proto.*;/**
* The Cone class lets you create and display Cones.	* <p/>	* The Cone is divided in vertical and horizontal segment, the smallest combination is two vertical and three horizontal segments.
*/
public class Cone extends Cylinder{/**
* Create a new Cone object.		* <p/>		* @param	material	A MaterialObject3D object that contains the material properties of the object.		* <p/>		* @param	radius		[optional] - Desired radius.		* <p/>		* @param	height		[optional] - Desired height.		* <p/>		* @param	segmentsW	[optional] - Number of segments horizontally. Defaults to 8.		* <p/>		* @param	segmentsH	[optional] - Number of segments vertically. Defaults to 6.		* <p/>
*/
public function Cone (material:MaterialObject3D = null, radius:Number = 100, height:Number = 100, segmentsW:int = 8, segmentsH:int = 6);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\primitives\Cube.as
package org.papervision3d.objects.primitives{import org.papervision3d.Papervision3D;import org.papervision3d.core.geom.*;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.*;import org.papervision3d.materials.utils.MaterialsList;/**
* The Cube class lets you create and display flat rectangle objects.	* <p/>	* The rectangle can be divided in smaller segments. This is usually done to reduce linear mapping artifacts.	* <p/>	* Dividing the Cube in the direction of the perspective or vanishing point, helps to reduce this problem. Perspective distortion dissapears when the Cube is facing straignt to the camera, i.e. it is perpendicular with the vanishing point of the scene.
*/
public class Cube extends TriangleMesh3D{/**
* Number of segments per axis. Defaults to 1.
*/
public var segments : Number3D;/**
* No faces selected.
*/
public static var NONE : int;/**
* Front face selection
*/
public static var FRONT : int;/**
* Back face selection
*/
public static var BACK : int;/**
* Right face selection
*/
public static var RIGHT : int;/**
* Left face selection
*/
public static var LEFT : int;/**
* Top face selection
*/
public static var TOP : int;/**
* Bottom face selection
*/
public static var BOTTOM : int;/**
* All faces selected.
*/
public static var ALL : int;private var insideFaces : int;private var excludeFaces : int;/**
* Create a new Cube object.		* <p/>		* @param	materials	A MaterialObject3D object that contains the material properties of the object.		* 		* Supported materials are: front, back, right, left, top, bottom & all, for example: 		* 		*	var materials:MaterialsList = new MaterialsList(		*	{		*		all:	new MovieAssetMaterial( "Front", true ), // This is the default material		*		front:  new MovieAssetMaterial( "Front", true ),		*		back:   new MovieAssetMaterial( "Back", true ),		*		right:  new MovieAssetMaterial( "Right", true ),		*		left:   new MovieAssetMaterial( "Left", true ),		*		top:    new MovieAssetMaterial( "Top", true ),		*		bottom: new MovieAssetMaterial( "Bottom", true )		*	} );		* 		* <p/>		* @param	width			[optional] - Desired width.		* <p/>		* @param	depth			[optional] - Desired depth.		* <p/>		* @param	height			[optional] - Desired height.		* <p/>		* @param	segmentsS		[optional] - Number of segments sagitally (plane perpendicular to width). Defaults to 1.		* <p/>		* @param	segmentsT		[optional] - Number of segments transversally (plane perpendicular to depth). Defaults to segmentsS.		* <p/>		* @param	segmentsH		[optional] - Number of segments horizontally (plane perpendicular to height). Defaults to segmentsS.		* <p/>		* @param	insideFaces		[optional] - Faces that are visible from the inside. Defaults to Cube.NONE.		*		* You can add or sustract faces to your selection. For examples: Cube.FRONT+Cube.BACK or Cube.ALL-Cube.Top.		* 		* <p/>		* @param	excludeFaces	[optional] - Faces that will not be created. Defaults to Cube.NONE.		* 		* You can add or sustract faces to your selection. For examples: Cube.FRONT+Cube.BACK or Cube.ALL-Cube.Top.		* 		* <p/>
*/
public function Cube (materials:MaterialsList, width:Number = 500, depth:Number = 500, height:Number = 500, segmentsS:int = 1, segmentsT:int = 1, segmentsH:int = 1, insideFaces:int = 0, excludeFaces:int = 0);protected function buildCube (width:Number, height:Number, depth:Number) : void;protected function buildPlane (mat:String, u:String, v:String, width:Number, height:Number, depth:Number, reverse:Boolean = false) : void;public function destroy () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\primitives\Cylinder.as
package org.papervision3d.objects.primitives{import org.papervision3d.Papervision3D;import org.papervision3d.core.geom.*;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.*;/**
* The Cylinder class lets you create and display Cylinders.	* <p/>	* The Cylinder is divided in vertical and horizontal segment, the smallest combination is two vertical and three horizontal segments.
*/
public class Cylinder extends TriangleMesh3D{/**
* Number of segments horizontally. Defaults to 8.
*/
public var segmentsW : Number;/**
* Number of segments vertically. Defaults to 6.
*/
public var segmentsH : Number;/**
* Default radius of Cylinder if not defined.
*/
public static const DEFAULT_RADIUS : Number;/**
* Default height if not defined.
*/
public static const DEFAULT_HEIGHT : Number;/**
* Default scale of Cylinder texture if not defined.
*/
public static const DEFAULT_SCALE : Number;/**
* Default value of gridX if not defined.
*/
public static const DEFAULT_SEGMENTSW : Number;/**
* Default value of gridY if not defined.
*/
public static const DEFAULT_SEGMENTSH : Number;/**
* Minimum value of gridX.
*/
public static const MIN_SEGMENTSW : Number;/**
* Minimum value of gridY.
*/
public static const MIN_SEGMENTSH : Number;/**
* Create a new Cylinder object.		* <p/>		* @param	material	A MaterialObject3D object that contains the material properties of the object.		* <p/>		* @param	radius		[optional] - Desired radius.		* <p/>		* @param	segmentsW	[optional] - Number of segments horizontally. Defaults to 8.		* <p/>		* @param	segmentsH	[optional] - Number of segments vertically. Defaults to 6.		* <p/>		* @param	topRadius	[optional] - An optional parameter for con- or diverging cylinders.		* <p/>		* @param	topFace		[optional] - An optional parameter specifying if the top face of the cylinder should be drawn.		* <p/>		* @param	bottomFace	[optional] - An optional parameter specifying if the bottom face of the cylinder should be drawn.		* <p/>
*/
public function Cylinder (material:MaterialObject3D = null, radius:Number = 100, height:Number = 100, segmentsW:int = 8, segmentsH:int = 6, topRadius:Number = -1, topFace:Boolean = true, bottomFace:Boolean = true);private function buildCylinder (fRadius:Number, fHeight:Number, fTopRadius:Number, fTopFace:Boolean, fBottomFace:Boolean) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\primitives\PaperPlane.as
package org.papervision3d.objects.primitives{import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.proto.MaterialObject3D;/**
* The PaperPlane class lets you create a paper plane object.	* <p/>	* Paper planes are useful for testing, when you want to know the direction an object is facing.
*/
public class PaperPlane extends TriangleMesh3D{/**
* Default value of segments.
*/
public static var DEFAULT_SCALE : Number;/**
* Creates a new PaperPlane object.		* <p/>		* @param	material	A Material3D object that contains the material properties of the object.		* <p/>		* @param	scale		[optional] - Scaling factor		* <p/>
*/
public function PaperPlane (material:MaterialObject3D = null, scale:Number = 0);private function buildPaperPlane (scale:Number) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\primitives\Plane.as
package org.papervision3d.objects.primitives{import org.papervision3d.Papervision3D;import org.papervision3d.core.geom.*;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.*;/**
* The Plane class lets you create and display flat rectangle objects.	* <p/>	* The rectangle can be divided in smaller segments. This is usually done to reduce linear mapping artifacts.	* <p/>	* Dividing the plane in the direction of the perspective or vanishing point, helps to reduce this problem. Perspective distortion dissapears when the plane is facing straignt to the camera, i.e. it is perpendicular with the vanishing point of the scene.
*/
public class Plane extends TriangleMesh3D{/**
* Number of segments horizontally. Defaults to 1.
*/
public var segmentsW : Number;/**
* Number of segments vertically. Defaults to 1.
*/
public var segmentsH : Number;/**
* Default size of Plane if not texture is defined.
*/
public static var DEFAULT_SIZE : Number;/**
* Default size of Plane if not texture is defined.
*/
public static var DEFAULT_SCALE : Number;/**
* Default value of gridX if not defined. The default value of gridY is gridX.
*/
public static var DEFAULT_SEGMENTS : Number;/**
* Create a new Plane object.		* <p/>		* @param	material	A MaterialObject3D object that contains the material properties of the object.		* <p/>		* @param	width		[optional] - Desired width or scaling factor if there's bitmap texture in material and no height is supplied.		* <p/>		* @param	height		[optional] - Desired height.		* <p/>		* @param	segmentsW	[optional] - Number of segments horizontally. Defaults to 1.		* <p/>		* @param	segmentsH	[optional] - Number of segments vertically. Defaults to segmentsW.		* <p/>
*/
public function Plane (material:MaterialObject3D = null, width:Number = 0, height:Number = 0, segmentsW:Number = 0, segmentsH:Number = 0);private function buildPlane (width:Number, height:Number) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\primitives\Sphere.as
package org.papervision3d.objects.primitives{import org.papervision3d.Papervision3D;import org.papervision3d.core.geom.*;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.*;/**
* The Sphere class lets you create and display spheres.	* <p/>	* The sphere is divided in vertical and horizontal segment, the smallest combination is two vertical and three horizontal segments.
*/
public class Sphere extends TriangleMesh3D{/**
* Number of segments horizontally. Defaults to 8.
*/
private var segmentsW : Number;/**
* Number of segments vertically. Defaults to 6.
*/
private var segmentsH : Number;/**
* Default radius of Sphere if not defined.
*/
public static var DEFAULT_RADIUS : Number;/**
* Default scale of Sphere texture if not defined.
*/
public static var DEFAULT_SCALE : Number;/**
* Default value of gridX if not defined.
*/
public static var DEFAULT_SEGMENTSW : Number;/**
* Default value of gridY if not defined.
*/
public static var DEFAULT_SEGMENTSH : Number;/**
* Minimum value of gridX.
*/
public static var MIN_SEGMENTSW : Number;/**
* Minimum value of gridY.
*/
public static var MIN_SEGMENTSH : Number;/**
* Create a new Sphere object.		* <p/>		* @param	material	A MaterialObject3D object that contains the material properties of the object.		* <p/>		* @param	radius		[optional] - Desired radius.		* <p/>		* @param	segmentsW	[optional] - Number of segments horizontally. Defaults to 8.		* <p/>		* @param	segmentsH	[optional] - Number of segments vertically. Defaults to 6.		* <p/>
*/
public function Sphere (material:MaterialObject3D = null, radius:Number = 100, segmentsW:int = 8, segmentsH:int = 6);private function buildSphere (fRadius:Number) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\Graphics3D.as
package org.papervision3d.objects.special{import org.papervision3d.core.proto.GeometryObject3D;import flash.display.BitmapData;import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.objects.special.commands.BeginFill;import org.papervision3d.objects.special.commands.CurveTo;import org.papervision3d.objects.special.commands.EndFill;import org.papervision3d.objects.special.commands.LineStyle;import org.papervision3d.objects.special.commands.LineTo;import org.papervision3d.objects.special.commands.MoveTo;import org.papervision3d.objects.DisplayObject3D;/**
* @author Mark Barcinski
*/
public class Graphics3D{private var vectorshape : VectorShape3D;public function Graphics3D (vectorshape:VectorShape3D);public function beginFill (color:uint, alpha:Number = 1) : void;public function endFill () : void;public function curveTo (controlX:Number, controlY:Number, anchorX:Number, anchorY:Number) : void;public function lineTo (x:Number, y:Number) : void;public function moveTo (x:Number, y:Number) : void;public function lineStyle (thickness:Number = -1, color:uint = 0, alpha:Number = 1.0, pixelHinting:Boolean = false, scaleMode:String = "normal", caps:String = null, joints:String = null, miterLimit:Number = 3) : void;public function drawRect (x:Number, y:Number, width:Number, height:Number) : void;public function drawRoundRect (x:Number, y:Number, width:Number, height:Number, ellipseWidth:Number, ellipseHeight:Number) : void;public function clear () : void;public function drawCircle (x:Number, y:Number, radius:Number, numPoints:int = 8) : void;public function drawEllipse (x:Number, y:Number, width:Number, height:Number, numPoints:int = 8) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\ParticleField.as
package org.papervision3d.objects.special{import org.papervision3d.core.geom.Particles;import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.materials.special.ParticleMaterial;/**
* @Author Ralph Hauwert
*/
public class ParticleField extends Particles{private var fieldDepth : Number;private var fieldHeight : Number;private var fieldWidth : Number;private var quantity : int;private var color : int;/**
* The ParticleField class creates an object with an amount of particles randomly distributed over a specied 3d area.
		* @param	material 	The Material for the to be created particles
		* @param	quantity	The number of particles in the field
		* @param	particleSize	The size of the created particles
		* @param	fieldWidth 	The width of the area
		* @param 	fieldHeight The height of the area
		* @param	fieldDepth	The depth of the area
*/
public function ParticleField (mat:ParticleMaterial, quantity:int = 200, particleSize:Number = 4, fieldWidth:Number = 2000, fieldHeight:Number = 2000, fieldDepth:Number = 2000);private function createParticles (size:Number) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\SimpleLevelOfDetail.as
package org.papervision3d.objects.special{import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;public class SimpleLevelOfDetail extends DisplayObject3D{public var currentObject : DisplayObject3D;public var objects : Array;public var minDepth : Number;public var maxDepth : Number;public var distances : Array;public function SimpleLevelOfDetail (objects:Array, minDepth:Number = 1000, maxDepth:Number = 10000, distances:Array = null);public function updateLoD (index:Number = -1) : void;public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\Skin3D.as
package org.papervision3d.objects.special{import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;/**
* @author Tim Knip
*/
public class Skin3D extends TriangleMesh3D{public function Skin3D (material:MaterialObject3D, vertices:Array, faces:Array, name:String = null);public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;public function clone () : DisplayObject3D;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\Sound3D.as
package org.papervision3d.objects.special{import flash.media.Sound;import flash.media.SoundChannel;import flash.media.SoundTransform;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;public class Sound3D extends DisplayObject3D{public var sound : Sound;public var soundChannel : SoundChannel;public var maxSoundDistance : Number;/**
* This is used to control the volume and could also be used to control the pitch and/or fader  		* if a sound engine that supports it is used. It puts out values from -1 to 1. Values from 0 to -1 is 		* when the object is behind the camera.
*/
public var soundDistance : Number;public var soundPan : Number;public function play (startTime:Number = 0, loops:int = 0, sndTransform:SoundTransform = null) : void;public function stop (startTime:Number = 0, loops:int = 0, sndTransform:SoundTransform = null) : void;private function setPan (pan:Number) : void;private function setVolume (volume:Number) : void;public function updateSound (camera:CameraObject3D) : void;public function Sound3D (soundObj:Sound = null);public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\UCS.as
package org.papervision3d.objects.special{import org.papervision3d.core.geom.Lines3D;import org.papervision3d.core.geom.renderables.Line3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.materials.special.LineMaterial;/**
* @author Tim Knip
*/
public class UCS extends Lines3D{/**
* 		 * @param	scale		 * @param	name		 * @return
*/
public function UCS (scale:Number = 500, name:String = null);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\VectorShape3D.as
package org.papervision3d.objects.special{import org.papervision3d.core.geom.Vertices3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.proto.GeometryObject3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.command.RenderVectorShape;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.special.VectorShapeMaterial;import org.papervision3d.objects.DisplayObject3D;/**
* @author Mark Barcinski
*/
public class VectorShape3D extends Vertices3D{public var graphicsCommands : Array;public var renderCommand : RenderVectorShape;public var graphics : Graphics3D;public function set material (material:MaterialObject3D) : Void;public function VectorShape3D (material:MaterialObject3D, vertices:Array = null, name:String = null);public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\commands\BeginFill.as
package org.papervision3d.objects.special.commands{import org.papervision3d.objects.special.commands.IVectorShape;import flash.display.Graphics;/**
* @author Mark Barcinski
*/
public class BeginFill implements IVectorShape{public var fillColor : uint;public var fillAlpha : Number;public function BeginFill (fillColor:uint = 0x000000, fillAlpha:Number = 1);public function draw (graphics:Graphics, prevDrawn:Boolean) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\commands\CurveTo.as
package org.papervision3d.objects.special.commands{import flash.display.Graphics;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.special.VectorShapeMaterial;import org.papervision3d.objects.special.commands.IVectorShape;/**
* @author Mark Barcinski
*/
public class CurveTo implements IVectorShape{public var control : Vertex3D;public var anchor : Vertex3D;private static var halfPI : Number;public function CurveTo (control:Vertex3D, anchor:Vertex3D);public function draw (graphics:Graphics, prevDrawn:Boolean) : Boolean;public function drawScaledStroke (prevVertex:Vertex3D, graphics:Graphics, renderSessionData:RenderSessionData, material:VectorShapeMaterial) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\commands\EndFill.as
package org.papervision3d.objects.special.commands{import org.papervision3d.objects.special.commands.IVectorShape;import flash.display.Graphics;/**
* @author Mark Barcinski
*/
public class EndFill implements IVectorShape{public function draw (graphics:Graphics, prevDrawn:Boolean) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\commands\IVectorShape.as
package org.papervision3d.objects.special.commands{import flash.display.Graphics;/**
* @author Mark Barcinski
*/
public interface IVectorShape{public function draw (graphics:Graphics, prevDrawn:Boolean) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\commands\LineStyle.as
package org.papervision3d.objects.special.commands{import flash.display.Graphics;/**
* @author Mark Barcinski
*/
public class LineStyle implements IVectorShape{public var thickness : Number;public var color : uint;public var alpha : Number;public var pixelHinting : Boolean;public var scaleMode : String;public var caps : String;public var joints : String;public var miterLimit : Number;public function LineStyle (thickness:Number = -1, color:uint = 0, alpha:Number = 1.0, pixelHinting:Boolean = false, scaleMode:String = "normal", caps:String = null, joints:String = null, miterLimit:Number = 3);public function draw (graphics:Graphics, prevDrawn:Boolean) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\commands\LineTo.as
package org.papervision3d.objects.special.commands{import org.papervision3d.materials.special.VectorShapeMaterial;import flash.display.Graphics;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.geom.renderables.Vertex3DInstance;/**
* @author Mark Barcinski
*/
public class LineTo implements IVectorShape{public var vertex : Vertex3D;private static const halfPI : Number;public function LineTo (vertex:Vertex3D);public function draw (graphics:Graphics, prevDrawn:Boolean) : Boolean;public function drawScaledStroke (prevVertex:Vertex3D, graphics:Graphics, renderSessionData:RenderSessionData, material:VectorShapeMaterial) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\commands\MoveTo.as
package org.papervision3d.objects.special.commands{import flash.display.Graphics;import org.papervision3d.core.geom.renderables.Vertex3D;/**
* @author Mark Barcinski
*/
public class MoveTo implements IVectorShape{public var vertex : Vertex3D;public function MoveTo (vertex:Vertex3D);public function draw (graphics:Graphics, prevDrawn:Boolean) : Boolean;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\render\BasicRenderEngine.as
package org.papervision3d.render{import flash.geom.Point;import org.papervision3d.core.clipping.DefaultClipping;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.proto.SceneObject3D;import org.papervision3d.core.render.AbstractRenderEngine;import org.papervision3d.core.render.IRenderEngine;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.data.RenderStatistics;import org.papervision3d.core.render.filter.BasicRenderFilter;import org.papervision3d.core.render.filter.IRenderFilter;import org.papervision3d.core.render.material.MaterialManager;import org.papervision3d.core.render.project.BasicProjectionPipeline;import org.papervision3d.core.render.project.ProjectionPipeline;import org.papervision3d.core.render.sort.BasicRenderSorter;import org.papervision3d.core.render.sort.IRenderSorter;import org.papervision3d.core.utils.StopWatch;import org.papervision3d.events.RendererEvent;import org.papervision3d.view.Viewport3D;import org.papervision3d.view.layer.ViewportLayer;/**
* <code>BasicRenderEngine</code> links <code>Viewport3D</code>s, 
	 * <code>Scene3D</code>, and <code>Camera3D</code>s together
	 *  by gathering in all of their data, rendering the data, then calling the 
	 *  necessary functions to update from the rendered data
*/
public class BasicRenderEngine extends AbstractRenderEngine implements IRenderEngine{/**
* The type of projection pipeline used for projecting and culling. Defaults
		 * to BasicProjectionPipeline
		 * 
		 * @see org.papervision3d.core.render.project.BasicProjectionPipeline
*/
public var projectionPipeline : ProjectionPipeline;/**
* The type of z-sorting to be used with the rendered data based on 
		 * their respective screen depth. Defaults to <code>BasicRenderSorter</code>.
		 * 
		 * @see org.papervision3d.core.render.sort.BasicRenderSorter
*/
public var sorter : IRenderSorter;public var clipping : DefaultClipping;/**
* A filter (such as FogFilter) to be used in the renderList. Defaults to 
		 * <code>BasicRenderFilter</code>
		 * 
		 * @see org.papervision3d.core.render.filter.BasicRenderFilter
		 * @see org.papervision3d.core.render.filter.FogFilter
*/
public var filter : IRenderFilter;/**
@private
*/
protected var renderDoneEvent : RendererEvent;/**
@private
*/
protected var projectionDoneEvent : RendererEvent;/**
@private
*/
protected var renderStatistics : RenderStatistics;/**
@private
*/
protected var renderList : Array;/**
@private
*/
protected var renderSessionData : RenderSessionData;/**
@private
*/
protected var cleanRHD : RenderHitData;/**
@private
*/
protected var stopWatch : StopWatch;/**
* Creates and prepares all the objects and events needed for rendering
*/
public function BasicRenderEngine ();/**
* Destroys all of <code>BasicRenderEngine</code>'s objects for Garbage Collection purposes.
*/
public function destroy () : void;/**
@private
*/
protected function init () : void;/**
* Takes the data from the scene, camera, and viewport, renders it, then updates the viewport
		 * 
		 * @param camera			The <code>CameraObject3D</code> looking at the scene
		 * @param scene				The <code>Scene3D</code> holding the <code>DisplayObject3D</code>'s you want rendered
		 * @param viewPort			The <code>Viewport3D</code> that will display your scene
		 * 
		 * @return RenderStatistics		The <code>RenderStatistics</code> objectholds all the data from the last render
*/
public function renderScene (scene:SceneObject3D, camera:CameraObject3D, viewPort:Viewport3D) : RenderStatistics;/**
* Works similarly to <code>renderScene</code>, but also takes an array 
		 * of specific <code>ViewportLayer3D</code>'s to
		 * render
		 * 
		 * @param camera				The <code>CameraObject3D</code> looking at the scene
		 * @param scene					The <code>Scene3D</code> holding the <code>DisplayObject3D</code>'s you want rendered
		 * @param viewPort				The <code>Viewport3D</code> that will display your scene
		 * 
		 * @return RenderStatistics		The <code>RenderStatistics</code> objectholds all the data from the last render
		 * 
		 * @see #renderScene
*/
public function renderLayers (scene:SceneObject3D, camera:CameraObject3D, viewPort:Viewport3D, layers:Array = null) : RenderStatistics;/**
@private
*/
private function getLayerObjects (layers:Array) : Array;/**
@private
*/
protected function doRender (renderSessionData:RenderSessionData, layers:Array = null) : RenderStatistics;/**
* @private
*/
public function hitTestPoint2D (point:Point, viewPort3D:Viewport3D) : RenderHitData;/**
* Adds a <code>renderCommand</code> to the <code>renderList</code>
		 * 
		 * @param renderCommand		A command to be used in the <code>renderList</code>
		 * 
		 * @return int				An integer representing the length of the <code>renderList</code>
*/
public function addToRenderList (renderCommand:RenderableListItem) : int;/**
* Removes a <code>renderCommand</code> from the <code>renderList</code>
		 * 
		 * @param renderCommand		A command to be removed from the <code>renderList</code>
		 * 
		 * @return int				An integer representing the length of the <code>renderList</code>
*/
public function removeFromRenderList (renderCommand:IRenderListItem) : int;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\render\LazyRenderEngine.as
package org.papervision3d.render{import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.render.IRenderEngine;import org.papervision3d.core.render.data.RenderStatistics;import org.papervision3d.scenes.Scene3D;import org.papervision3d.view.Viewport3D;/**
* @Author Ralph Hauwert
*/
public class LazyRenderEngine extends BasicRenderEngine implements IRenderEngine{protected var _camera : CameraObject3D;protected var _scene : Scene3D;protected var _viewport : Viewport3D;public function set camera (camera:CameraObject3D) : Void;public function get camera () : CameraObject3D;public function set scene (scene:Scene3D) : Void;public function get scene () : Scene3D;public function set viewport (viewport:Viewport3D) : Void;public function get viewport () : Viewport3D;public function LazyRenderEngine (scene:Scene3D, camera:CameraObject3D, viewport:Viewport3D);public function render () : RenderStatistics;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\render\QuadrantRenderEngine.as
package org.papervision3d.render{import org.papervision3d.cameras.Camera3D;import org.papervision3d.core.clipping.draw.Clipping;import org.papervision3d.core.clipping.draw.RectangleClipping;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.proto.SceneObject3D;import org.papervision3d.core.render.IRenderEngine;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.QuadTree;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.data.RenderStatistics;import org.papervision3d.core.render.filter.AbstractQuadrantFilter;import org.papervision3d.core.render.filter.BasicRenderFilter;import org.papervision3d.core.render.filter.QuadrantFilter;import org.papervision3d.core.render.filter.QuadrantZFilter;import org.papervision3d.core.render.material.MaterialManager;import org.papervision3d.core.render.project.BasicProjectionPipeline;import org.papervision3d.core.render.sort.BasicRenderSorter;import org.papervision3d.core.utils.StopWatch;import org.papervision3d.events.RendererEvent;import org.papervision3d.scenes.Scene3D;import org.papervision3d.view.Viewport3D;import org.papervision3d.view.layer.ViewportLayer;/**
* <code>BasicRenderEngine</code> links <code>Viewport3D</code>s, 
	 * <code>Scene3D</code>, and <code>Camera3D</code>s together
	 *  by gathering in all of their data, rendering the data, then calling the 
	 *  necessary functions to update from the rendered data
*/
public class QuadrantRenderEngine extends BasicRenderEngine implements IRenderEngine{public var quadTree : QuadTree;private var clip : Clipping;public var quadFilters : Array;public static var CORRECT_Z_FILTER : Number;public static var QUAD_SPLIT_FILTER : Number;public static var ALL_FILTERS : Number;/**
* Creates and prepares all the objects and events needed for rendering
*/
public function QuadrantRenderEngine (type:Number = 3);/**
@private
*/
protected function init () : void;/**
* Takes the data from the scene, camera, and viewport, renders it, then updates the viewport
		 * 
		 * @param camera			The <code>CameraObject3D</code> looking at the scene
		 * @param scene				The <code>Scene3D</code> holding the <code>DisplayObject3D</code>'s you want rendered
		 * @param viewPort			The <code>Viewport3D</code> that will display your scene
		 * 
		 * @return RenderStatistics		The <code>RenderStatistics</code> objectholds all the data from the last render
*/
public function renderScene (scene:SceneObject3D, camera:CameraObject3D, viewPort:Viewport3D) : RenderStatistics;/**
@private
*/
private function getLayerObjects (layers:Array) : Array;/**
@private
*/
protected function doRender (renderSessionData:RenderSessionData, layers:Array = null) : RenderStatistics;public function addToRenderList (renderCommand:RenderableListItem) : int;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\scenes\Scene3D.as
package org.papervision3d.scenes{import org.papervision3d.core.proto.*;/**
* The Scene3D class lets you create a scene where all objects are rendered in the same container.	* <p/>	* A scene is the place where objects are placed, it contains the 3D environment.
*/
public class Scene3D extends SceneObject3D{/**
* The Scene3D class lets you create a scene where all objects are rendered in the same container.
*/
public function Scene3D ();}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\Font3D.as
package org.papervision3d.typography{/**
* @author Mark Barcinski
*/
public class Font3D{public function get motifs () : Object;public function get widths () : Object;public function get height () : Number;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\Letter3D.as
package org.papervision3d.typography{/**
* @author Mark Barcinski
*/
public interface Letter3D{public function get width () : Number;public function set width (value:Number) : Void;public function get height () : Number;public function set height (value:Number) : Void;public function get char () : String;public function set char (value:String) : Void;public function get font () : Font3D;public function set font (value:Font3D) : Void;public function get x () : Number;public function set x (value:Number) : Void;public function get y () : Number;public function set y (value:Number) : Void;public function get z () : Number;public function set z (value:Number) : Void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\Text3D.as
package org.papervision3d.typography{import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.materials.special.Letter3DMaterial;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.objects.special.VectorShape3D;/**
* @author Mark Barcinski
*/
public class Text3D extends VectorShape3D{public var letters : Array;protected var _text : String;public var font : Font3D;public var lines : Array;private var _letterSpacing : Number;private var _lineSpacing : Number;private var _align : String;private var _lineHeight : Number;public function get letterSpacing () : Number;public function set letterSpacing (spacing:Number) : Void;public function get lineSpacing () : Number;public function set lineSpacing (lineSpacing:Number) : Void;public function get align () : String;public function set align (align:String) : Void;public function get text () : String;public function set text (text:String) : Void;public function Text3D (text:String, font:Font3D, material:MaterialObject3D, name:String = null);protected function createLetters (material:MaterialObject3D) : void;private function alignLetters () : void;private function removeLetters () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\VectorLetter3D.as
package org.papervision3d.typography{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.materials.special.Letter3DMaterial;import org.papervision3d.objects.special.VectorShape3D;/**
* @author Mark Barcinski
*/
public class VectorLetter3D extends VectorShape3D implements Letter3D{private var _width : Number;private var _height : Number;private var _char : String;private var _font : Font3D;public function get width () : Number;public function set width (value:Number) : Void;public function get height () : Number;public function set height (height:Number) : Void;public function get char () : String;public function set char (value:String) : Void;public function get font () : Font3D;public function set font (value:Font3D) : Void;public function VectorLetter3D (char:String, material:Letter3DMaterial, font:Font3D);protected function getLetterFromFont () : void;protected function createVertices (motif:Array) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\fonts\HelveticaBold.as
package org.papervision3d.typography.fonts{import org.papervision3d.typography.Font3D;public class HelveticaBold extends Font3D{public static var __motifs : Object;public static var __widths : Object;public static var __height : Number;public static var __initialized : Boolean;public function get motifs () : Object;public function get widths () : Object;public function get height () : Number;public static function initialize () : void;private static function initializeMotifsUppercase () : void;private static function initializeMotifsLowercase () : void;private static function initializeMotifsNumbers () : void;private static function initializeMotifsPunctuation () : void;private static function initializeWidthsUppercase () : void;private static function initializeWidthsLowercase () : void;private static function initializeWidthsNumbers () : void;private static function initializeWidthsPunctuation () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\fonts\HelveticaLight.as
package org.papervision3d.typography.fonts{import org.papervision3d.typography.Font3D;public class HelveticaLight extends Font3D{public static var __motifs : Object;public static var __widths : Object;public static var __height : Number;public static var __initialized : Boolean;public function get motifs () : Object;public function get widths () : Object;public function get height () : Number;public static function initialize () : void;private static function initializeMotifsUppercase () : void;private static function initializeMotifsLowercase () : void;private static function initializeMotifsNumbers () : void;private static function initializeMotifsPunctuation () : void;private static function initializeWidthsUppercase () : void;private static function initializeWidthsLowercase () : void;private static function initializeWidthsNumbers () : void;private static function initializeWidthsPunctuation () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\fonts\HelveticaMedium.as
package org.papervision3d.typography.fonts{import org.papervision3d.typography.Font3D;public class HelveticaMedium extends Font3D{public static var __motifs : Object;public static var __widths : Object;public static var __height : Number;public static var __initialized : Boolean;public function get motifs () : Object;public function get widths () : Object;public function get height () : Number;public static function initialize () : void;private static function initializeMotifsUppercase () : void;private static function initializeMotifsLowercase () : void;private static function initializeMotifsNumbers () : void;private static function initializeMotifsPunctuation () : void;private static function initializeWidthsUppercase () : void;private static function initializeWidthsLowercase () : void;private static function initializeWidthsNumbers () : void;private static function initializeWidthsPunctuation () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\fonts\HelveticaRoman.as
package org.papervision3d.typography.fonts{import org.papervision3d.typography.Font3D;public class HelveticaRoman extends Font3D{public static var __motifs : Object;public static var __widths : Object;public static var __height : Number;public static var __initialized : Boolean;public function get motifs () : Object;public function get widths () : Object;public function get height () : Number;public static function initialize () : void;private static function initializeMotifsUppercase () : void;private static function initializeMotifsLowercase () : void;private static function initializeMotifsNumbers () : void;private static function initializeMotifsPunctuation () : void;private static function initializeWidthsUppercase () : void;private static function initializeWidthsLowercase () : void;private static function initializeWidthsNumbers () : void;private static function initializeWidthsPunctuation () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\AbstractView.as
package org.papervision3d.view{import flash.display.Sprite;import flash.events.Event;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.view.IView;import org.papervision3d.render.BasicRenderEngine;import org.papervision3d.scenes.Scene3D;/**
* @Author Ralph Hauwert
*/
public class AbstractView extends Sprite implements IView{protected var _camera : CameraObject3D;protected var _height : Number;protected var _width : Number;public var scene : Scene3D;public var viewport : Viewport3D;public var renderer : BasicRenderEngine;public function get camera () : CameraObject3D;public function set viewportWidth (width:Number) : Void;public function get viewportWidth () : Number;public function set viewportHeight (height:Number) : Void;public function get viewportHeight () : Number;public function AbstractView ();public function startRendering () : void;public function stopRendering (reRender:Boolean = false, cacheAsBitmap:Boolean = false) : void;public function singleRender () : void;protected function onRenderTick (event:Event = null) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\BasicView.as
package org.papervision3d.view{import org.papervision3d.cameras.SpringCamera3D;import org.papervision3d.cameras.Camera3D;import org.papervision3d.cameras.CameraType;import org.papervision3d.cameras.DebugCamera3D;import org.papervision3d.core.view.IView;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.render.BasicRenderEngine;import org.papervision3d.scenes.Scene3D;/**
* <p>
	 * BasicView provides a simple template for quickly setting up
	 * basic Papervision3D projects by creating a viewport, scene,
	 * camera, and renderer for you. Because BasicView is a subclass of
	 * Sprite, it can be added to any DisplayObject.
	 * 
	 * </p>
	 * 
	 * <p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre><code>
	 * var width:Number = 640;
	 * var heigth:Number = 480;
	 * var scaleToStage:Boolean = true;
	 * var interactive:Boolean = true;
	 * var cameraType:String = Camera3D.TYPE;
	 * 
	 * var myBasicView:BasicView = new BasicView(width, height, scaleToStage, interactive, cameraType);
	 * myDisplayObject.addChild(myBasicView);
	 * </code></pre>
	 * </p>
	 * @author Ralph Hauwert
*/
public class BasicView extends AbstractView implements IView{/**
* Exposes the camera as a <code>Camera3D</code>
*/
public function get cameraAsCamera3D () : Camera3D;/**
* Exposes the camera as a <code>DebugCamera3D</code>
*/
public function get cameraAsDebugCamera3D () : DebugCamera3D;/**
* @param viewportWidth		Width of the viewport 
		 * @param viewportHeight	Height of the viewport
		 * @param scaleToStage		Whether you viewport should scale with the stage
		 * @param interactive		Whether your scene should be interactive
		 * @param cameraType		A String for the type of camera. @see org.papervision3d.cameras.CameraType
		 *
*/
public function BasicView (viewportWidth:Number = 640, viewportHeight:Number = 480, scaleToStage:Boolean = true, interactive:Boolean = false, cameraType:String = "Target");}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\BitmapViewport3D.as
package org.papervision3d.view{import flash.display.Bitmap;import flash.display.BitmapData;import flash.events.Event;import flash.geom.Matrix;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.view.IViewport3D;/**
* @Author Ralph Hauwert
*/
public class BitmapViewport3D extends Viewport3D implements IViewport3D{public var bitmapData : BitmapData;public var _containerBitmap : Bitmap;protected var _fillBeforeRender : Boolean;protected var bgColor : int;protected var bitmapTransparent : Boolean;public function set fillBeforeRender (value:Boolean) : Void;public function get fillBeforeRender () : Boolean;public function set autoClipping (clip:Boolean) : Void;public function get autoClipping () : Boolean;public function BitmapViewport3D (viewportWidth:Number = 640, viewportHeight:Number = 480, autoScaleToStage:Boolean = false, bitmapTransparent:Boolean = false, bgColor:int = 0x000000, interactive:Boolean = false, autoCulling:Boolean = true);public function updateAfterRender (renderSessionData:RenderSessionData) : void;protected function onStageResize (event:Event = null) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\Viewport3D.as
package org.papervision3d.view{import flash.display.Sprite;import flash.display.StageAlign;import flash.display.StageScaleMode;import flash.events.Event;import flash.geom.Point;import flash.geom.Rectangle;import flash.utils.Dictionary;import org.papervision3d.core.culling.DefaultLineCuller;import org.papervision3d.core.culling.DefaultParticleCuller;import org.papervision3d.core.culling.DefaultTriangleCuller;import org.papervision3d.core.culling.ILineCuller;import org.papervision3d.core.culling.IParticleCuller;import org.papervision3d.core.culling.ITriangleCuller;import org.papervision3d.core.culling.RectangleLineCuller;import org.papervision3d.core.culling.RectangleParticleCuller;import org.papervision3d.core.culling.RectangleTriangleCuller;import org.papervision3d.core.culling.ViewportObjectFilter;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.render.IRenderEngine;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.utils.InteractiveSceneManager;import org.papervision3d.core.view.IViewport3D;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.layer.ViewportBaseLayer;import org.papervision3d.view.layer.ViewportLayer;/**
Added LineCulling on 22 May 08 by Seb Lee-Delisle
*/
public class Viewport3D extends Sprite implements IViewport3D{/**
@private
*/
protected var _width : Number;/**
@private
*/
protected var _hWidth : Number;/**
@private
*/
protected var _height : Number;/**
@private
*/
protected var _hHeight : Number;/**
@private
*/
protected var _autoClipping : Boolean;/**
@private
*/
protected var _autoCulling : Boolean;/**
@private
*/
protected var _autoScaleToStage : Boolean;/**
@private
*/
protected var _interactive : Boolean;/**
@private
*/
protected var _lastRenderer : IRenderEngine;/**
@private
*/
protected var _viewportObjectFilter : ViewportObjectFilter;/**
@private
*/
protected var _containerSprite : ViewportBaseLayer;/**
@private
*/
protected var _layerInstances : Dictionary;/**
* sizeRectangle stores the width and the height of the Viewport3D sprite
		 * @see #viewportWidth
		 * @see #viewportHeight
*/
public var sizeRectangle : Rectangle;/**
* cullingRectangle stores the width, height, x, y of the culling rectangle. It's used to determine the bounds in which the triangles are drawn.
		 * @see #autoCulling
*/
public var cullingRectangle : Rectangle;/**
* triangleCuller uses the cullingRectangle to determine which triangles will not be rendered in BasicRenderEngine
		 * @see #autoCulling
*/
public var triangleCuller : ITriangleCuller;/**
* particleCuller uses the cullingRectangle to determine which particles will not be rendered in BasicRenderEngine
		 * @see #autoCulling
*/
public var particleCuller : IParticleCuller;/**
* lineCuller uses the culling Rectangle to determine which particles will not be rendered in BasicRenderEngine
		 * @see #autoCulling
*/
public var lineCuller : ILineCuller;/**
* lastRenderList stores RenderableListItems (Triangles, Lines, Pixels, Particles, Fog) of everything that was rendered in the last pass. This list is used to determine hitTests in hitTestPoint2D.
		 * @see #hitTestPoint2D()
*/
public var lastRenderList : Array;/**
* interactiveSceneManager manages the interaction between the user's mouse and the Papervision3D scene. This is done by checking the mouse against renderHitData. renderHitData is generated from hitTestPoint2D and passed into the interactiveSceneManager to check agains the various mouse actions.
		 * @see #hitTestPoint2D()
		 * @see org.papervision3d.core.utils.InteractiveSceneManager#renderHitData
*/
public var interactiveSceneManager : InteractiveSceneManager;/**
@private
*/
protected var renderHitData : RenderHitData;private var stageScaleModeSet : Boolean;/**
* Sets the viewport width
		 * @param width		A number designating the width of the viewport
*/
public function set viewportWidth (width:Number) : Void;/**
* Width of the <code>Viewport3D</code>
*/
public function get viewportWidth () : Number;/**
* Sets the the height of the <code>Viewport3D</code>
		 * @param height 	A number designating the height of the <code>Viewport3D</code>
*/
public function set viewportHeight (height:Number) : Void;/**
* Height of the Viewport
*/
public function get viewportHeight () : Number;/**
* The <code>Sprite</code> holding the <code>Viewport3D</code>
*/
public function get containerSprite () : ViewportLayer;/**
* Whether clipping is enabled (not rendering bitmap data outside the rectangle of the viewport by making use of the <code>Sprite.scrollRect</code>)
		 * @see flash.display.Sprite#scrollRect
		 * @see http://www.gskinner.com/blog/archives/2006/11/understanding_d.html
*/
public function get autoClipping () : Boolean;public function set autoClipping (clip:Boolean) : Void;/**
* Whether culling is enabled (not rendering triangles hidden behind other triangles)
		 * @see #lineCuller
		 * @see #particleCuller
		 * @see #triangleCuller
*/
public function get autoCulling () : Boolean;public function set autoCulling (culling:Boolean) : Void;/**
* Whether the <code>Viewport3D</code> should scale with the <code>Stage</code>
*/
public function set autoScaleToStage (scale:Boolean) : Void;/**
* The auto scale to stage boolean flag
*/
public function get autoScaleToStage () : Boolean;/**
* Whether the <code>Viewport3D</code> should listen for <code>Mouse</code> events and create an <code>InteractiveSceneManager</code>
*/
public function set interactive (b:Boolean) : Void;/**
* The interactive boolean flag
*/
public function get interactive () : Boolean;/**
* Sets the <code>ViewportObjectFilter</code> of the <code>Viewport3D</code>
		 * @param vof		The <code>ViewportObjectFilter</code> you want applied
*/
public function set viewportObjectFilter (vof:ViewportObjectFilter) : Void;/**
* The <code>ViewportObjectFilter</code>
*/
public function get viewportObjectFilter () : ViewportObjectFilter;/**
* @param viewportWidth 	Width of the viewport
		 * @param viewportHeight 	Height of the viewport
		 * @param autoScaleToStage 	Determines whether the viewport should resize when the stage resizes
		 * @param interactive 		Determines whether the viewport should listen for Mouse events by creating an <code>InteractiveSceneManager</code>
		 * @param autoClipping 		Determines whether DisplayObject3Ds outside the rectangle of the viewport should be rendered
		 * @param autoCulling 		Detemines whether only the objects in front of the camera should be rendered. In other words, if a triangle is hidden by another triangle from the camera, it will not be rendered.
*/
public function Viewport3D (viewportWidth:Number = 640, viewportHeight:Number = 480, autoScaleToStage:Boolean = false, interactive:Boolean = false, autoClipping:Boolean = true, autoCulling:Boolean = true);/**
* Removes all references and sets the viewport's
		 * InteractiveSceneManager to null for a future
		 * garbage collection sweep
*/
public function destroy () : void;/**
* @private
*/
protected function init () : void;/**
* Checks the Mouse x and y against the <code>RenderHitData</code>
		 * @return RenderHitData of the current mouse location
*/
public function hitTestMouse () : RenderHitData;/**
* Checks a <code>Point</code> against the <code>RenderHitData</code>
		 * of the viewport
		 * @param point		a 2d <code>Point</code> you want to analyze into 3d space
		 * @return <code>RenderHitData</code> of the given <code>Point</code>
*/
public function hitTestPoint2D (point:Point) : RenderHitData;public function hitTestPointObject (point:Point, object:DisplayObject3D) : RenderHitData;/**
* Creates or receives a <code>ViewportLayer</code> of the given <code>DisplayObject3D</code>
		 * @param do3d			A <code>DisplayObject3D</code> used to either find the layer or create a new one
		 * @param createNew		Forces the creation of a new layer
		 * @param recurse		Adds the <code>DisplayObject3D</code> as well as all of its children to a new layer
		 * @return <code>ViewportLayer</code> of the given <code>DisplayObject3D</code>
*/
public function getChildLayer (do3d:DisplayObject3D, createNew:Boolean = true, recurse:Boolean = true) : ViewportLayer;/**
* Gets the layer of the RenderListItem. Most-likely internal use.
		 * @param rc			A RenderableListItem to look for
		 * @param setInstance	sets the container to the layer
		 * @return 				The found <code>ViewportLayer</code>
*/
public function accessLayerFor (rc:RenderableListItem, setInstance:Boolean = false) : ViewportLayer;/**
* Triggered when added to the stage to start listening to stage resizing
*/
protected function onAddedToStage (event:Event) : void;/**
* Triggered when removed from the stage to remove the stage resizing listener
*/
protected function onRemovedFromStage (event:Event) : void;/**
* Resizes the viewport when the stage is resized (if autoScaleToStage == true)
*/
protected function onStageResize (event:Event = null) : void;protected function setStageScaleMode () : void;/**
* Updates a <code>ViewportLayer</code> prior to the 3d data being rendered into the 2d scene
		 * @param renderSessionData		All the information regarding the current renderSession packed into one class
*/
public function updateBeforeRender (renderSessionData:RenderSessionData) : void;/**
* Updates a <code>ViewportLayer</code> after the 3d data is rendered into the 2d scene
		 * @param renderSessionData		All the information regarding the current renderSession packed into one class
*/
public function updateAfterRender (renderSessionData:RenderSessionData) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\layer\BitmapEffectLayer.as
package org.papervision3d.view.layer{import flash.display.Bitmap;import flash.display.BitmapData;import flash.display.DisplayObject;import flash.display.Sprite;import flash.geom.Matrix;import flash.geom.Point;import flash.geom.Rectangle;import org.papervision3d.core.effects.AbstractEffect;import org.papervision3d.core.effects.utils.BitmapClearMode;import org.papervision3d.core.effects.utils.BitmapDrawCommand;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.Viewport3D;public class BitmapEffectLayer extends ViewportLayer{public var canvas : BitmapData;private var transMat : Matrix;public var clearMode : String;public var clippingRect : Rectangle;public var clippingPoint : Point;public var drawCommand : BitmapDrawCommand;public var clearBeforeRender : Boolean;public var bitmapContainer : Bitmap;private var _width : Number;private var _height : Number;public var trackingObject : DisplayObject3D;public var trackingOffset : Point;public var scrollX : Number;public var scrollY : Number;public var effects : Array;public var drawLayer : Sprite;public var renderAbove : Boolean;public function BitmapEffectLayer (viewport:Viewport3D, w:Number = 640, h:Number = 480, transparent:Boolean = true, fillColor:uint = 0, clearMode:String = "clear_pre", renderAbove:Boolean = false, clearBeforeRender:Boolean = false);public function setBitmapOffset (x:Number, y:Number) : void;public function setTracking (object:DisplayObject3D, offset:Point = null) : void;public function setScroll (x:Number = 0, y:Number = 0) : void;public function fillCanvas (color:uint) : void;public function renderEffects () : void;public function removeEffect (fx:AbstractEffect) : void;public function setClipping (rect:Rectangle, point:Point) : void;public function addEffect (fx:AbstractEffect) : void;public function updateBeforeRender () : void;public function updateAfterRender () : void;public function getTranslationMatrix () : Matrix;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\layer\ViewportBaseLayer.as
package org.papervision3d.view.layer{import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.Viewport3D;/**
* @Author Ralph Hauwert
*/
public class ViewportBaseLayer extends ViewportLayer{public function ViewportBaseLayer (viewport:Viewport3D);public function getChildLayer (do3d:DisplayObject3D, createNew:Boolean = true, recurse:Boolean = false) : ViewportLayer;public function updateBeforeRender () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\layer\ViewportLayer.as
package org.papervision3d.view.layer{import flash.display.Graphics;import flash.display.Sprite;import flash.utils.Dictionary;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.ns.pv3dview;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.Viewport3D;import org.papervision3d.view.layer.util.ViewportLayerSortMode;/**
* @Author Ralph Hauwert
*/
public class ViewportLayer extends Sprite{public var childLayers : Array;public var layers : Dictionary;public var displayObject3D : DisplayObject3D;public var displayObjects : Dictionary;public var layerIndex : Number;public var forceDepth : Boolean;public var screenDepth : Number;public var originDepth : Number;public var weight : Number;public var sortMode : String;public var dynamicLayer : Boolean;public var graphicsChannel : Graphics;protected var viewport : Viewport3D;public function ViewportLayer (viewport:Viewport3D, do3d:DisplayObject3D, isDynamic:Boolean = false);public function addDisplayObject3D (do3d:DisplayObject3D, recurse:Boolean = false) : void;public function removeDisplayObject3D (do3d:DisplayObject3D) : void;public function hasDisplayObject3D (do3d:DisplayObject3D) : Boolean;protected function init () : void;public function getChildLayer (do3d:DisplayObject3D, createNew:Boolean = true, recurse:Boolean = false) : ViewportLayer;protected function getChildLayerFor (displayObject3D:DisplayObject3D, recurse:Boolean = false) : ViewportLayer;public function childLayerIndex (do3d:DisplayObject3D) : Number;public function addLayer (vpl:ViewportLayer) : void;private function linkChild (do3d:DisplayObject3D, vpl:ViewportLayer, e:ViewportLayerEvent = null) : void;private function unlinkChild (do3d:DisplayObject3D, e:ViewportLayerEvent = null) : void;private function onChildAdded (e:ViewportLayerEvent) : void;private function onChildRemoved (e:ViewportLayerEvent) : void;public function updateBeforeRender () : void;public function updateAfterRender () : void;public function removeLayer (vpl:ViewportLayer) : void;public function removeLayerAt (index:Number) : void;public function getLayerObjects (ar:Array = null) : Array;public function clear () : void;protected function reset () : void;public function sortChildLayers () : void;protected function orderLayers () : void;public function processRenderItem (rc:RenderableListItem) : void;public function updateInfo () : void;public function removeAllLayers () : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\layer\ViewportLayerEvent.as
package org.papervision3d.view.layer{import flash.events.Event;import org.papervision3d.objects.DisplayObject3D;public class ViewportLayerEvent extends Event{public var do3d : DisplayObject3D;public var layer : ViewportLayer;public static const CHILD_ADDED : String;public static const CHILD_REMOVED : String;public function ViewportLayerEvent (type:String, do3d:DisplayObject3D = null, layer:ViewportLayer = null);}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\layer\util\ViewportLayerSortMode.as
package org.papervision3d.view.layer.util{public class ViewportLayerSortMode{public static var Z_SORT : String;public static var INDEX_SORT : String;public static var ORIGIN_SORT : String;public function ViewportLayerSortMode ();}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\stats\AbstractStatsView.as
package org.papervision3d.view.stats{import flash.display.MovieClip;import flash.events.Event;import flash.utils.getTimer;import org.papervision3d.core.render.AbstractRenderEngine;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.events.RendererEvent;public class AbstractStatsView extends MovieClip{protected var _renderEngine : AbstractRenderEngine;protected var _renderSessionData : RenderSessionData;protected var _fps : int;protected var lastFrameTime : int;protected var currentFrameTime : int;public function set renderEngine (renderEngine:AbstractRenderEngine) : Void;public function get renderEngine () : AbstractRenderEngine;public function set renderSessionData (renderSessionData:RenderSessionData) : Void;public function get renderSessionData () : RenderSessionData;public function set fps (fps:int) : Void;public function get fps () : int;public function AbstractStatsView ();protected function setupListeners () : void;protected function onRenderDone (event:RendererEvent) : void;protected function onFrame (event:Event) : void;}}
#file-cache C:\Users\Asus\Downloads\Compressed\collada01\collada01\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\stats\StatsView.as
package org.papervision3d.view.stats{import flash.system.System;import flash.text.TextField;import flash.text.TextFieldAutoSize;import flash.text.TextFormat;import org.papervision3d.core.render.AbstractRenderEngine;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.data.RenderStatistics;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.scenes.Scene3D;public class StatsView extends AbstractStatsView{protected var statsFormat : TextFormat;public var totalPolyCount : Number;protected var polyCountField : TextField;protected var memInfoTestField : TextField;protected var fpsInfoTextField : TextField;protected var objectInfoTextField : TextField;protected var renderInfoTextField : TextField;protected var cullingInfoTextField : TextField;public function set renderSessionData (renderSessionData:RenderSessionData) : Void;public function set fps (fps:int) : Void;public static function countPolys (obj:DisplayObject3D) : Number;protected static function recurseDisplayObject (obj:DisplayObject3D, polygonCount:Number) : Number;public function StatsView (renderEngine:AbstractRenderEngine);protected function init () : void;protected function setupView () : void;public function updatePolyCount (scene:Scene3D) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\CRC32.as
package nochump.util.zip{import flash.utils.ByteArray;/**
* Computes CRC32 data checksum of a data stream.
	 * The actual CRC32 algorithm is described in RFC 1952
	 * (GZIP file format specification version 4.3).
	 * 
	 * @author David Chang
	 * @date January 2, 2007.
*/
public class CRC32{/**
The crc data checksum so far.
*/
private var crc : uint;/**
The fast CRC table. Computed once when the CRC32 class is loaded.
*/
private static var crcTable : Array;/**
Make the table for a fast CRC.
*/
private static function makeCrcTable () : Array;/**
* Returns the CRC32 data checksum computed so far.
*/
public function getValue () : uint;/**
* Resets the CRC32 data checksum as if no update was ever called.
*/
public function reset () : void;/**
* Adds the complete byte array to the data checksum.
		 * 
		 * @param buf the buffer which contains the data
*/
public function update (buf:ByteArray) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\Deflater.as
package nochump.util.zip{import flash.utils.ByteArray;/**
* This is the Deflater class.  The deflater class compresses input
	 * with the deflate algorithm described in RFC 1951.  It uses the
	 * ByteArray compress method to deflate.
	 * 
	 * @author David Chang
*/
public class Deflater{private var buf : ByteArray;private var compressed : Boolean;private var totalIn : uint;private var totalOut : uint;/**
* Creates a new deflater.
*/
public function Deflater ();/**
* Resets the deflater.  The deflater acts afterwards as if it was
		 * just created.
*/
public function reset () : void;/**
* Sets the data which should be compressed next.
		 * 
		 * @param input the buffer containing the input data.
*/
public function setInput (input:ByteArray) : void;/**
* Deflates the current input block to the given array.
		 * 
		 * @param output the buffer where to write the compressed data.
*/
public function deflate (output:ByteArray) : uint;/**
* Gets the number of input bytes.
*/
public function getBytesRead () : uint;/**
* Gets the number of output bytes.
*/
public function getBytesWritten () : uint;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\Inflater.as
package nochump.util.zip{import flash.utils.Endian;import flash.utils.ByteArray;/**
* Inflater is used to decompress data that has been compressed according 
	 * to the "deflate" standard described in rfc1950.
	 *
	 * The usage is as following.  First you have to set some input with
	 * <code>setInput()</code>, then inflate() it.
	 * 
	 * This implementation is a port of Puff by Mark Addler that comes with
	 * the zlip data compression library.  It is not the fastest routine as
	 * he intended it for learning purposes, his actual optimized inflater code
	 * is very different.  I went with this approach basically because I got a
	 * headache looking at the optimized inflater code and porting this
	 * was a breeze.  The speed should be adequate but there is plenty of room
	 * for improvements here.
	 * 
	 * @author dchang
*/
public class Inflater{private static const MAXBITS : int;private static const MAXLCODES : int;private static const MAXDCODES : int;private static const MAXCODES : int;private static const FIXLCODES : int;private static const LENS : Array;private static const LEXT : Array;private static const DISTS : Array;private static const DEXT : Array;private var inbuf : ByteArray;private var incnt : uint;private var bitbuf : int;private var bitcnt : int;private var lencode : Object;private var distcode : Object;/**
* Sets the input.
		 * 
		 * @param buf the input.
*/
public function setInput (buf:ByteArray) : void;/**
* Inflates the compressed stream to the output buffer.
		 * 
		 * @param buf the output buffer.
*/
public function inflate (buf:ByteArray) : uint;private function bits (need:int) : int;private function construct (h:Object, length:Array, n:int) : int;private function decode (h:Object) : int;private function codes (buf:ByteArray) : int;private function stored (buf:ByteArray) : void;private function constructFixedTables () : void;private function constructDynamicTables () : int;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\ZipConstants.as
package nochump.util.zip{internal class ZipConstants{/**
The local file header
*/
internal static const LOCSIG : uint;internal static const LOCHDR : uint;internal static const LOCVER : uint;internal static const LOCNAM : uint;/**
The Data descriptor
*/
internal static const EXTSIG : uint;internal static const EXTHDR : uint;/**
The central directory file header
*/
internal static const CENSIG : uint;internal static const CENHDR : uint;internal static const CENVER : uint;internal static const CENNAM : uint;internal static const CENOFF : uint;/**
The entries in the end of central directory
*/
internal static const ENDSIG : uint;internal static const ENDHDR : uint;internal static const ENDTOT : uint;internal static const ENDOFF : uint;/**
Compression methods
*/
internal static const STORED : uint;internal static const DEFLATED : uint;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\ZipEntry.as
package nochump.util.zip{import flash.utils.ByteArray;/**
* This class represents a member of a zip archive.  ZipFile
	 * will give you instances of this class as information
	 * about the members in an archive.  On the other hand ZipOutput
	 * needs an instance of this class to create a new member.
	 *
	 * @author David Chang
*/
public class ZipEntry{private var _name : String;private var _size : int;private var _compressedSize : int;private var _crc : uint;/**
@private
*/
internal var dostime : uint;private var _method : int;private var _extra : ByteArray;private var _comment : String;/**
@private
*/
internal var flag : int;/**
@private
*/
internal var version : int;/**
@private
*/
internal var offset : int;/**
* Returns the entry name.  The path components in the entry are
		 * always separated by slashes ('/').
*/
public function get name () : String;/**
* Gets the time of last modification of the entry.
		 * @return the time of last modification of the entry, or -1 if unknown.
*/
public function get time () : Number;/**
* Sets the time of last modification of the entry.
		 * @time the time of last modification of the entry.
*/
public function set time (time:Number) : Void;/**
* Gets the size of the uncompressed data.
*/
public function get size () : int;/**
* Sets the size of the uncompressed data.
*/
public function set size (size:int) : Void;/**
* Gets the size of the compressed data.
*/
public function get compressedSize () : int;/**
* Sets the size of the compressed data.
*/
public function set compressedSize (csize:int) : Void;/**
* Gets the crc of the uncompressed data.
*/
public function get crc () : uint;/**
* Sets the crc of the uncompressed data.
*/
public function set crc (crc:uint) : Void;/**
* Gets the compression method.
*/
public function get method () : int;/**
* Sets the compression method.  Only DEFLATED and STORED are
		 * supported.
*/
public function set method (method:int) : Void;/**
* Gets the extra data.
*/
public function get extra () : ByteArray;/**
* Sets the extra data.
*/
public function set extra (extra:ByteArray) : Void;/**
* Gets the extra data.
*/
public function get comment () : String;/**
* Sets the entry comment.
*/
public function set comment (comment:String) : Void;/**
* Creates a zip entry with the given name.
		 * @param name the name. May include directory components separated
		 * by '/'.
*/
public function ZipEntry (name:String);/**
* Gets true, if the entry is a directory.  This is solely
		 * determined by the name, a trailing slash '/' marks a directory.
*/
public function isDirectory () : Boolean;/**
* Gets the string representation of this ZipEntry.  This is just
		 * the name as returned by name.
*/
public function toString () : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\ZipError.as
package nochump.util.zip{import flash.errors.IOError;/**
* Thrown during the creation or input of a zip file.
*/
public class ZipError extends IOError{public function ZipError (message:String = "", id:int = 0);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\ZipFile.as
package nochump.util.zip{import flash.utils.ByteArray;import flash.utils.Dictionary;import flash.utils.Endian;import flash.utils.IDataInput;/**
* This class represents a Zip archive.  You can ask for the contained
	 * entries, or get an input stream for a file entry.  The entry is
	 * automatically decompressed.
	 * 
	 * @author David Chang
*/
public class ZipFile{private var buf : ByteArray;private var entryList : Array;private var entryTable : Dictionary;private var locOffsetTable : Dictionary;/**
* Returns an array of all Zip entries in this Zip file.
*/
public function get entries () : Array;/**
* Returns the number of entries in this zip file.
*/
public function get size () : uint;/**
* Opens a Zip file reading the given data.
		 * 
		 * @param data
*/
public function ZipFile (data:IDataInput);/**
* Searches for a zip entry in this archive with the given name.
		 *
		 * @param name the name. May contain directory components separated by
		 * slashes ('/').
		 * @return the zip entry, or null if no entry with that name exists.
*/
public function getEntry (name:String) : ZipEntry;/**
* Creates a byte array reading the given zip entry as
		 * uncompressed data.  Normally zip entry should be an entry
		 * returned by getEntry() or entries().
		 * 
		 * @param entry the entry to create a byte array for.
		 * @return the byte array, or null if the requested entry does not exist.
*/
public function getInput (entry:ZipEntry) : ByteArray;/**
* Read the central directory of a zip file and fill the entries
		 * array.  This is called exactly once when first needed.
*/
private function readEntries () : void;/**
* Reads the total number of entries in the central dir and
		 * positions buf at the start of the central directory.
*/
private function readEND () : void;private function findEND () : uint;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\nochump\util\zip\ZipOutput.as
package nochump.util.zip{import flash.utils.Dictionary;import flash.utils.Endian;import flash.utils.ByteArray;public class ZipOutput{private var _entry : ZipEntry;private var _entries : Array;private var _names : Dictionary;private var _def : Deflater;private var _crc : CRC32;private var _buf : ByteArray;private var _comment : String;/**
* Returns the number of entries in this zip file.
*/
public function get size () : uint;/**
* Returns the byte array of the finished zip.
*/
public function get byteArray () : ByteArray;/**
*
*/
public function set comment (value:String) : Void;public function ZipOutput ();public function putNextEntry (e:ZipEntry) : void;public function write (b:ByteArray) : void;public function closeEntry () : void;public function finish () : void;private function writeLOC (e:ZipEntry) : void;/**
* Writes extra data descriptor (EXT) for specified entry.
*/
private function writeEXT (e:ZipEntry) : void;/**
* Write central directory (CEN) header for specified entry.
		 * REMIND: add support for file attributes
*/
private function writeCEN (e:ZipEntry) : void;/**
* Writes end of central directory (END) header.
*/
private function writeEND (off:uint, len:uint) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\ASCollada.as
package org.ascollada{/**
*
*/
public class ASCollada{public static const DAE_PROFILE_COMMON_ELEMENT : String;public static const DAE_DATA_ELEMENT : String;public static const DAE_NAMESPACE_ATTRIBUTE : String;public static const DAE_SCHEMA_LOCATION : String;public static const DAE_VERSION_ATTRIBUTE : String;public static const DAE_SCHEMA_VERSION : String;public static const DAE_LIBRARY_ANIMATION_ELEMENT : String;public static const DAE_LIBRARY_ANIMATION_CLIP_ELEMENT : String;public static const DAE_LIBRARY_CAMERA_ELEMENT : String;public static const DAE_LIBRARY_CONTROLLER_ELEMENT : String;public static const DAE_LIBRARY_EFFECT_ELEMENT : String;public static const DAE_LIBRARY_FFIELDS_ELEMENT : String;public static const DAE_LIBRARY_GEOMETRY_ELEMENT : String;public static const DAE_LIBRARY_IMAGE_ELEMENT : String;public static const DAE_LIBRARY_LIGHT_ELEMENT : String;public static const DAE_LIBRARY_MATERIAL_ELEMENT : String;public static const DAE_LIBRARY_NODE_ELEMENT : String;public static const DAE_LIBRARY_PMATERIAL_ELEMENT : String;public static const DAE_LIBRARY_PMODEL_ELEMENT : String;public static const DAE_LIBRARY_PSCENE_ELEMENT : String;public static const DAE_LIBRARY_VSCENE_ELEMENT : String;public static const DAE_INSTANCE_ANIMATION_ELEMENT : String;public static const DAE_INSTANCE_CAMERA_ELEMENT : String;public static const DAE_INSTANCE_CONTROLLER_ELEMENT : String;public static const DAE_INSTANCE_EFFECT_ELEMENT : String;public static const DAE_INSTANCE_GEOMETRY_ELEMENT : String;public static const DAE_INSTANCE_LIGHT_ELEMENT : String;public static const DAE_INSTANCE_MATERIAL_ELEMENT : String;public static const DAE_INSTANCE_NODE_ELEMENT : String;public static const DAE_INSTANCE_VSCENE_ELEMENT : String;public static const DAE_ANIMCLIP_ELEMENT : String;public static const DAE_BIND_ELEMENT : String;public static const DAE_BIND_VERTEX_INPUT : String;public static const DAE_BIND_TEXTURE_SURFACE_ELEMENT : String;public static const DAE_BINDMATERIAL_ELEMENT : String;public static const DAE_COLOR_ELEMENT : String;public static const DAE_CONTROL_VERTICES_ELEMENT : String;public static const DAE_EFFECT_ELEMENT : String;public static const DAE_MIP_LEVELS : String;public static const DAE_MIPMAP_GENERATE : String;public static const DAE_SAMPLER_ELEMENT : String;public static const DAE_SKELETON_ELEMENT : String;public static const DAE_TARGETS_ELEMENT : String;public static const DAE_TECHNIQUE_COMMON_ELEMENT : String;public static const DAE_VIEWPORT_RATIO : String;public static const DAE_VSCENE_ELEMENT : String;public static const DAE_WEIGHTS_ELEMENT : String;public static const DAE_VERTEXCOUNT_ELEMENT : String;public static const DAE_INITASNULL_ELEMENT : String;public static const DAE_INITASTARGET_ELEMENT : String;public static const DAE_INITCUBE_ELEMENT : String;public static const DAE_INITVOLUME_ELEMENT : String;public static const DAE_INITPLANAR_ELEMENT : String;public static const DAE_INITFROM_ELEMENT : String;public static const DAE_ALL_ELEMENT : String;public static const DAE_PRIMARY_ELEMENT : String;public static const DAE_FACE_ELEMENT : String;public static const DAE_ORDER_ELEMENT : String;public static const DAE_FXCMN_ANNOTATE_ELEMENT : String;public static const DAE_FXCMN_BIND_ELEMENT : String;public static const DAE_FXCMN_BOOL_ELEMENT : String;public static const DAE_FXCMN_CODE_ELEMENT : String;public static const DAE_FXCMN_COMPILERTARGET_ELEMENT : String;public static const DAE_FXCMN_COMPILEROPTIONS_ELEMENT : String;public static const DAE_FXCMN_INT_ELEMENT : String;public static const DAE_FXCMN_HALF_ELEMENT : String;public static const DAE_FXCMN_HALF2_ELEMENT : String;public static const DAE_FXCMN_HALF3_ELEMENT : String;public static const DAE_FXCMN_HALF4_ELEMENT : String;public static const DAE_FXCMN_HALF4X4_ELEMENT : String;public static const DAE_FXCMN_FLOAT_ELEMENT : String;public static const DAE_FXCMN_FLOAT2_ELEMENT : String;public static const DAE_FXCMN_FLOAT3_ELEMENT : String;public static const DAE_FXCMN_FLOAT4_ELEMENT : String;public static const DAE_FXCMN_FLOAT4X4_ELEMENT : String;public static const DAE_FXCMN_HINT_ELEMENT : String;public static const DAE_FXCMN_INCLUDE_ELEMENT : String;public static const DAE_FXCMN_SURFACE_ELEMENT : String;public static const DAE_FXCMN_SAMPLER1D_ELEMENT : String;public static const DAE_FXCMN_SAMPLER2D_ELEMENT : String;public static const DAE_FXCMN_SAMPLER3D_ELEMENT : String;public static const DAE_FXCMN_SAMPLERCUBE_ELEMENT : String;public static const DAE_FXCMN_SEMANTIC_ELEMENT : String;public static const DAE_FXCMN_SETPARAM_ELEMENT : String;public static const DAE_FXCMN_NEWPARAM_ELEMENT : String;public static const DAE_FXCMN_STRING_ELEMENT : String;public static const DAE_FXCMN_NAME_ELEMENT : String;public static const DAE_FXCMN_VERTEX_SHADER : String;public static const DAE_FXCMN_FRAGMENT_SHADER : String;public static const DAE_FXSTD_CONSTANT_ELEMENT : String;public static const DAE_FXSTD_LAMBERT_ELEMENT : String;public static const DAE_FXSTD_PHONG_ELEMENT : String;public static const DAE_FXSTD_BLINN_ELEMENT : String;public static const DAE_FXSTD_COLOR_ELEMENT : String;public static const DAE_FXSTD_FLOAT_ELEMENT : String;public static const DAE_FXSTD_TEXTURE_ELEMENT : String;public static const DAE_FXSTD_TEXTURE_ATTRIBUTE : String;public static const DAE_FXSTD_TEXTURESET_ATTRIBUTE : String;public static const DAE_FXSTD_STATE_ALPHA_ELEMENT : String;public static const DAE_FXSTD_STATE_BACK_ELEMENT : String;public static const DAE_FXSTD_STATE_DEST_ELEMENT : String;public static const DAE_FXSTD_STATE_DESTALPHA_ELEMENT : String;public static const DAE_FXSTD_STATE_DESTRGB_ELEMENT : String;public static const DAE_FXSTD_STATE_FACE_ELEMENT : String;public static const DAE_FXSTD_STATE_FAIL_ELEMENT : String;public static const DAE_FXSTD_STATE_FUNC_ELEMENT : String;public static const DAE_FXSTD_STATE_FRONT_ELEMENT : String;public static const DAE_FXSTD_STATE_MASK_ELEMENT : String;public static const DAE_FXSTD_STATE_MODE_ELEMENT : String;public static const DAE_FXSTD_STATE_REF_ELEMENT : String;public static const DAE_FXSTD_STATE_RGB_ELEMENT : String;public static const DAE_FXSTD_STATE_SRC_ELEMENT : String;public static const DAE_FXSTD_STATE_SRCALPHA_ELEMENT : String;public static const DAE_FXSTD_STATE_SRCRGB_ELEMENT : String;public static const DAE_FXSTD_STATE_VALUE : String;public static const DAE_FXSTD_STATE_ZFAIL_ELEMENT : String;public static const DAE_FXSTD_STATE_ZPASS_ELEMENT : String;public static const DAE_CONTROLLER_SKIN_ELEMENT : String;public static const DAE_CONTROLLER_MORPH_ELEMENT : String;public static const DAE_CAMERA_PERSP_ELEMENT : String;public static const DAE_CAMERA_ORTHO_ELEMENT : String;public static const DAE_RGB_ZERO_ELEMENT : String;public static const DAE_A_ONE_ELEMENT : String;public static const DAE_ASPECT_CAMERA_PARAMETER : String;public static const DAE_XFOV_CAMERA_PARAMETER : String;public static const DAE_YFOV_CAMERA_PARAMETER : String;public static const DAE_ZNEAR_CAMERA_PARAMETER : String;public static const DAE_ZFAR_CAMERA_PARAMETER : String;public static const DAE_XMAG_CAMERA_PARAMETER : String;public static const DAE_YMAG_CAMERA_PARAMETER : String;public static const DAE_AMBIENT_MATERIAL_PARAMETER : String;public static const DAE_BUMP_MATERIAL_PARAMETER : String;public static const DAE_DIFFUSE_MATERIAL_PARAMETER : String;public static const DAE_EMISSION_MATERIAL_PARAMETER : String;public static const DAE_TRANSPARENCY_MATERIAL_PARAMETER : String;public static const DAE_TRANSPARENT_MATERIAL_PARAMETER : String;public static const DAE_OPAQUE_MATERIAL_ATTRIBUTE : String;public static const DAE_REFLECTIVE_MATERIAL_PARAMETER : String;public static const DAE_REFLECTIVITY_MATERIAL_PARAMETER : String;public static const DAE_INDEXOFREFRACTION_MATERIAL_PARAMETER : String;public static const DAE_SHININESS_MATERIAL_PARAMETER : String;public static const DAE_SPECULAR_MATERIAL_PARAMETER : String;public static const DAE_LIGHT_AMBIENT_ELEMENT : String;public static const DAE_LIGHT_POINT_ELEMENT : String;public static const DAE_LIGHT_DIRECTIONAL_ELEMENT : String;public static const DAE_LIGHT_SPOT_ELEMENT : String;public static const DAE_COLOR_LIGHT_PARAMETER : String;public static const DAE_CONST_ATTENUATION_LIGHT_PARAMETER : String;public static const DAE_LIN_ATTENUATION_LIGHT_PARAMETER : String;public static const DAE_QUAD_ATTENUATION_LIGHT_PARAMETER : String;public static const DAE_FALLOFFEXPONENT_LIGHT_PARAMETER : String;public static const DAE_FALLOFFANGLE_LIGHT_PARAMETER : String;public static const DAE_BINDSHAPEMX_SKIN_PARAMETER : String;public static const DAE_CONTRIBUTOR_ASSET_ELEMENT : String;public static const DAE_AUTHOR_ASSET_PARAMETER : String;public static const DAE_AUTHORINGTOOL_ASSET_PARAMETER : String;public static const DAE_CREATED_ASSET_PARAMETER : String;public static const DAE_COMMENTS_ASSET_PARAMETER : String;public static const DAE_COPYRIGHT_ASSET_PARAMETER : String;public static const DAE_KEYWORDS_ASSET_PARAMETER : String;public static const DAE_MODIFIED_ASSET_PARAMETER : String;public static const DAE_REVISION_ASSET_PARAMETER : String;public static const DAE_SOURCEDATA_ASSET_PARAMETER : String;public static const DAE_SUBJECT_ASSET_PARAMETER : String;public static const DAE_TITLE_ASSET_PARAMETER : String;public static const DAE_UNITS_ASSET_PARAMETER : String;public static const DAE_UP : String;public static const DAE_PHYSICS_STATIC_FRICTION : String;public static const DAE_PHYSICS_DYNAMIC_FRICTION : String;public static const DAE_PHYSICS_RESTITUTION : String;public static const DAE_CLOSED_ATTRIBUTE : String;public static const DAE_CLOSEDU_ATTRIBUTE : String;public static const DAE_CLOSEDV_ATTRIBUTE : String;public static const DAE_COUNT_ATTRIBUTE : String;public static const DAE_DEGREE_ATTRIBUTE : String;public static const DAE_UDEGREE_ATTRIBUTE : String;public static const DAE_VDEGREE_ATTRIBUTE : String;public static const DAE_END_ATTRIBUTE : String;public static const DAE_ID_ATTRIBUTE : String;public static const DAE_MATERIAL_ATTRIBUTE : String;public static const DAE_METERS_ATTRIBUTE : String;public static const DAE_METHOD_ATTRIBUTE : String;public static const DAE_NAME_ATTRIBUTE : String;public static const DAE_OFFSET_ATTRIBUTE : String;public static const DAE_PLATFORM_ATTRIBUTE : String;public static const DAE_PROFILE_ATTRIBUTE : String;public static const DAE_REF_ATTRIBUTE : String;public static const DAE_SEMANTIC_ATTRIBUTE : String;public static const DAE_INDEX_ATTRIBUTE : String;public static const DAE_INPUT_SEMANTIC_ATTRIBUTE : String;public static const DAE_INPUT_SET_ATTRIBUTE : String;public static const DAE_SET_ATTRIBUTE : String;public static const DAE_SID_ATTRIBUTE : String;public static const DAE_START_ATTRIBUTE : String;public static const DAE_STRIDE_ATTRIBUTE : String;public static const DAE_SOURCE_ATTRIBUTE : String;public static const DAE_SURFACE_ATTRIBUTE : String;public static const DAE_SYMBOL_ATTRIBUTE : String;public static const DAE_TARGET_ATTRIBUTE : String;public static const DAE_TEXTURE_ATTRIBUTE : String;public static const DAE_TYPE_ATTRIBUTE : String;public static const DAE_URL_ATTRIBUTE : String;public static const DAE_STAGE_ATTRIBUTE : String;public static const DAE_VALUE : String;public static const DAE_MIP_ATTRIBUTE : String;public static const DAE_SLICE_ATTRIBUTE : String;public static const DAE_FACE_ATTRIBUTE : String;public static const DAE_FLOAT_TYPE : String;public static const DAE_IDREF_TYPE : String;public static const DAE_MATRIX_TYPE : String;public static const DAE_NAME_TYPE : String;public static const DAE_IMAGE_INPUT : String;public static const DAE_TEXTURE_INPUT : String;public static const DAE_WEIGHT_MORPH_INPUT : String;public static const DAE_WEIGHT_MORPH_INPUT_DEPRECATED : String;public static const DAE_TARGET_MORPH_INPUT : String;public static const DAE_TARGET_MORPH_INPUT_DEPRECATED : String;public static const DAE_TIME_TARGET : String;public static const DAE_JOINT_NODE_TYPE : String;public static const DAE_NODE_NODE_TYPE : String;public static const DAE_CVS_SPLINE_INPUT : String;public static const DAE_KNOT_SPLINE_INPUT : String;public static const DAE_WEIGHT_SPLINE_INPUT : String;public static const DAE_PHYSICS_MATERIAL_ELEMENT : String;public static const DAE_PHYSICS_MODEL_ELEMENT : String;public static const DAE_PHYSICS_SCENE_ELEMENT : String;public static const DAE_INSTANCE_PHYSICS_MATERIAL_ELEMENT : String;public static const DAE_INSTANCE_PHYSICS_MODEL_ELEMENT : String;public static const DAE_INSTANCE_PHYSICS_SCENE_ELEMENT : String;public static const DAE_INSTANCE_RIGID_BODY_ELEMENT : String;public static const DAE_INSTANCE_RIGID_CONSTRAINT_ELEMENT : String;public static const DAE_INSTANCE_FORCE_FIELD_ELEMENT : String;public static const DAE_TIME_STEP_ATTRIBUTE : String;public static const DAE_GRAVITY_ATTRIBUTE : String;public static const DAE_RESTITUTION_ATTRIBUTE : String;public static const DAE_STATIC_FRICTION_ATTRIBUTE : String;public static const DAE_DYNAMIC_FRICTION_ATTRIBUTE : String;public static const DAE_VELOCITY_ELEMENT : String;public static const DAE_ANGULAR_VELOCITY_ELEMENT : String;public static const DAE_BODY_ATTRIBUTE : String;public static const DAE_CONSTRAINT_ATTRIBUTE : String;public static const DAE_MASS_FRAME_ELEMENT : String;public static const DAE_LIMITS_ELEMENT : String;public static const DAE_LINEAR_ELEMENT : String;public static const DAE_ANGULAR_ELEMENT : String;public static const DAE_SWING_CONE_AND_TWIST_ELEMENT : String;public static const DAE_CONVEX_HULL_OF_ATTRIBUTE : String;public static const DAE_HEIGHT_ELEMENT : String;public static const DAE_MIN_ELEMENT : String;public static const DAE_MAX_ELEMENT : String;public static const DAE_SHAPE_ELEMENT : String;public static const DAE_RIGID_BODY_ELEMENT : String;public static const DAE_DYNAMIC_ELEMENT : String;public static const DAE_HOLLOW_ELEMENT : String;public static const DAE_MASS_ELEMENT : String;public static const DAE_BOX_ELEMENT : String;public static const DAE_SPHERE_ELEMENT : String;public static const DAE_CAPSULE_ELEMENT : String;public static const DAE_CYLINDER_ELEMENT : String;public static const DAE_ELLIPSOID_ELEMENT : String;public static const DAE_TAPERED_CAPSULE_ELEMENT : String;public static const DAE_TAPERED_CYLINDER_ELEMENT : String;public static const DAE_PLANE_ELEMENT : String;public static const DAE_FORMAT_ELEMENT : String;public static const DAE_FORMAT_HINT_ELEMENT : String;public static const DAE_PRECISION_ELEMENT : String;public static const DAE_OPTION_ELEMENT : String;public static const DAE_HALF_EXTENTS_ELEMENT : String;public static const DAE_EQUATION_ELEMENT : String;public static const DAE_SIZE_ELEMENT : String;public static const DAE_RADIUS_ELEMENT : String;public static const DAE_RADIUS1_ELEMENT : String;public static const DAE_RADIUS2_ELEMENT : String;public static const DAE_CONVEX_MESH_ELEMENT : String;public static const DAE_INERTIA_ELEMENT : String;public static const DAE_DENSITY_ELEMENT : String;public static const DAE_CENTER_OF_MASS_ELEMENT : String;public static const DAE_DYNAMICS_ELEMENT : String;public static const DAE_RIGID_CONSTRAINT_ELEMENT : String;public static const DAE_FORCE_FIELD_ELEMENT : String;public static const DAE_ATTACHMENT_ELEMENT : String;public static const DAE_REF_ATTACHMENT_ELEMENT : String;public static const DAE_ROT_LIMIT_MIN_ELEMENT : String;public static const DAE_ROT_LIMIT_MAX_ELEMENT : String;public static const DAE_TRANS_LIMIT_MIN_ELEMENT : String;public static const DAE_TRANS_LIMIT_MAX_ELEMENT : String;public static const DAE_ENABLED_ELEMENT : String;public static const DAE_INTERPENETRATE_ELEMENT : String;public static const DAE_SPRING_ELEMENT : String;public static const DAE_STIFFNESS_ELEMENT : String;public static const DAE_DAMPING_ELEMENT : String;public static const DAE_TARGET_VALUE : String;public static const DAE_ANNOTATE_ELEMENT : String;public static const DAE_TRUE_KEYWORD : String;public static const DAE_FALSE_KEYWORD : String;public static const DAE_FORMAT_HINT_RGB_VALUE : String;public static const DAE_FORMAT_HINT_RGBA_VALUE : String;public static const DAE_FORMAT_HINT_L_VALUE : String;public static const DAE_FORMAT_HINT_LA_VALUE : String;public static const DAE_FORMAT_HINT_D_VALUE : String;public static const DAE_FORMAT_HINT_XYZ_VALUE : String;public static const DAE_FORMAT_HINT_XYZW_VALUE : String;public static const DAE_FORMAT_HINT_SNORM_VALUE : String;public static const DAE_FORMAT_HINT_UNORM_VALUE : String;public static const DAE_FORMAT_HINT_SINT_VALUE : String;public static const DAE_FORMAT_HINT_UINT_VALUE : String;public static const DAE_FORMAT_HINT_FLOAT_VALUE : String;public static const DAE_FORMAT_HINT_LOW_VALUE : String;public static const DAE_FORMAT_HINT_MID_VALUE : String;public static const DAE_FORMAT_HINT_HIGH_VALUE : String;public static const DAE_FORMAT_HINT_SRGB_GAMMA_VALUE : String;public static const DAE_FORMAT_HINT_NORMALIZED3_VALUE : String;public static const DAE_FORMAT_HINT_NORMALIZED4_VALUE : String;public static const DAE_FORMAT_HINT_COMPRESSABLE_VALUE : String;public static const DAE_EMITTER_ELEMENT : String;public static const DAE_LIBRARY_EMITTER_ELEMENT : String;public static const DAE_INSTANCE_EMITTER_ELEMENT : String;public static const DAE_ACCESSOR_ELEMENT : String;public static const DAE_ANIMATION_ELEMENT : String;public static const DAE_ASSET_ELEMENT : String;public static const DAE_CAMERA_ELEMENT : String;public static const DAE_CHANNEL_ELEMENT : String;public static const DAE_CHANNELS_ELEMENT : String;public static const DAE_COLLADA_ELEMENT : String;public static const DAE_CONTROLLER_ELEMENT : String;public static const DAE_DEPTH_ELEMENT : String;public static const DAE_EXTRA_ELEMENT : String;public static const DAE_RANGE_ELEMENT : String;public static const DAE_BOOL_ARRAY_ELEMENT : String;public static const DAE_FLOAT_ARRAY_ELEMENT : String;public static const DAE_GEOMETRY_ELEMENT : String;public static const DAE_HOLE_ELEMENT : String;public static const DAE_IDREF_ARRAY_ELEMENT : String;public static const DAE_IMAGE_ELEMENT : String;public static const DAE_INPUT_ELEMENT : String;public static const DAE_INT_ARRAY_ELEMENT : String;public static const DAE_JOINTS_ELEMENT : String;public static const DAE_LIGHT_ELEMENT : String;public static const DAE_LINES_ELEMENT : String;public static const DAE_LINESTRIPS_ELEMENT : String;public static const DAE_LOOKAT_ELEMENT : String;public static const DAE_MATERIAL_ELEMENT : String;public static const DAE_MATRIX_ELEMENT : String;public static const DAE_MESH_ELEMENT : String;public static const DAE_NAME_ARRAY_ELEMENT : String;public static const DAE_NODE_ELEMENT : String;public static const DAE_OPTICS_ELEMENT : String;public static const DAE_PARAMETER : String;public static const DAE_PASS_ELEMENT : String;public static const DAE_POLYGON_ELEMENT : String;public static const DAE_POLYGONHOLED_ELEMENT : String;public static const DAE_POLYGONS_ELEMENT : String;public static const DAE_POLYLIST_ELEMENT : String;public static const DAE_REST_LENGTH_ELEMENT : String;public static const DAE_ROTATE_ELEMENT : String;public static const DAE_SCALE_ELEMENT : String;public static const DAE_SCENE_ELEMENT : String;public static const DAE_SHADER : String;public static const DAE_SOURCE_ELEMENT : String;public static const DAE_SPLINE_ELEMENT : String;public static const DAE_SKEW_ELEMENT : String;public static const DAE_TECHNIQUE_ELEMENT : String;public static const DAE_TEXTURE_ELEMENT : String;public static const DAE_TEXTURE_SURFACE_ELEMENT : String;public static const DAE_TRANSLATE_ELEMENT : String;public static const DAE_TRIANGLES_ELEMENT : String;public static const DAE_TRIFANS_ELEMENT : String;public static const DAE_TRIM_GROUP : String;public static const DAE_TRISTRIPS_ELEMENT : String;public static const DAE_VERTEX_ELEMENT : String;public static const DAE_VERTICES_ELEMENT : String;public static const DAE_WIDTH_ELEMENT : String;public static const DAE_BINDMATRIX_SKIN_INPUT : String;public static const DAE_JOINT_SKIN_INPUT : String;public static const DAE_WEIGHT_SKIN_INPUT : String;public static const DAE_INPUT_ANIMATION_INPUT : String;public static const DAE_OUTPUT_ANIMATION_INPUT : String;public static const DAE_INTANGENT_ANIMATION_INPUT : String;public static const DAE_OUTTANGENT_ANIMATION_INPUT : String;public static const DAE_INTERPOLATION_ANIMATION_INPUT : String;public static const DAEFC_TCB_ANIMATION_INPUT : String;public static const DAEFC_EASE_INOUT_ANIMATION_INPUT : String;public static const DAE_X_UP : String;public static const DAE_Y_UP : String;public static const DAE_Z_UP : String;public static const DAESHD_DOUBLESIDED_PARAMETER : String;public static const DAEMAX_MAX_PROFILE : String;public static const DAEMAX_TARGET_CAMERA_PARAMETER : String;public static const DAEMAX_ASPECTRATIO_LIGHT_PARAMETER : String;public static const DAEMAX_TARGET_LIGHT_PARAMETER : String;public static const DAEMAX_DEFAULT_TARGET_DIST_LIGHT_PARAMETER : String;public static const DAEMAX_OUTERCONE_LIGHT_PARAMETER : String;public static const DAEMAX_OVERSHOOT_LIGHT_PARAMETER : String;public static const DAEMAX_SPECLEVEL_MATERIAL_PARAMETER : String;public static const DAEMAX_DISPLACEMENT_MATERIAL_PARAMETER : String;public static const DAEMAX_EMISSIONLEVEL_MATERIAL_PARAMETER : String;public static const DAEMAX_FACETED_MATERIAL_PARAMETER : String;public static const DAEMAX_FILTERCOLOR_MATERIAL_PARAMETER : String;public static const DAEMAX_INDEXOFREFRACTION_MATERIAL_PARAMETER : String;public static const DAEMAX_USERPROPERTIES_NODE_PARAMETER : String;public static const DAEMAX_WIREFRAME_MATERIAL_PARAMETER : String;public static const DAEMAX_FACEMAP_MATERIAL_PARAMETER : String;public static const DAEMAX_AMOUNT_TEXTURE_PARAMETER : String;public static const DAEMAX_CAMERA_TARGETDISTANCE_PARAMETER : String;public static const DAEMAX_FRAMERATE_PARAMETER : String;public static const DAEMAX_DECAY_TYPE : String;public static const DAEMAX_DECAY_START_PARAMETER : String;public static const DAEMAX_USE_NEAR_ATTEN_PARAMETER : String;public static const DAEMAX_NEAR_ATTEN_START_PARAMETER : String;public static const DAEMAX_NEAR_ATTEN_END_PARAMETER : String;public static const DAEMAX_USE_FAR_ATTEN_PARAMETER : String;public static const DAEMAX_FAR_ATTEN_START_PARAMETER : String;public static const DAEMAX_FAR_ATTEN_END_PARAMETER : String;public static const DAEMAX_SHADOW_ATTRIBS : String;public static const DAEMAX_SHADOW_TYPE : String;public static const DAEMAX_SHADOW_TYPE_MAP : String;public static const DAEMAX_SHADOW_TYPE_RAYTRACE : String;public static const DAEMAX_SHADOW_AFFECTS : String;public static const DAEMAX_SHADOW_LIST_NODE : String;public static const DAEMAX_SHADOW_LIST_EXCLUDES : String;public static const DAEMAX_SHADOW_LIST_ILLUMINATES : String;public static const DAEMAX_SHADOW_LIST_CASTS : String;public static const DAEMAX_LIGHT_AFFECTS_SHADOW : String;public static const DAEMAX_PROJ_IMAGE : String;public static const DAEMAX_LIGHT_MAP : String;public static const DAEMAX_SHADOW_MAP : String;public static const DAEMAX_SHADOW_PROJ_COLOR : String;public static const DAEMAX_SHADOW_PROJ_COLOR_MULT : String;public static const DAEMAX_SKY_LIGHT : String;public static const DAEMAX_SKY_RAYS_PER_SAMPLE_PARAMETER : String;public static const DAEMAX_SKY_RAY_BIAS_PARAMETER : String;public static const DAEMAX_SKY_CAST_SHADOWS_PARAMETER : String;public static const DAEMAX_SKY_COLOR_MAP : String;public static const DAEMAX_SKY_COLOR_MAP_ON_PARAMETER : String;public static const DAEMAX_SKY_COLOR_MAP_AMOUNT_PARAMETER : String;public static const DAEMAX_SKY_SKYMODE : String;public static const DAEMAX_SKY_INTENSITY_ON : String;public static const DAEMAX_CAMERA_MOTIONBLUR_ELEMENT : String;public static const DAEMAX_CAMERA_MB_DISPLAYPASSES_PARAMETER : String;public static const DAEMAX_CAMERA_MB_TOTALPASSES_PARAMETER : String;public static const DAEMAX_CAMERA_MB_DURATION_PARAMETER : String;public static const DAEMAX_CAMERA_MB_BIAS_PARAMETER : String;public static const DAEMAX_CAMERA_MB_NORMWEIGHTS_PARAMETER : String;public static const DAEMAX_CAMERA_MB_DITHERSTRENGTH_PARAMETER : String;public static const DAEMAX_CAMERA_MB_TILESIZE_PARAMETER : String;public static const DAEMAX_CAMERA_MB_DISABLEFILTER_PARAMETER : String;public static const DAEMAX_CAMERA_MB_DISABLEANTIALIAS_PARAMETER : String;public static const DAEMAYA_MAYA_PROFILE : String;public static const DAEMAYA_VAPERTURE_PARAMETER : String;public static const DAEMAYA_HAPERTURE_PARAMETER : String;public static const DAEMAYA_LENSSQUEEZE_PARAMETER : String;public static const DAEMAYA_PENUMBRA_LIGHT_PARAMETER : String;public static const DAEMAYA_DROPOFF_LIGHT_PARAMETER : String;public static const DAEMAYA_AMBIENTSHADE_LIGHT_PARAMETER : String;public static const DAEMAYA_NOTE_PARAMETER : String;public static const DAEMAYA_ENDTIME_PARAMETER : String;public static const DAEMAYA_STARTTIME_PARAMETER : String;public static const DAEMAYA_DRIVER_INPUT : String;public static const DAEMAYA_WEIGHT_INPUT : String;public static const DAEMAYA_BLINDNAME_PARAMETER : String;public static const DAEMAYA_BLINDTYPE : String;public static const DAEMAYA_DOUBLE_SIDED_PARAMETER : String;public static const DAEMAYA_LAYER_PARAMETER : String;public static const DAEMAYA_LONGNAME_PARAMETER : String;public static const DAEMAYA_PREINFINITY_PARAMETER : String;public static const DAEMAYA_POSTINFINITY_PARAMETER : String;public static const DAEMAYA_SHORTNAME_PARAMETER : String;public static const DAEMAYA_TEXTURE_WRAPU_PARAMETER : String;public static const DAEMAYA_TEXTURE_WRAPV_PARAMETER : String;public static const DAEMAYA_TEXTURE_MIRRORU_PARAMETER : String;public static const DAEMAYA_TEXTURE_MIRRORV_PARAMETER : String;public static const DAEMAYA_TEXTURE_COVERAGEU_PARAMETER : String;public static const DAEMAYA_TEXTURE_COVERAGEV_PARAMETER : String;public static const DAEMAYA_TEXTURE_TRANSFRAMEU_PARAMETER : String;public static const DAEMAYA_TEXTURE_TRANSFRAMEV_PARAMETER : String;public static const DAEMAYA_TEXTURE_ROTFRAME_PARAMETER : String;public static const DAEMAYA_TEXTURE_STAGGER_PARAMETER : String;public static const DAEMAYA_TEXTURE_REPEATU_PARAMETER : String;public static const DAEMAYA_TEXTURE_REPEATV_PARAMETER : String;public static const DAEMAYA_TEXTURE_OFFSETU_PARAMETER : String;public static const DAEMAYA_TEXTURE_OFFSETV_PARAMETER : String;public static const DAEMAYA_TEXTURE_ROTATEUV_PARAMETER : String;public static const DAEMAYA_TEXTURE_NOISEU_PARAMETER : String;public static const DAEMAYA_TEXTURE_NOISEV_PARAMETER : String;public static const DAEMAYA_TEXTURE_FAST_PARAMETER : String;public static const DAEMAYA_TEXTURE_BLENDMODE_PARAMETER : String;public static const DAEMAYA_PROJECTION_ELEMENT : String;public static const DAEMAYA_PROJECTION_TYPE : String;public static const DAEMAYA_PROJECTION_MATRIX_PARAMETER : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeAccessor.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeAccessor extends DaeEntity{/**
count - required
*/
public var count : uint;/**
source - required
*/
public var source : String;/**
offset - optional - default 0
*/
public var offset : uint;/**
stride - optional - default 1
*/
public var stride : uint;/**
params - optional - 0 or more
*/
public var params : Object;/**
* 		 * @param	node		 * @return
*/
public function DaeAccessor (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeAnimation.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeChannel;import org.ascollada.core.DaeEntity;import org.ascollada.core.DaeSampler;import org.ascollada.core.DaeSource;import org.ascollada.namespaces.collada;import org.ascollada.types.DaeAddressSyntax;/**
*
*/
public class DaeAnimation extends DaeEntity{/**
channels
*/
public var channels : Array;/**
child animations
*/
public var animations : Array;private static var _newID : int;/**
* 		 * @param	node		 * 		 * @return
*/
public function DaeAnimation (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeAnimationClip.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;/**
*
*/
public class DaeAnimationClip extends DaeEntity{/**
start time
*/
public var start : Number;/**
end time
*/
public var end : Number;/**

*/
public var instance_animation : Array;/**
* 		 * @param	node		 * 		 * @return
*/
public function DaeAnimationClip (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeAnimationCurve.as
package org.ascollada.core{import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeAnimationCurve extends DaeEntity{public static const INTERPOLATION_STEP : uint;public static const INTERPOLATION_LINEAR : uint;public static const INTERPOLATION_BEZIER : uint;public static const INTERPOLATION_TCB : uint;public static const INTERPOLATION_UNKNOWN : uint;public static const INTERPOLATION_DEFAULT : uint;public static const INFINITY_CONSTANT : uint;public static const INFINITY_LINEAR : uint;public static const INFINITY_CYCLE : uint;public static const INFINITY_CYCLE_RELATIVE : uint;public static const INFINITY_OSCILLATE : uint;public static const INFINITY_UNKNOWN : uint;public static const INFINITY_DEFAULT : uint;public var keys : Array;public var keyValues : Array;public var interpolations : Array;public var inTangents : Array;public var outTangents : Array;public var tcbParameters : Array;public var easeInOuts : Array;public var preInfinity : uint;public var postInfinity : uint;public var interpolationType : uint;/**
* 		 * @param	keys		 * @param	keyValues
*/
public function DaeAnimationCurve (keys:Array = null, keyValues:Array = null);/**
* main workhorse for the animation system.		 * 		 * @param	time		 * 		 * @return
*/
public function evaluate (dt:Number) : Number;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeAsset.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeAsset extends DaeEntity{public var contributors : Array;public var created : String;public var keywords : String;public var modified : String;public var title : String;public var subject : String;public var revision : String;public var unit_meter : Number;public var unit_name : String;public var yUp : String;/**
* 		 * @param	node		 * @return
*/
public function DaeAsset (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;/**
* 		 * @param	indent
*/
public function write (indent:String = "") : String;/**
* 		 * @param	asset		 * 		 * @return
*/
private function parseContributors (asset:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeBlendWeight.as
package org.ascollada.core{/**
*
*/
public class DaeBlendWeight{public var vertexIndex : uint;public var joint : String;public var weight : Number;public var originalWeight : Number;/**
* 		 * @param	vertexIndex		 * @param	weight
*/
public function DaeBlendWeight (vertexIndex:uint = 0, joint:String = "", weight:Number = 0.0);/**
* 		 * @return
*/
public function toString () : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeCamera.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;public class DaeCamera extends DaeEntity{public static const TYPE_X : uint;public static const TYPE_Y : uint;public var ortho : Boolean;public var fov : Number;public var mag : Number;public var aspect_ratio : Number;public var near : Number;public var far : Number;public var target : String;public var type : uint;/**
* 		 * @param	node		 * @return
*/
public function DaeCamera (document:DaeDocument, node:XML);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;/**
* 		 * @param	node		 * @return
*/
private function readOptics (node:XML) : void;/**
* 		 * @param	node		 * @return
*/
private function readTechniqueCommon (node:XML) : void;/**
* 		 * @param	node		 * @return
*/
private function readPerspective (node:XML) : void;/**
* 		 * @param	node		 * @return
*/
private function readOrthogonal (node:XML) : void;/**
* 		 * @param	node		 * @return
*/
private function readExtra (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeChannel.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.types.DaeAddressSyntax;/**
*
*/
public class DaeChannel extends DaeEntity{/**
source - required
*/
public var source : String;/**
target - required
*/
public var target : String;/**
some info on the target attribute
*/
public var syntax : DaeAddressSyntax;/**

*/
public var sampler : DaeSampler;/**
* 		 * @param	node		 *  		 * @return
*/
public function DaeChannel (document:DaeDocument, node:XML);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeContributor.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeContributor extends DaeEntity{public var author : String;public var authoring_tool : String;public var comment : String;public var source_data : String;/**
* 		 * @param	node		 * @return
*/
public function DaeContributor (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;/**
* 		 * @param	indent
*/
public function write (indent:String = "") : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeController.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.core.DaeMorph;import org.ascollada.core.DaeSkin;import org.ascollada.utils.Logger;/**
*
*/
public class DaeController extends DaeEntity{public static const TYPE_SKIN : uint;public static const TYPE_MORPH : uint;/**

*/
public var type : uint;/**

*/
public var skin : DaeSkin;/**

*/
public var morph : DaeMorph;/**
* 		 * @param	node		 * @return
*/
public function DaeController (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeDocument.as
package org.ascollada.core{import flash.display.Bitmap;import flash.display.LoaderInfo;import flash.net.URLRequest;import flash.events.IOErrorEvent;import flash.events.Event;import flash.display.Loader;import org.ascollada.ASCollada;import org.ascollada.fx.DaeEffect;import org.ascollada.fx.DaeMaterial;import org.ascollada.namespaces.*;import org.ascollada.physics.DaePhysicsScene;import org.ascollada.utils.Logger;import org.ascollada.types.DaeAddressSyntax;/**
*
*/
public class DaeDocument extends DaeEntity{public static const X_UP : uint;public static const Y_UP : uint;public static const Z_UP : uint;public var COLLADA : XML;public var version : String;public var sources : Object;public var animation_clips : Object;public var animations : Object;public var animatables : Object;public var controllers : Object;public var effects : Object;public var images : Object;public var materials : Object;public var geometries : Object;public var physics_scenes : Object;public var visual_scenes : Object;public var nodes : Object;public var cameras : Object;public var vscene : DaeVisualScene;public var pscene : DaePhysicsScene;public var yUp : uint;public var materialSymbolToTarget : Object;public var materialTargetToSymbol : Object;public var numSources : int;public var baseUrl : String;private var _waitingSources : Array;private var _queuedImages : Array;private var _fileSearchPaths : Array;private var _currentImagePath : int;private var _loadingImage : DaeImage;public function get waitingSources () : Array;/**
*
*/
public function DaeDocument (object:Object, async:Boolean = false);/**
* 		 * @return
*/
private function buildMaterialTable () : void;/**
* 		 * @param	id		 * @return
*/
private function findDaeNodeById (node:DaeNode, id:String, useSID:Boolean = false) : DaeNode;/**
*
*/
public function addFileSearchPath (path:String) : void;/**
* 		 * @param	id		 * @return
*/
public function getDaeNodeById (id:String, useSID:Boolean = false) : DaeNode;/**
* 		 * @param	id		 * @return
*/
public function getDaeNodeByIdOrSID (id:String) : DaeNode;/**
*
*/
public function getDaeChannelsForID (id:String) : Array;/**
*
*/
private function findDaeInstanceGeometry (node:DaeNode, url:String) : DaeInstanceGeometry;/**
*
*/
public function getDaeInstanceGeometry (url:String) : DaeInstanceGeometry;/**
*
*/
public function readNextSource () : Boolean;/**
*
*/
public function readNextImage () : Boolean;private function loadImage () : void;private function onImageComplete (event:Event) : void;private function onImageIOError (event:IOErrorEvent) : void;/**
*
*/
public function destroy () : void;/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;/**
*
*/
public function readAfterSources () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibAnimations () : void;/**
*
*/
private function readAnimation (animation:DaeAnimation) : void;/**
* 		 * @param	node		 * @return
*/
private function readLibAnimationClips () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibCameras () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibControllers () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibEffects () : void;/**
* 		 * @param	async		 * @return
*/
private function readLibGeometries () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibImages () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibMaterials () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibNodes () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibPhysicsScenes () : void;/**
* 		 * @param	node		 * @return
*/
private function readLibVisualScenes () : void;/**
* 		 * @return
*/
private function readScene () : void;/**
*
*/
private function readSources () : void;/**
*		 * @return
*/
protected function buildImagePath (meshFolderPath:String, imgPath:String) : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeEntity.as
package org.ascollada.core{import flash.events.EventDispatcher;import org.ascollada.ASCollada;import org.ascollada.namespaces.*;import org.ascollada.utils.StringUtil;/**
*
*/
public class DaeEntity extends EventDispatcher{/**

*/
public var id : String;/**

*/
public var name : String;/**

*/
public var sid : String;/**

*/
public var asset : DaeAsset;/**

*/
public var extras : Object;/**

*/
public var async : Boolean;/**

*/
public var document : DaeDocument;/**
* 		 * @param	node
*/
public function DaeEntity (document:DaeDocument, node:XML = null, async:Boolean = false);/**
*
*/
public function destroy () : void;/**
* 		 * @param	node		 * @param	name		 * @return
*/
public function getAttributeAsFloat (node:XML, name:String, defaultValue:Number = 0) : Number;/**
* 		 * @param	node		 * @param	name		 * @return
*/
public function getAttributeAsInt (node:XML, name:String, defaultValue:int = 0) : int;/**
* 		 * @param	node		 * @param	name		 * @param	stripPound		 * @return
*/
public function getAttribute (node:XML, name:String, stripPound:Boolean = true) : String;/**
* 		 * @param	node		 * @return
*/
public function getBools (node:XML) : Array;/**
* 		 * @param	node		 * @return
*/
public function getFloats (node:XML) : Array;/**
* 		 * @param	node		 * @return
*/
public function getInts (node:XML) : Array;/**
* 		 * @param	node		 * @return
*/
public function getStrings (node:XML) : Array;/**
* 		 * @param	parent		 * @param	nodeName		 * @return
*/
public function getNode (parent:XML, nodeName:String) : XML;/**
* 		 * @param	parent		 * @param	nodeName		 * @return
*/
public function getNodeById (parent:XML, nodeName:String, id:String) : XML;/**
* 		 * @param	parent		 * @return
*/
public function getNodeContent (parent:XML) : String;/**
* 		 * @param	parent		 * @param	nodeName		 * @return
*/
public function getNodeList (parent:XML, nodeName:String) : XMLList;/**
* 		 * @return
*/
public function read (node:XML) : void;public function write (indent:String = "") : String;public function writeSimpleEndElement (nodeName:String, indent:String = "") : String;public function writeSimpleStartElement (nodeName:String, indent:String = "") : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeGeometry.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.physics.DaeConvexMesh;import org.ascollada.utils.Logger;/**
*
*/
public class DaeGeometry extends DaeEntity{public var convex_mesh : DaeConvexMesh;public var mesh : DaeMesh;public var spline : DaeSpline;public var splines : Array;/**
* 		 * @param	node
*/
public function DaeGeometry (document:DaeDocument, node:XML = null, async:Boolean = false);/**
* 		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeImage.as
package org.ascollada.core{import flash.display.BitmapData;import org.ascollada.ASCollada;import org.ascollada.core.DaeAsset;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;/**
*
*/
public class DaeImage extends DaeEntity{/**

*/
public var init_from : String;/**

*/
public var bitmapData : BitmapData;/**
*
*/
public function DaeImage (document:DaeDocument, node:XML = null);public function destroy () : void;/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeInput.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeInput extends DaeEntity{/**

*/
public var semantic : String;/**

*/
public var source : String;/**

*/
public var offset : uint;/**

*/
public var setId : uint;/**
* 		 * @param	node		 * @return
*/
public function DaeInput (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeInstanceController.as
package org.ascollada.core{import org.ascollada.fx.DaeBindMaterial;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;public class DaeInstanceController extends DaeEntity{/**

*/
public var url : String;/**

*/
public var skeleton : String;/**

*/
public var skeletons : Array;/**

*/
public var bindMaterial : DaeBindMaterial;/**
*
*/
public function DaeInstanceController (document:DaeDocument, node:XML = null);/**
*
*/
public function destroy () : void;/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeInstanceGeometry.as
package org.ascollada.core{import org.ascollada.fx.DaeBindMaterial;import org.ascollada.ASCollada;import org.ascollada.fx.DaeBindVertexInput;import org.ascollada.fx.DaeInstanceMaterial;/**
*
*/
public class DaeInstanceGeometry extends DaeEntity{/**

*/
public var url : String;/**

*/
public var bindMaterial : DaeBindMaterial;/**
*
*/
public function DaeInstanceGeometry (document:DaeDocument, node:XML = null);/**
*
*/
public function destroy () : void;/**
*
*/
public function findBindVertexInput (materialId:String, semantic:String) : DaeBindVertexInput;/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeInstanceNode.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeInstanceNode extends DaeEntity{public var url : String;/**
*
*/
public function DaeInstanceNode (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeMesh.as
package org.ascollada.core{import org.ascollada.ASCollada;/**
*
*/
public class DaeMesh extends DaeEntity{/**

*/
public var geometry : DaeGeometry;/**
vertices
*/
public var vertices : DaeVertices;/**

*/
public var primitives : Array;/**
* 		 * @param	node
*/
public function DaeMesh (document:DaeDocument, geometry:DaeGeometry, node:XML = null);/**
*
*/
public function destroy () : void;/**
* 		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeMorph.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;/**
*
*/
public class DaeMorph extends DaeEntity{public static const METHOD_NORMALIZED : String;public static const METHOD_RELATIVE : String;public var source : String;public var targets : DaeSource;public var weights : DaeSource;public var method : String;/**
* 		 * @param	node		 * @return
*/
public function DaeMorph (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeNode.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;import org.ascollada.core.DaeInstanceController;import org.ascollada.core.DaeInstanceGeometry;import org.ascollada.types.DaeTransform;/**
*
*/
public class DaeNode extends DaeEntity{public static const TYPE_NODE : uint;public static const TYPE_JOINT : uint;/**
node type, can be TYPE_NODE or TYPE_JOINT
*/
public var type : uint;/**
array of childnodes
*/
public var nodes : Array;/**

*/
public var transforms : Array;/**
array of controller instances
*/
public var controllers : Array;/**
array of geometry instances
*/
public var geometries : Array;/**
array of instance_node instances
*/
public var instance_nodes : Array;/**
array of instance_cameras
*/
public var instance_cameras : Array;/**

*/
public var channels : Array;/**

*/
public var hasMorphController : Boolean;/**

*/
public var hasSkinController : Boolean;private var _yUp : uint;/**
* 		 * @param	node		 * @return
*/
public function DaeNode (document:DaeDocument, node:XML = null, yUp:uint = 1);/**
* 		 * @param	id		 * @return
*/
public function findController (id:String) : DaeInstanceController;/**
* 		 * @param	sid		 * @return
*/
public function findMatrixBySID (sid:String) : DaeTransform;/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaePrimitive.as
package org.ascollada.core{import flash.utils.Dictionary;import org.ascollada.ASCollada;public class DaePrimitive extends DaeEntity{/**
parent element
*/
public var mesh : DaeMesh;/**
The number of line primitives. required
*/
public var count : uint;/**
materialname
*/
public var material : String;/**
vcount use by polygon primitives
*/
public var vcount : Array;/**
primitive type
*/
public var type : String;public var polygons : Array;private var _inputs : Dictionary;/**
normals
*/
public function get normals () : Array;/**
vertex indices
*/
public function get vertices () : Array;/**
* 		 * @param	mesh		 * @param	node		 * @return
*/
public function DaePrimitive (document:DaeDocument, mesh:DaeMesh, node:XML = null);/**
* gets the texcoords by set.		 * 		 * @param	setID		 * @return
*/
public function getTexCoords (setID:uint = 0) : Array;/**
* 		 * @return
*/
public function read (node:XML) : void;/**
* 		 * @param	node		 * @return
*/
protected function parse (node:XML) : void;private function parsePolygons (node:XML) : void;/**
* 		 * @param	node		 * @return
*/
private function checkNode (node:XML) : Boolean;/**
* 		 * @param	semantic		 * @return
*/
public function getFirstInput (semantic:String) : Array;/**
* 		 * @param	semantic		 * @return
*/
private function getInputBySet (semantic:String, setID:int) : Array;/**
* 		 * @param	semantic		 * @return
*/
private function getInputCount (semantic:String) : uint;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeSampler.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.namespaces.collada;/**
*
*/
public class DaeSampler extends DaeEntity{/**

*/
public var type : String;/**

*/
public var values : Array;/**

*/
public var input : DaeSource;/**

*/
public var output : DaeSource;/**

*/
public var interpolation : DaeSource;/**

*/
public var in_tangent : DaeSource;/**

*/
public var out_tangent : DaeSource;/**
* 		 * @param	node		 *  		 * @return
*/
public function DaeSampler (document:DaeDocument, node:XML);/**
*
*/
public function destroy () : void;/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeSkin.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.core.DaeSource;import org.ascollada.core.DaeVertexWeights;import org.ascollada.utils.Logger;/**
*
*/
public class DaeSkin extends DaeEntity{/**
bind shape matrix
*/
public var bind_shape_matrix : Array;/**

*/
public var source : String;/**

*/
public var joints : Array;/**

*/
public var bind_matrices : Array;/**

*/
public var vertex_weights : Array;/**

*/
public var blendWeightsByJointID : Object;/**

*/
public var jointsType : String;/**
* 		 * @param	node		 * @return
*/
public function DaeSkin (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function findJointBindMatrix (node:DaeNode) : Array;/**
* 		 * @param	id		 * @return
*/
public function findJointBindMatrix2 (id:String) : Array;/**
* 		 * @param	node		 * 		 * @return
*/
public function findJointVertexWeights (node:DaeNode) : Array;/**
* 		 * @param	node		 * 		 * @return
*/
public function findJointVertexWeightsByIDOrSID (id:String) : Array;/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;/**
* normalize blendweights.		 * 		 * @param	blendWeights	the weights to normalize.
*/
public function normalizeBlendWeights (blendWeights:Array) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeSource.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeAccessor;import org.ascollada.core.DaeEntity;import org.ascollada.types.DaeArray;/**
*
*/
public class DaeSource extends DaeEntity{/**

*/
public var accessor : DaeAccessor;/**

*/
public var values : Array;/**
* constructor.		 * 		 * @param	node		 * 		 * @return
*/
public function DaeSource (document:DaeDocument, node:XML);public function destroy () : void;/**
* 		 * @param	node		 * 		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeSpline.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.core.DaeInput;import org.ascollada.core.DaeSource;/**
*
*/
public class DaeSpline extends DaeEntity{/**

*/
public var vertices : Array;/**

*/
public var closed : Boolean;/**
* 		 * @param	node		 * @return
*/
public function DaeSpline (document:DaeDocument, node:XML);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeVertexWeights.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;/**
*
*/
public class DaeVertexWeights extends DaeEntity{/**

*/
public var count : int;/**

*/
public var inputs : Array;/**

*/
public var v : Array;/**

*/
public var vcounts : Array;/**
* 		 * @param	node		 * @return
*/
public function DaeVertexWeights (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeVertices.as
package org.ascollada.core{import org.ascollada.ASCollada;/**
* <vertices> element.
*/
public class DaeVertices extends DaeEntity{public var source : DaeSource;/**
* 		 * @param	node		 * @return
*/
public function DaeVertices (document:DaeDocument, node:XML = null);/**
*
*/
public function destroy () : void;/**
* 		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\core\DaeVisualScene.as
package org.ascollada.core{import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.core.DaeNode;import org.ascollada.utils.Logger;/**
*
*/
public class DaeVisualScene extends DaeEntity{/**

*/
public var nodes : Array;private var _yUp : uint;public function get endTime () : Number;public function get frameRate () : Number;public function get startTime () : Number;/**
* 		 * @param	node		 * @return
*/
public function DaeVisualScene (document:DaeDocument, node:XML = null, yUp:uint = 1);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeBindMaterial.as
package org.ascollada.fx{import org.ascollada.ASCollada;import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;import org.ascollada.namespaces.collada;/**
* @author Tim Knip / floorplanner.com
*/
public class DaeBindMaterial extends DaeEntity{/**

*/
public var instanceMaterials : Array;/**
*
*/
public function DaeBindMaterial (document:DaeDocument, node:XML = null, async:Boolean = false);/**
*
*/
public function destroy () : void;/**
*
*/
public function getInstanceMaterialBySymbol (symbol:String) : DaeInstanceMaterial;/**
*
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeBindVertexInput.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
* bind_vertex_input element.
*/
public class DaeBindVertexInput extends DaeEntity{public var semantic : String;public var input_semantic : String;public var input_set : int;public function DaeBindVertexInput (document:DaeDocument, node:XML = null);/**
* 	 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeBlinn.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.types.DaeColorOrTexture;import org.ascollada.utils.Logger;/**
*
*/
public class DaeBlinn extends DaeLambert{public var specular : DaeColorOrTexture;public var shininess : Number;/**
* 		 * @param	node		 * @return
*/
public function DaeBlinn (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeConstant.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.types.DaeColorOrTexture;/**
*
*/
public class DaeConstant extends DaeEntity{public var emission : DaeColorOrTexture;public var reflective : DaeColorOrTexture;public var reflectivity : Number;public var transparent : DaeColorOrTexture;public var transparency : Number;public var index_of_refraction : Number;/**
* 		 * @param	node		 * @return
*/
public function DaeConstant (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeEffect.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.types.DaeColorOrTexture;import org.ascollada.utils.Logger;/**
*
*/
public class DaeEffect extends DaeEntity{/**

*/
public var color : DaeConstant;/**

*/
public var newparams : Object;/**

*/
public var texture_url : String;/**

*/
public var double_sided : Boolean;/**

*/
public var wireframe : Boolean;/**
* 		 * @param	node		 * @return
*/
public function DaeEffect (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;private function readExtra (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeInstanceMaterial.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeInstanceMaterial extends DaeEntity{/**
symbol - required
*/
public var symbol : String;/**
target - required
*/
public var target : String;private var _bindVertexInputs : Array;/**
*
*/
public function get bindVertexInputs () : Array;/**
*
*/
public function DaeInstanceMaterial (document:DaeDocument, node:XML = null);/**
* 		 * @param	semantic		 * @param	input_semantic		 * @return
*/
public function findBindVertexInput (semantic:String, input_semantic:String = "TEXCOORD") : DaeBindVertexInput;/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeLambert.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.types.DaeColorOrTexture;/**
*
*/
public class DaeLambert extends DaeConstant{public var ambient : DaeColorOrTexture;public var diffuse : DaeColorOrTexture;/**
* 		 * @param	node		 * @return
*/
public function DaeLambert (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeMaterial.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeAsset;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;/**
*
*/
public class DaeMaterial extends DaeEntity{public var effect : String;/**
* 		 * @param	node		 * @return
*/
public function DaeMaterial (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeNewParam.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;public class DaeNewParam extends DaeEntity{public var type : String;public var surface : DaeSurface;public var sampler2D : DaeSampler2D;/**
* 		 * @param	node
*/
public function DaeNewParam (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaePhong.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.types.DaeColorOrTexture;/**
*
*/
public class DaePhong extends DaeLambert{public var specular : DaeColorOrTexture;public var shininess : Number;/**
* 		 * @param	node		 * @return
*/
public function DaePhong (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeSampler2D.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;public class DaeSampler2D extends DaeEntity{/**
source - required
*/
public var source : String;/**
* 		 * @param	node		 * @return
*/
public function DaeSampler2D (document:DaeDocument, node:XML);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeSurface.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;import org.ascollada.utils.Logger;public class DaeSurface extends DaeEntity{public var type : String;public var init_from : String;/**
* 		 * @param	node		 * @return
*/
public function DaeSurface (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\fx\DaeTexture.as
package org.ascollada.fx{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;public class DaeTexture extends DaeEntity{/**

*/
public var texture : String;/**

*/
public var texcoord : String;/**
*
*/
public function DaeTexture (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\io\DaeReader.as
package org.ascollada.io{import org.ascollada.core.DaeDocument;import org.ascollada.namespaces.collada;import org.ascollada.utils.Logger;import flash.events.Event;import flash.events.EventDispatcher;import flash.events.IOErrorEvent;import flash.events.ProgressEvent;import flash.events.TimerEvent;import flash.net.URLLoader;import flash.net.URLRequest;import flash.utils.Timer;/**
* @author Tim Knip	 *
*/
public class DaeReader extends EventDispatcher{public var document : DaeDocument;public var async : Boolean;public var parseMessage : String;public var baseUrl : String;private var _sourceTimer : Timer;private var _fileSearchPaths : Array;/**
*
*/
public function DaeReader (async:Boolean = false);/**
* 		 * @param	filename
*/
public function read (filename:String, fileSearchPaths:Array = null) : void;/**
* Loads the COLLADA document.		 * 		 * @param	data		 * @param fileSearchPaths		 * 		 * @return
*/
public function loadDocument (data:*, fileSearchPaths:Array = null) : DaeDocument;/**
* 		 * @param	event		 * @return
*/
private function completeHandler (event:Event) : void;private function progressHandler (event:ProgressEvent) : void;private function handleIOError (event:IOErrorEvent) : void;private function loadNextSource (event:TimerEvent) : void;/**
*
*/
private function onImagesComplete (event:Event) : void;private function addListenersToLoader (loader:URLLoader) : void;private function removeListenersFromLoader (loader:URLLoader) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\io\DaeWriter.as
package org.ascollada.io{import org.ascollada.ASCollada;import org.ascollada.core.*;import org.papervision3d.Papervision3D;/**
*
*/
public class DaeWriter{/**
asset
*/
public var asset : DaeAsset;/**
* 		 * @return
*/
public function DaeWriter (asset:DaeAsset = null);public function write () : void;/**
* 		 * @param	indent		 * @return
*/
private function writeAsset (indent:String = "") : String;protected function writeSimpleEndElement (nodeName:String, indent:String = "") : String;protected function writeSimpleStartElement (nodeName:String, indent:String = "") : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\namespaces\collada.as
package org.ascollada.namespaces{}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeBox.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeBox extends DaeEntity{public var half_extents : Array;/**
* 		 * @param	node		 * @return
*/
public function DaeBox (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeCapsule.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeCapsule extends DaeEntity{public var height : Number;public var radius : Array;/**
* 		 * @param	node		 * @return
*/
public function DaeCapsule (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeConvexMesh.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeGeometry;import org.ascollada.core.DaeMesh;/**
*
*/
public class DaeConvexMesh extends DaeMesh{public var convex_hull_off : String;public var isHull : Boolean;/**
* 		 * @param	node		 * @return
*/
public function DaeConvexMesh (document:DaeDocument, geometry:DaeGeometry, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeCylinder.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeCylinder extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeCylinder (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeForceField.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeForceField extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeForceField (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeInstanceForceField.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeInstanceForceField extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeInstanceForceField (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeInstancePhysicsMaterial.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeInstancePhysicsMaterial extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeInstancePhysicsMaterial (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeInstancePhysicsModel.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeInstancePhysicsModel extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeInstancePhysicsModel (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeInstanceRigidBody.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeInstanceRigidBody extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeInstanceRigidBody (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaePhysicsMaterial.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaePhysicsMaterial extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaePhysicsMaterial (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaePhysicsModel.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaePhysicsModel extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaePhysicsModel (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaePhysicsScene.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaePhysicsScene extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaePhysicsScene (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaePlane.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaePlane extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaePlane (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeRigidBody.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeRigidBody extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeRigidBody (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeRigidConstraint.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeRigidConstraint extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeRigidConstraint (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeShape.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeShape extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeShape (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeSphere.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeSphere extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeSphere (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeTaperedCapsule.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeTaperedCapsule extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeTaperedCapsule (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\physics\DaeTaperedCylinder.as
package org.ascollada.physics{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeTaperedCylinder extends DaeEntity{/**
* 		 * @param	node		 * @return
*/
public function DaeTaperedCylinder (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\types\DaeAddressSyntax.as
package org.ascollada.types{/**
* @author	Tim Knip
*/
public class DaeAddressSyntax{/**

*/
public var targetID : String;/**

*/
public var targetSID : String;/**

*/
public var member : String;/**

*/
public var isArrayAccess : Boolean;/**

*/
public var isDotAccess : Boolean;/**

*/
public var isFullAccess : Boolean;/**

*/
public var arrayIndex0 : int;/**

*/
public var arrayIndex1 : int;/**
* Constructor.
*/
public function DaeAddressSyntax ();/**
*
*/
public static function parse (target:String) : DaeAddressSyntax;/**
*
*/
public function toString () : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\types\DaeArray.as
package org.ascollada.types{import org.ascollada.core.DaeDocument;import org.ascollada.ASCollada;import org.ascollada.core.DaeEntity;/**
*
*/
public class DaeArray extends DaeEntity{/**

*/
public var values : Array;/**

*/
public var count : int;/**
* 		 * @param	node		 * @return
*/
public function DaeArray (document:DaeDocument, node:XML = null);/**
* 		 * @param	node		 * @return
*/
public function read (node:XML) : void;/**
* 		 * @param	node		 * 		 * @return
*/
private function getData (node:XML) : Array;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\types\DaeColorOrTexture.as
package org.ascollada.types{import org.ascollada.core.DaeDocument;import org.ascollada.core.DaeEntity;import org.ascollada.fx.DaeTexture;/**
*
*/
public class DaeColorOrTexture extends DaeEntity{public static const TYPE_COLOR : uint;public static const TYPE_TEXTURE : uint;public static const TYPE_PARAM : uint;public var type : uint;public var color : Array;public var texture : DaeTexture;/**
* 		 * @param	node		 * @return
*/
public function DaeColorOrTexture (document:DaeDocument, node:XML = null);/**
* 		 * @param	node
*/
public function read (node:XML) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\types\DaeTransform.as
package org.ascollada.types{import org.ascollada.ASCollada;import org.ascollada.utils.Logger;/**
* @author	Tim Knip
*/
public class DaeTransform{/**
type - required
*/
public var type : String;/**
sid - optional
*/
public var sid : String;/**

*/
public var values : Array;/**

*/
public var animated : Boolean;/**
* 		 * @param	type		 * @param	values		 * @return
*/
public function DaeTransform (type:String, sid:String, values:Array);/**
* 		 * @return
*/
public function validateValues () : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\utils\FPS.as
package org.ascollada.utils{import flash.display.Shape;import flash.display.Sprite;import flash.events.Event;import flash.text.TextField;import flash.text.TextFormat;import flash.utils.getTimer;/**
*
*/
public class FPS extends Sprite{public var time : Number;public var frameTime : Number;public var prevFrameTime : Number;public var secondTime : Number;public var prevSecondTime : Number;public var frames : Number;public var fps : String;public var tf : TextField;public var anim : String;public var bar : Shape;/**
* 		 * @return
*/
public function FPS ();/**
* 		 * @param	event		 * @return
*/
private function enterFrameHandler (event:Event) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\utils\Logger.as
package org.ascollada.utils{public class Logger{public static var VERBOSE : Boolean;public static function debug (o:String) : void;public static function error (o:String) : void;public static function fatal (o:String) : void;public static function info (o:String) : void;public static function log (o:String) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\ascollada\utils\StringUtil.as
package org.ascollada.utils{/**
*  The StringUtil utility class is an all-static class with methods for	 *  working with String objects within Flex.	 *  You do not create instances of StringUtil;	 *  instead you call methods such as 	 *  the <code>StringUtil.substitute()</code> method.
*/
public class StringUtil{/**
*  Removes all whitespace characters from the beginning and end	     *  of the specified string.	     *	     *  @param str The String whose whitespace should be trimmed. 	     *	     *  @return Updated String where whitespace was removed from the 	     *  beginning and end.
*/
public static function trim (str:String) : String;/**
*  Removes all whitespace characters from the beginning and end	     *  of each element in an Array, where the Array is stored as a String. 	     *	     *  @param value The String whose whitespace should be trimmed. 	     *	     *  @param separator The String that delimits each Array element in the string.	     *	     *  @return Updated String where whitespace was removed from the 	     *  beginning and end of each element.
*/
public static function trimArrayElements (value:String, delimiter:String) : String;/**
*  Returns <code>true</code> if the specified string is	     *  a single space, tab, carriage return, newline, or formfeed character.	     *	     *  @param str The String that is is being queried. 	     *	     *  @return <code>true</code> if the specified string is	     *  a single space, tab, carriage return, newline, or formfeed character.
*/
public static function isWhitespace (character:String) : Boolean;/**
*  Substitutes "{n}" tokens within the specified string	     *  with the respective arguments passed in.	     *	     *  @param str The string to make substitutions in.	     *  This string can contain special tokens of the form	     *  <code>{n}</code>, where <code>n</code> is a zero based index,	     *  that will be replaced with the additional parameters	     *  found at that index if specified.	     *	     *  @param rest Additional parameters that can be substituted	     *  in the <code>str</code> parameter at each <code>{n}</code>	     *  location, where <code>n</code> is an integer (zero based)	     *  index value into the array of values specified.	     *  If the first parameter is an array this array will be used as	     *  a parameter list.	     *  This allows reuse of this routine in other methods that want to	     *  use the ... rest signature.	     *  For example <pre>	     *     public function myTracer(str:String, ... rest):void	     *     { 	     *         label.text += StringUtil.substitute(str, rest) + "\n";	     *     } </pre>	     *	     *  @return New string with all of the <code>{n}</code> tokens	     *  replaced with the respective arguments specified.	     *	     *  @example	     *	     *  var str:String = "here is some info '{0}' and {1}";	     *  trace(StringUtil.substitute(str, 15.4, true));	     *	     *  // this will output the following string:	     *  // "here is some info '15.4' and true"
*/
public static function substitute (str:String, ...rest) : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\Papervision3D.as
package org.papervision3d{import org.papervision3d.core.log.PaperLogger;/**
* The Papervision3D class contains global properties and settings.
*/
public class Papervision3D{/**
* Indicates if the angles are expressed in degrees (true) or radians (false). The default value is true, degrees.
*/
public static var useDEGREES : Boolean;/**
* Indicates if the scales are expressed in percent (true) or from zero to one (false). The default value is false, i.e. units.
*/
public static var usePERCENT : Boolean;/**
*
*/
public static var useRIGHTHANDED : Boolean;/**
* Enables engine name to be retrieved at runtime or when reviewing a decompiled swf.
*/
public static var NAME : String;/**
* Enables version to be retrieved at runtime or when reviewing a decompiled swf.
*/
public static var VERSION : String;/**
* Enables version date to be retrieved at runtime or when reviewing a decompiled swf.
*/
public static var DATE : String;/**
* Enables copyright information to be retrieved at runtime or when reviewing a decompiled swf.
*/
public static var AUTHOR : String;/**
* This is the main Logger Controller.
*/
public static var PAPERLOGGER : PaperLogger;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\cameras\Camera3D.as
package org.papervision3d.cameras{import flash.geom.Rectangle;import flash.utils.getTimer;import org.papervision3d.core.culling.FrustumCuller;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;/**
* Camera3D is the basic camera used by Papervision3D.	 * </p>	 * 	 * @author Tim Knip
*/
public class Camera3D extends CameraObject3D{protected var _projection : Matrix3D;protected var _prevFocus : Number;protected var _prevZoom : Number;protected var _prevWidth : Number;protected var _prevHeight : Number;protected var _prevOrtho : Boolean;protected var _prevOrthoProjection : Boolean;protected var _prevUseProjection : Boolean;protected var _focusFix : Matrix3D;/**
* Whether this camera uses frustum culling.		 * 		 * @return Boolean
*/
public function set useCulling (value:Boolean) : Void;/**
* Whether this camera uses a projection matrix.
*/
public function set useProjectionMatrix (value:Boolean) : Void;/**
* Sets the distance to the far plane.		 * 		 * @param	value	The distance to the far plane
*/
public function set far (value:Number) : Void;/**
* Sets the distance to the near plane (note that this is simply an alias for #focus).		 * 		 * @param	value	The distance to the near plane
*/
public function set near (value:Number) : Void;/**
* Sets the orthographic scale of the camera		 * 		 * @param value		The value of the orthographic scale
*/
public function set orthoScale (value:Number) : Void;public function get projection () : Matrix3D;/**
* Constructor.		 * 		 * @param	fov		This value is the vertical Field Of View (FOV) in degrees.		 * @param	near	Distance to the near clipping plane.		 * @param	far		Distance to the far clipping plane.		 * @param	useCulling		Boolean indicating whether to use frustum culling. When true all objects outside the view will be culled.		 * @param	useProjection 	Boolean indicating whether to use a projection matrix for perspective.
*/
public function Camera3D (fov:Number = 60, near:Number = 10, far:Number = 5000, useCulling:Boolean = false, useProjection:Boolean = false);/**
* Orbits the camera around the specified target. If no target is specified the 		 * camera's #target property is used. If this camera's #target property equals null		 * the camera orbits the origin (0, 0, 0).		 * 		 * @param	pitch	Rotation around X=axis (looking up or down).		 * @param	yaw		Rotation around Y-axis (looking left or right).		 * @param	useDegrees 	Whether to use degrees for pitch and yaw (defaults to 'true').		 * @param	target	An optional target to orbit around.
*/
public function orbit (pitch:Number, yaw:Number, useDegrees:Boolean = true, target:DisplayObject3D = null) : void;public function projectFaces (faces:Array, object:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* Projects vertices.		 * 		 * @param	object 					The <code>DisplayObject3D</code> to be projected		 * @param	renderSessionData		The <code>RenderSessionData</code> holding the containing the camera properties
*/
public function projectVertices (vertices:Array, object:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* Updates the internal camera settings.		 * 		 * @param	viewport
*/
public function update (viewport:Rectangle) : void;/**
* [INTERNAL-USE] Transforms world coordinates into camera space.		 * 		 * @param	transform	An optional transform.
*/
public function transformView (transform:Matrix3D = null) : void;/**
* Creates a transformation that produces a parallel projection.		 * 		 * @param	left		 * @param	right		 * @param	bottom		 * @param	top		 * @param	near		 * @param	far		 * @return	Matrix3D
*/
public static function createOrthoMatrix (left:Number, right:Number, bottom:Number, top:Number, near:Number, far:Number) : Matrix3D;/**
* Creates a transformation that produces a perspective projection.		 * 		 * @param	fov		 * @param	aspect		 * @param	near		 * @param	far		 * @return	Matrix3D
*/
public static function createPerspectiveMatrix (fov:Number, aspect:Number, near:Number, far:Number) : Matrix3D;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\cameras\CameraType.as
package org.papervision3d.cameras{/**
* CameraTypes are mainly used with BasicView to define which camera to use.
	 * 
	 * @author Tim Knip
	 * @see org.papervision3d.cameras.Camera3D
	 * @see org.papervision3d.cameras.DebugCamera3D
	 * @see org.papervision3d.view.BasicView
	 *
*/
public class CameraType{/**
* The TARGET constant defines a Camera3D targeting x:0, y:0, z:0
*/
public static var TARGET : String;/**
* The FREE constant defines a Camera3D with no target
*/
public static var FREE : String;/**
* The DEBUG constant defines a DebugCamera3D
*/
public static var DEBUG : String;/**
* the SPRING constant defines a SpringCamera3D
*/
public static var SPRING : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\cameras\DebugCamera3D.as
package org.papervision3d.cameras{import flash.display.Sprite;import flash.display.Stage;import flash.events.Event;import flash.events.KeyboardEvent;import flash.events.MouseEvent;import flash.geom.Point;import flash.text.TextField;import flash.text.TextFormat;import flash.ui.Keyboard;import org.papervision3d.view.Viewport3D;/**
* <p>
	 * DebugCamera3D serves as a tool to allow you control
	 * the camera with your mouse and keyboard while displaying information
	 * about the camera when testing your swf. Due to its nature,
	 * the Keyboard and Mouse Events may interfere with your custom Keyboard and Mouse Events.
	 * This camera is in no way intended for production use.
	 * </p>
	 * 
	 * <p>
	 * Click and drag for mouse movement. The keys
	 * are setup as follows:
	 * </p>
	 * <pre><code>
	 * w = forward
	 * s = backward
	 * a = left
	 * d = right
	 * q = rotationZ--
	 * e = rotationZ++
	 * r = fov++
	 * f = fov--
	 * t = near++
	 * g = near--
	 * y = far++
	 * h = far--
	 * </code></pre>
	 * 
	 * @author John Lindquist
*/
public class DebugCamera3D extends Camera3D{/**
@private
*/
protected var _propertiesDisplay : Sprite;/**
@private
*/
protected var _inertia : Number;/**
@private
*/
protected var viewportStage : Stage;/**
@private
*/
protected var startPoint : Point;/**
@private
*/
protected var startRotationY : Number;/**
@private
*/
protected var startRotationX : Number;/**
@private
*/
protected var targetRotationY : Number;/**
@private
*/
protected var targetRotationX : Number;/**
@private
*/
protected var keyRight : Boolean;/**
@private
*/
protected var keyLeft : Boolean;/**
@private
*/
protected var keyForward : Boolean;/**
@private
*/
protected var keyBackward : Boolean;/**
@private
*/
protected var forwardFactor : Number;/**
@private
*/
protected var sideFactor : Number;/**
@private
*/
protected var xText : TextField;/**
@private
*/
protected var yText : TextField;/**
@private
*/
protected var zText : TextField;/**
@private
*/
protected var rotationXText : TextField;/**
@private
*/
protected var rotationYText : TextField;/**
@private
*/
protected var rotationZText : TextField;/**
@private
*/
protected var fovText : TextField;/**
@private
*/
protected var nearText : TextField;/**
@private
*/
protected var farText : TextField;/**
@private
*/
protected var viewport3D : Viewport3D;/**
* A Sprite that displays the current properties of your camera
*/
public function get propsDisplay () : Sprite;public function set propsDisplay (propsDisplay:Sprite) : Void;/**
* The amount of resistance to the change in velocity when updating the camera rotation with the mouse
*/
public function get inertia () : Number;public function set inertia (inertia:Number) : Void;/**
* DebugCamera3D
		 *
		 * @param viewport	Viewport to render to. @see org.papervision3d.view.Viewport3D 
		 * @param fovY		Field of view (vertical) in degrees.
		 * @param near		Distance to near plane.
		 * @param far		Distance to far plane.
*/
public function DebugCamera3D (viewport3D:Viewport3D, fovY:Number = 90, near:Number = 10, far:Number = 5000);/**
* Checks if the viewport is ready for events
*/
private function checkStageReady () : void;/**
* Dispatched with the viewport container is added to the stage
*/
protected function onAddedToStageHandler (event:Event) : void;/**
* Builds the Sprite that displays the camera properties
*/
protected function displayProperties () : void;/**
* Sets up the Mouse and Keyboard Events required for adjusting the camera properties
*/
protected function setupEvents () : void;/**
*  The default handler for the <code>MouseEvent.MOUSE_DOWN</code> event.
	     *
	     *  @param The event object.
*/
protected function mouseDownHandler (event:MouseEvent) : void;/**
*  The default handler for the <code>MouseEvent.MOUSE_MOVE</code> event.
	     *
	     *  @param The event object.
*/
protected function mouseMoveHandler (event:MouseEvent) : void;/**
*  Removes the mouseMoveHandler on the <code>MouseEvent.MOUSE_UP</code> event.
	     *
	     *  @param The event object.
*/
protected function mouseUpHandler (event:MouseEvent) : void;/**
*  Adjusts the camera based on the keyCode from the <code>KeyboardEvent.KEY_DOWN</code> event.
	     *
	     *  @param The event object.
*/
protected function keyDownHandler (event:KeyboardEvent) : void;/**
*  Checks which Key is released on the <code>KeyboardEvent.KEY_UP</code> event
	     *  and toggles that key's movement off.
	     *
	     *  @param The event object.
*/
protected function keyUpHandler (event:KeyboardEvent) : void;/**
*  Checks which keys are down and adjusts the camera accorindingly on the <code>Event.ENTER_FRAME</code> event.
	     *  Also updates the display of properties.
	     *
	     *  @param The event object.
*/
protected function onEnterFrameHandler (event:Event) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\cameras\SpringCamera3D.as
package org.papervision3d.cameras{import org.papervision3d.core.math.*;import org.papervision3d.objects.DisplayObject3D;/**
b at turbulent dot ca - http://agit8.turbulent.ca 
	 * v1 - 2009-01-21
*/
public class SpringCamera3D extends Camera3D{/**
* [optional] Target object3d that camera should follow. If target is null, camera behaves just like a normal Camera3D.
*/
public var _camTarget : DisplayObject3D;/**
* Stiffness of the spring, how hard is it to extend. The higher it is, the more "fixed" the cam will be.
		 * A number between 1 and 20 is recommended.
*/
public var stiffness : Number;/**
* Damping is the spring internal friction, or how much it resists the "boinggggg" effect. Too high and you'll lose it!
		 * A number between 1 and 20 is recommended.
*/
public var damping : Number;/**
* Mass of the camera, if over 120 and it'll be very heavy to move.
*/
public var mass : Number;/**
* Offset of spring center from target in target object space, ie: Where the camera should ideally be in the target object space.
*/
public var positionOffset : Number3D;/**
* offset of facing in target object space, ie: where in the target object space should the camera look.
*/
public var lookOffset : Number3D;private var _zrot : Number;private var _velocity : Number3D;private var _dv : Number3D;private var _stretch : Number3D;private var _force : Number3D;private var _acceleration : Number3D;private var _desiredPosition : Number3D;private var _lookAtPosition : Number3D;private var _targetTransform : Matrix3D;private var _xPositionOffset : Number3D;private var _xLookOffset : Number3D;private var _xPosition : Number3D;private var _xLookAtObject : DisplayObject3D;public function set target (object:DisplayObject3D) : Void;public function get target () : DisplayObject3D;/**
* Rotation in degrees along the camera Z vector to apply to the camera after it turns towards the target .
*/
public function set zrot (n:Number) : Void;public function get zrot () : Number;/**
* Constructor.
		 * 
		 * @param   fov     This value is the vertical Field Of View (FOV) in degrees.
		 * @param   near    Distance to the near clipping plane.
		 * @param   far     Distance to the far clipping plane.
		 * @param   useCulling      Boolean indicating whether to use frustum culling. When true all objects outside the view will be culled.
		 * @param   useProjection   Boolean indicating whether to use a projection matrix for perspective.
*/
public function SpringCamera3D (fov:Number = 60, near:Number = 10, far:Number = 5000, useCulling:Boolean = false, useProjection:Boolean = false);public function transformView (transform:Matrix3D = null) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\IAnimatable.as
package org.papervision3d.core.animation{public interface IAnimatable{/**
* Whether the animation is playing. This property is read-only.
*/
public function get playing () : Boolean;/**
* Pauses the animation.
*/
public function pause () : void;/**
* Plays the animation.		 * 		 * @param 	clip	Clip to play. Default is "all"		 * @param 	loop	Whether the animation should loop. Default is true.
*/
public function play (clip:String = "all", loop:Boolean = true) : void;/**
* Resumes a paused animation.		 * 		 * @param loop 	Whether the animation should loop. Defaults is true.
*/
public function resume (loop:Boolean = true) : void;/**
* Stops the animation.
*/
public function stop () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\IAnimationProvider.as
package org.papervision3d.core.animation{import org.papervision3d.core.controller.AnimationController;/**
* @author Tim Knip / floorplanner.com
*/
public interface IAnimationProvider{/**
* Gets /sets the animation controller.		 * 		 * @see org.papervision3d.core.controller.AnimationController
*/
public function set animation (value:AnimationController) : Void;public function get animation () : AnimationController;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\Channel3D.as
package org.papervision3d.core.animation.channel{import org.papervision3d.core.animation.key.CurveKey3D;import org.papervision3d.core.animation.curve.Curve3D;/**
* @author Tim Knip / floorplanner.com
*/
public class Channel3D{/**

*/
public var startTime : Number;/**

*/
public var endTime : Number;/**
*
*/
public var output : Array;/**
*
*/
protected var _curves : Array;/**
*
*/
public function Channel3D ();/**
* Adds a curve.		 * 		 * @param curve	The curve to add.		 * 		 * @return	The added curve or null on failure.		 * 		 * @see org.papervision3d.core.animation.curve.Curve3D
*/
public function addCurve (curve:Curve3D, updatesTimes:Boolean = true) : Curve3D;/**
*
*/
public function clone () : Channel3D;/**
* Removes a curve.		 * 		 * @param curve	The curve to remove.		 * 		 * @return	The remove curve or null on failure.		 * 		 * @see org.papervision3d.core.animation.curve.Curve3D
*/
public function removeCurve (curve:Curve3D) : Curve3D;/**
*
*/
public function update (time:Number) : void;protected function updateStartAndEndTime () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\controller\MorphWeightChannel3D.as
package org.papervision3d.core.animation.channel.controller{import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.controller.MorphController;/**
* This channel targets the weights of a MorphController.	 * 	 * @see org.papervision3d.core.controller.MorphController	 * @see org.papervision3d.core.animation.channel.Channel3D	 * 	 * @author Tim Knip / floorplanner.com
*/
public class MorphWeightChannel3D extends Channel3D{/**

*/
public var controller : MorphController;/**

*/
public var morphTarget : int;/**
*
*/
public function MorphWeightChannel3D (controller:MorphController, morphTarget:int);/**
* Update the channel.		 * 		 * @param time	Time in seconds.
*/
public function update (time:Number) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\geometry\GeometryChannel3D.as
package org.papervision3d.core.animation.channel.geometry{import org.papervision3d.core.proto.GeometryObject3D;import org.papervision3d.core.animation.channel.Channel3D;/**
* @author Tim Knip / floorplanner.com
*/
public class GeometryChannel3D extends Channel3D{/**
* The targeted geometry.
*/
protected var _geometry : GeometryObject3D;/**
* The targeted geometry.
*/
public function set geometry (value:GeometryObject3D) : Void;/**
*
*/
public function get goemetry () : GeometryObject3D;/**
* Constructor.		 * 		 * @param geometry
*/
public function GeometryChannel3D (geometry:GeometryObject3D);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\geometry\VertexChannel3D.as
package org.papervision3d.core.animation.channel.geometry{import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.proto.GeometryObject3D;/**
* The VertexChannel3D class animates a single vertex in a GeometryObject3D.	 * 	 * <p>You can animate a single property of the vertex ("x", "y" or "z"), or alternatively	 * you can animate all 3 properties of the vertex.</p>	 * 	 * @see org.papervision3d.core.animation.channel.Channel3D	 * @see org.papervision3d.core.proto.GeometryObject3D	 * @see org.papervision3d.core.geom.renderables.Vertex3D	 * 	 * @author Tim Knip / floorplanner.com
*/
public class VertexChannel3D extends GeometryChannel3D{public static const TARGET_X : int;public static const TARGET_Y : int;public static const TARGET_Z : int;public static const TARGET_XYZ : int;/**
* The index of the targeted vertex.
*/
public var vertexIndex : uint;/**
* The targeted property of the targeted vertex.		 * Possible values are #TARGET_X, #TARGET_Y, #TARGET_Z or #TARGET_XYZ
*/
public var vertexProperty : int;/**
*
*/
protected var _clone : GeometryObject3D;/**
*
*/
public function set geometry (value:GeometryObject3D) : Void;/**
* Constructor
*/
public function VertexChannel3D (geometry:GeometryObject3D, vertexIndex:uint, vertexProperty:int = -1);/**
*
*/
public function update (time:Number) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\geometry\VerticesChannel3D.as
package org.papervision3d.core.animation.channel.geometry{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.proto.GeometryObject3D;/**
* The VerticesChannel3D animates the GeometryObject3D#vertices array.	 * 	 * @see org.papervision3d.core.proto.GeometryObject3D	 * @see org.papervision3d.core.geom.renderables.Vertex3D	 * 	 * @author Tim Knip / floorplanner.com
*/
public class VerticesChannel3D extends GeometryChannel3D{/**
*
*/
public function VerticesChannel3D (geometry:GeometryObject3D);/**
*
*/
public function update (time:Number) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\transform\MatrixChannel3D.as
package org.papervision3d.core.animation.channel.transform{import org.papervision3d.core.animation.curve.Curve3D;import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.animation.channel.transform.TransformChannel3D;/**
* @author Tim Knip / floorplanner.com
*/
public class MatrixChannel3D extends TransformChannel3D{/**
* Constructor.		 * 		 * @param transform
*/
public function MatrixChannel3D (transform:Matrix3D);/**
*
*/
public function clone () : Channel3D;/**
*
*/
public function update (time:Number) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\transform\RotationChannel3D.as
package org.papervision3d.core.animation.channel.transform{import org.papervision3d.core.animation.curve.Curve3D;import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;/**
* @author Tim Knip / floorplanner.com
*/
public class RotationChannel3D extends TransformChannel3D{public var axis : Number3D;public function RotationChannel3D (axis:Number3D);/**
*
*/
public function clone () : Channel3D;public function update (time:Number) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\transform\ScaleChannel3D.as
package org.papervision3d.core.animation.channel.transform{import org.papervision3d.core.animation.curve.Curve3D;import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.animation.channel.transform.TransformChannel3D;/**
* @author Tim Knip / floorplanner.com
*/
public class ScaleChannel3D extends TransformChannel3D{/**
* Constructor.		 * 		 * @param transform
*/
public function ScaleChannel3D (transform:Matrix3D);public function clone () : Channel3D;/**
*
*/
public function update (time:Number) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\transform\TransformChannel3D.as
package org.papervision3d.core.animation.channel.transform{import org.papervision3d.core.animation.curve.Curve3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.animation.channel.Channel3D;/**
* @author Tim Knip / floorplanner.com
*/
public class TransformChannel3D extends Channel3D{public var transform : Matrix3D;public function TransformChannel3D (transform:Matrix3D);public function clone () : Channel3D;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\transform\TransformStackChannel3D.as
package org.papervision3d.core.animation.channel.transform{import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.animation.key.LinearCurveKey3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.animation.curve.Curve3D;/**
* @author Tim Knip / floorplanner.com
*/
public class TransformStackChannel3D extends TransformChannel3D{protected var channels : Array;/**
*
*/
public function TransformStackChannel3D (transform:Matrix3D);/**
*
*/
public function addCurve (curve:Curve3D, updatesTimes:Boolean = true) : Curve3D;/**
*
*/
public function addChannel (channel:TransformChannel3D) : TransformChannel3D;/**
* Bakes this MatrixStackChannel into a single MatrixChannel3D.		 * 		 * @param sampleRate		 * 		 * @return The created MatrixChannel3D or null on failure.		 * 		 * @see org.papervision3d.core.animation.channel.matrix.TransformChannel3D
*/
public function bake (numSamples:uint) : MatrixChannel3D;/**
*
*/
public function clone () : Channel3D;/**
*
*/
public function update (time:Number) : void;protected function updateStartAndEndTime () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\channel\transform\TranslationChannel3D.as
package org.papervision3d.core.animation.channel.transform{import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.animation.curve.Curve3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.animation.channel.transform.TransformChannel3D;/**
* @author Tim Knip / floorplanner.com
*/
public class TranslationChannel3D extends TransformChannel3D{/**
* Constructor.		 * 		 * @param transform
*/
public function TranslationChannel3D (transform:Matrix3D);/**
*
*/
public function clone () : Channel3D;/**
*
*/
public function update (time:Number) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\clip\AnimationClip3D.as
package org.papervision3d.core.animation.clip{/**
* @author Tim Knip / floorplanner.com
*/
public class AnimationClip3D{/**
*
*/
public var name : String;/**
*
*/
public var startTime : Number;/**
*
*/
public var endTime : Number;/**
*
*/
public function AnimationClip3D (name:String, startTime:Number = 0.0, endTime:Number = 0.0);/**
* Clone.		 * 		 * @return
*/
public function clone () : AnimationClip3D;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\curve\Curve3D.as
package org.papervision3d.core.animation.curve{import org.papervision3d.core.animation.enum.InfinityType;import org.papervision3d.core.animation.key.BezierCurveKey3D;import org.papervision3d.core.animation.key.LinearCurveKey3D;import org.papervision3d.core.animation.key.CurveKey3D;/**
* A Curve3D stores a bunch of CurveKey3D's and given a value representing an input point on a curve returns 	 * the output of the curve for that input.	 * 	 * @see org.papervision3d.core.animation.key.CurveKey3D	 * 	 * @author Tim Knip / floorplanner.com
*/
public class Curve3D{/**
* The behavior of the curve after the last key. 		 * 		 * @see org.papervision3d.core.animation.enum.InfinityType
*/
public var postInfinity : uint;/**
* The behavior of the curve before the first key. 		 * 		 * @see org.papervision3d.core.animation.enum.InfinityType
*/
public var preInfinity : uint;/**
*
*/
protected var _keys : Array;/**

*/
private var _current : int;/**
*
*/
public function get keys () : Array;/**
* Constructor.		 * 		 * @param preInfinity	The behavior of the curve before the first key. Defaults to InfinityType.CONSTANT		 * @param postInfinity	The behavior of the curve after the last key. Defaults to InfinityType.CONSTANT		 * 		 * @see org.papervision3d.core.animation.enum.InfinityType
*/
public function Curve3D (preInfinity:int = -1, postInfinity:int = -1);/**
* Adds a key.		 * 		 * @param key		 * 		 * @return The added key or null on failure
*/
public function addKey (key:CurveKey3D) : CurveKey3D;/**
* Removes a key.		 * 		 * @param key		 * 		 * @return The removed key or null on failure
*/
public function removeKey (key:CurveKey3D) : CurveKey3D;/**
* Main workhorse of the animation system.		 * 		 * @param input	Time in seconds.		 * 		 * @return	The current value of this curve.
*/
public function evaluate (input:Number) : Number;/**
* Clone.		 * 		 * @return	The cloned curve.
*/
public function clone () : Curve3D;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\enum\InfinityType.as
package org.papervision3d.core.animation.enum{/**
* @author Tim Knip / floorplanner.com
*/
public class InfinityType{public static const CONSTANT : uint;public static const LINEAR : uint;public static const CYCLE : uint;public static const CYCLE_RELATIVE : uint;public static const OSCILLATE : uint;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\enum\InterpolationType.as
package org.papervision3d.core.animation.enum{/**
* @author Tim Knip / floorplanner.com
*/
public class InterpolationType{public static const LINEAR : int;public static const HERMITE : int;public static const BEZIER : int;public static const BSPLINE : int;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\key\BezierCurveKey3D.as
package org.papervision3d.core.animation.key{import org.papervision3d.core.animation.key.CurveKey3D;/**
* @author Tim Knip / floorplanner.com
*/
public class BezierCurveKey3D extends CurveKey3D{/**
*
*/
public function BezierCurveKey3D (input:Number = 0, output:Number = 0);/**
* Clone.		 * 		 * @return The cloned key.
*/
public function clone () : CurveKey3D;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\key\CurveKey3D.as
package org.papervision3d.core.animation.key{/**
* @author Tim Knip / floorplanner.com
*/
public class CurveKey3D{/**
*
*/
public var input : Number;/**
*
*/
public var output : Number;/**
* Constructor.
*/
public function CurveKey3D (input:Number = 0, output:Number = 0);/**
* Clone.		 * 		 * @return The cloned key.
*/
public function clone () : CurveKey3D;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\key\LinearCurveKey3D.as
package org.papervision3d.core.animation.key{import org.papervision3d.core.animation.key.CurveKey3D;/**
* @author Tim Knip / floorplanner.com
*/
public class LinearCurveKey3D extends CurveKey3D{/**
*
*/
public function LinearCurveKey3D (input:Number = 0, output:Number = 0);/**
* Clone.		 * 		 * @return The cloned key.
*/
public function clone () : CurveKey3D;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\animation\key\StepCurveKey3D.as
package org.papervision3d.core.animation.key{import org.papervision3d.core.animation.key.CurveKey3D;/**
* @author Tim Knip / floorplanner.com
*/
public class StepCurveKey3D extends CurveKey3D{/**
*
*/
public function StepCurveKey3D (input:Number = 0, output:Number = 0);/**
* Clone.		 * 		 * @return The cloned key.
*/
public function clone () : CurveKey3D;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\clipping\DefaultClipping.as
package org.papervision3d.core.clipping{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.math.util.ClassificationUtil;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;public class DefaultClipping{public function DefaultClipping ();public function reset (renderSessionData:RenderSessionData) : void;public function setDisplayObject (object:DisplayObject3D, renderSessionData:RenderSessionData) : void;public function testFace (triangle:Triangle3D, object:DisplayObject3D, renderSessionData:RenderSessionData) : Boolean;public function clipFace (triangle:Triangle3D, object:DisplayObject3D, material:MaterialObject3D, renderSessionData:RenderSessionData, outputArray:Array) : Number;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\clipping\FrustumClipping.as
package org.papervision3d.core.clipping{import org.papervision3d.core.dyn.DynamicTriangles;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.math.Plane3D;import org.papervision3d.core.math.util.ClassificationUtil;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;public class FrustumClipping extends DefaultClipping{public static const NONE : int;public static const NEAR : int;public static const LEFT : int;public static const RIGHT : int;public static const TOP : int;public static const BOTTOM : int;public static const FAR : int;public static const DEFAULT : int;public static const ALL : int;private static const OUTSIDE : uint;private static const INSIDE : uint;private static const OUT_IN : uint;private static const IN_OUT : uint;private static const TO_DEGREES : Number;private static const TO_RADIANS : Number;private var _planes : int;private var _cnear : Plane3D;private var _cfar : Plane3D;private var _ctop : Plane3D;private var _cbottom : Plane3D;private var _cleft : Plane3D;private var _cright : Plane3D;private var _wnear : Plane3D;private var _wfar : Plane3D;private var _wtop : Plane3D;private var _wbottom : Plane3D;private var _wleft : Plane3D;private var _wright : Plane3D;private var _nc : Number3D;private var _fc : Number3D;private var _ntl : Number3D;private var _ntr : Number3D;private var _nbr : Number3D;private var _nbl : Number3D;private var _ftl : Number3D;private var _ftr : Number3D;private var _fbr : Number3D;private var _fbl : Number3D;private var _camPos : Number3D;private var _axisX : Number3D;private var _axisY : Number3D;private var _axisZ : Number3D;private var _axisZi : Number3D;private var _cplanes : Array;private var _wplanes : Array;private var _matrix : Matrix3D;private var _world : Matrix3D;private var _planePoints : Array;private var _dynTriangles : DynamicTriangles;/**
* Bitmask indicating which planes are used for clipping.
*/
public function get planes () : int;/**
* Bitmask indicating which planes are used for clipping.
*/
public function set planes (value:int) : Void;/**
*
*/
public function FrustumClipping (planes:int = -1);/**
*
*/
public function reset (renderSessionData:RenderSessionData) : void;/**
*
*/
public function setDisplayObject (object:DisplayObject3D, renderSessionData:RenderSessionData) : void;/**
*
*/
public function testFace (triangle:Triangle3D, object:DisplayObject3D, renderSessionData:RenderSessionData) : Boolean;/**
*
*/
public function clipFace (triangle:Triangle3D, object:DisplayObject3D, material:MaterialObject3D, renderSessionData:RenderSessionData, outputArray:Array) : Number;/**
* Sutherland-Hodgman clipping of an Array of points.
		 * 
		 * @param	points
		 * @param	plane
		 * @return
*/
public function clipPointsToPlane (object:DisplayObject3D, points:Array, uvs:Array, plane:Plane3D) : Array;/**
* 
		 * @param	pDist1
		 * @param	pDist2
		 * @return
*/
private function compareDistances (pDist1:Number, pDist2:Number) : uint;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\clipping\draw\Clipping.as
package org.papervision3d.core.clipping.draw{import flash.display.*;import flash.geom.*;import org.papervision3d.core.render.command.RenderableListItem;/**
* Base clipping class for no clipping.
*/
public class Clipping{private var rectangleClipping : RectangleClipping;private var zeroPoint : Point;private var globalPoint : Point;/**
* Minimum allowed x value for primitives
*/
public var minX : Number;/**
* Minimum allowed y value for primitives
*/
public var minY : Number;/**
* Maximum allowed x value for primitives
*/
public var maxX : Number;/**
* Maximum allowed y value for primitives
*/
public var maxY : Number;/**
* Checks a drawing primitive for clipping.
		 * 
		 * @param	pri	The drawing primitive being checked.
		 * @return		The clipping result - false for clipped, true for non-clipped.
*/
public function check (pri:RenderableListItem) : Boolean;/**
* Checks a bounding rectangle for clipping.
		 * 
		 * @param	minX	The x value for the left side of the rectangle.
		 * @param	minY	The y value for the top side of the rectangle.
		 * @param	maxX	The x value for the right side of the rectangle.
		 * @param	maxY	The y value for the bottom side of the rectangle.
		 * @return		The clipping result - false for clipped, true for non-clipped.
*/
public function rect (minX:Number, minY:Number, maxX:Number, maxY:Number) : Boolean;/**
* Returns a rectangle clipping object representing the bounding box of the clipping object.
*/
public function asRectangleClipping () : RectangleClipping;/**
* Returns a rectangle clipping object initilised with the edges of the flash movie as the clipping bounds.
*/
public function screen (container:Sprite) : Clipping;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\clipping\draw\RectangleClipping.as
package org.papervision3d.core.clipping.draw{import org.papervision3d.core.render.command.RenderableListItem;/**
Rectangle clipping
*/
public class RectangleClipping extends Clipping{public function RectangleClipping (minX:Number = -1000000, minY:Number = -1000000, maxX:Number = 1000000, maxY:Number = 1000000);/**
* @inheritDoc
*/
public function asRectangleClipping () : RectangleClipping;/**
* @inheritDoc
*/
public function check (pri:RenderableListItem) : Boolean;/**
* @inheritDoc
*/
public function rect (minX:Number, minY:Number, maxX:Number, maxY:Number) : Boolean;/**
* Used to trace the values of a rectangle clipping object.
		 * 
		 * @return A string representation of the rectangle clipping object.
*/
public function toString () : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\controller\AnimationController.as
package org.papervision3d.core.controller{import org.papervision3d.core.animation.channel.transform.TransformChannel3D;import flash.utils.getTimer;import org.papervision3d.core.animation.clip.AnimationClip3D;import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.animation.IAnimatable;import org.papervision3d.core.controller.IObjectController;/**
* The AnimationController class controls an animation.	 * 	 * @author Tim Knip / floorplanner.com
*/
public class AnimationController implements IObjectController{/**
* Start time of animation in seconds.
*/
public var startTime : Number;/**
* End time of animation in seconds.
*/
public var endTime : Number;/**
*
*/
private var _channels : Array;/**
*
*/
private var _isPlaying : Boolean;/**
*
*/
private var _isPaused : Boolean;/**
*
*/
private var _currentTime : Number;/**
*
*/
private var _currentTimeStamp : int;/**
*
*/
private var _pauseTime : Number;/**
*
*/
private var _loop : Boolean;/**

*/
private var _clip : AnimationClip3D;/**

*/
private var _clips : Array;/**

*/
private var _clipByName : Object;public function set channels (value:Array) : Void;public function get channels () : Array;/**
* Gets all defined clip names. This property is read-only.		 * 		 * @return Array containing clip names.
*/
public function get clipNames () : Array;/**
* Gets all defined clips. This property is read-only.		 * 		 * @return Array containing clips.		 * 		 * @see org.papervision3d.core.animation.clip.AnimationClip3D
*/
public function get clips () : Array;/**
* Number of channels.
*/
public function get numChannels () : uint;/**
* Whether the animation is playing. This property is read-only.
*/
public function get playing () : Boolean;/**
* Constructor.
*/
public function AnimationController ();/**
*
*/
public function addChannel (channel:Channel3D) : Channel3D;/**
*
*/
public function addClip (clip:AnimationClip3D) : AnimationClip3D;/**
*
*/
public function clone () : AnimationController;/**
* Initialize.
*/
protected function init () : void;/**
* Pause the animation.
*/
public function pause () : void;/**
* Plays the animation.		 * 		 * @param 	clip	Clip to play. Default is "all"		 * @param 	loop	Whether the animation should loop. Default is true.
*/
public function play (clip:String = "all", loop:Boolean = true) : void;/**
*
*/
public function removeAllChannels () : void;/**
*
*/
public function removeChannel (channel:Channel3D) : Channel3D;/**
* Removes a clip.		 * 		 * @param clip		 * 		 * @return	The removed clip or null on failure.
*/
public function removeClip (clip:AnimationClip3D) : AnimationClip3D;/**
* Resumes the animation.		 * 		 *  @param loop	Whether the animation should loop. Defaults to true;
*/
public function resume (loop:Boolean = true) : void;/**
* Stops the animation.
*/
public function stop () : void;/**
* Update.
*/
public function update () : void;/**
* Updates the startTime and endTime of this animation controller.
*/
protected function updateStartAndEndTime () : void;/**
*
*/
public function toString () : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\controller\IControllerProvider.as
package org.papervision3d.core.controller{/**
* @author Tim Knip / floorplanner.com
*/
public interface IControllerProvider{/**
* Gets all controlllers.
*/
public function set controllers (value:Array) : Void;public function get controllers () : Array;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\controller\IObjectController.as
package org.papervision3d.core.controller{/**
* @author Tim Knip / floorplanner.com
*/
public interface IObjectController{public function update () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\controller\MorphController.as
package org.papervision3d.core.controller{import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.log.PaperLogger;/**
* The MorphController class controls a mesh's vertices by applying a morph.	 * 	 * Each possible mesh that can be blended (a morph target) must be specified.	 * Each morph target is assigned a blend weight. The result is obtained via two methods :	 * 	 * <ol>	 * <li>NORMALIZED  (Target1, Target2, ...)*(w1, w2, ...) = (1-w1-w2-...)*BaseMesh + w1*Target1 + w2*Target2 + ...</li>	 * <li>RELATIVE    (Target1, Target2, ...) + (w1, w2, ...) = BaseMesh + w1*Target1 + w2*Target2 + ...</li>	 * </ol>	 * 	 * @author Tim Knip / floorplanner.com
*/
public class MorphController implements IObjectController{/**

*/
public var active : Boolean;/**

*/
public var target : TriangleMesh3D;/**

*/
public var targets : Array;/**

*/
public var weights : Array;/**

*/
public var normalized : Boolean;/**

*/
private var cached : Array;/**
* Constructor.
*/
public function MorphController (target:TriangleMesh3D, normalized:Boolean = true);/**
*
*/
public function addMorphTarget (mesh:TriangleMesh3D, weight:Number) : void;/**
*
*/
public function update () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\controller\SkinController.as
package org.papervision3d.core.controller{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.objects.special.Skin3D;public class SkinController implements IObjectController{/**

*/
public var poseMatrix : Matrix3D;/**

*/
public var bindShapeMatrix : Matrix3D;/**

*/
public var target : Skin3D;/**

*/
public var joints : Array;/**

*/
public var invBindMatrices : Array;/**

*/
public var vertexWeights : Array;/**

*/
public var input : MorphController;private var _cached : Array;/**
* Constructor.
		 * 
		 * @param	target
*/
public function SkinController (target:Skin3D);/**
* Update.
*/
public function update () : void;/**
* Cache original vertices.
*/
private function cacheVertices () : void;/**
* Skins a mesh.
		 * 
		 * @param	joint
		 * @param	meshVerts
		 * @param	skinnedVerts
*/
private function skinMesh (joint:DisplayObject3D, weights:Array, inverseBindMatrix:Matrix3D, meshVerts:Array, skinnedVerts:Array) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\CompositeTriangleCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;public class CompositeTriangleCuller implements ITriangleCuller{private var cullers : Array;public function CompositeTriangleCuller ();private function init () : void;public function addCuller (culler:ITriangleCuller) : void;public function removeCuller (culler:ITriangleCuller) : void;public function clearCullers () : void;public function testFace (face3D:Triangle3D, vertex0:Vertex3DInstance, vertex1:Vertex3DInstance, vertex2:Vertex3DInstance) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\DefaultLineCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Line3D;import org.papervision3d.core.culling.ILineCuller;/**
* @author Seb Lee-Delisle
*/
public class DefaultLineCuller implements ILineCuller{public function DefaultLineCuller ();public function testLine (line:Line3D) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\DefaultParticleCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Particle;public class DefaultParticleCuller implements IParticleCuller{public function DefaultParticleCuller ();public function testParticle (particle:Particle) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\DefaultTriangleCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.objects.DisplayObject3D;public class DefaultTriangleCuller implements ITriangleCuller{protected static var x0 : Number;protected static var y0 : Number;protected static var x1 : Number;protected static var y1 : Number;protected static var x2 : Number;protected static var y2 : Number;public function DefaultTriangleCuller ();public function testFace (face:Triangle3D, vertex0:Vertex3DInstance, vertex1:Vertex3DInstance, vertex2:Vertex3DInstance) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\FrustumCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.AxisAlignedBoundingBox;import org.papervision3d.core.math.BoundingSphere;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.objects.DisplayObject3D;/**
* @author Tim Knip
*/
public class FrustumCuller implements IObjectCuller{public static const INSIDE : int;public static const OUTSIDE : int;public static const INTERSECT : int;/**

*/
public var transform : Matrix3D;private var _fov : Number;private var _far : Number;private var _near : Number;private var _nw : Number;private var _nh : Number;private var _fw : Number;private var _fh : Number;private var _tang : Number;private var _ratio : Number;private var _sphereX : Number;private var _sphereY : Number;public function set far (value:Number) : Void;public function get far () : Number;public function set fov (value:Number) : Void;public function get fov () : Number;public function set near (value:Number) : Void;public function get near () : Number;public function set ratio (value:Number) : Void;public function get ratio () : Number;/**
* Constructor.
*/
public function FrustumCuller ();/**
* Intializes the frustum.
		 * 
		 * @param	fovY	Vertical Field Of View in degrees.
		 * @param	ratio	Aspect ratio (ie: viewport.width / viewport.height).
		 * @param	near	Distance to near plane (ie: camera.focus).
		 * @param	far		Distance to far plane.
*/
public function initialize (fovY:Number = 60, ratio:Number = 1.333, near:Number = 1, far:Number = 5000) : void;/**
* Tests whether an axis aligned boundingbox is inside, outside or intersecting the frustum. 
		 * When earlyOut is set to true, the method returns INSIDE when a single point of the aabb is
		 * inside the frustum (fast). Set earlyOut to false if you want to test for INTERSECT. 
		 * 
		 * @param	object	The object to test.
		 * @param	aabb	AxisAlignedBoundingBox.
		 * @param	earlyOut	Early out. Default is true.
		 * 
		 * @return Integer indicating inside(1), outside(-1) or intersecting(0) the frustum.
*/
public function aabbInFrustum (object:DisplayObject3D, aabb:AxisAlignedBoundingBox, earlyOut:Boolean = true) : int;/**
* Tests whether a point is inside the frustum.
		 *
		 * @param 	x
		 * @param 	y
		 * @param 	z
		 *
		 * @return	Integer indicating inside (1) or outside (-1) the frustum.
*/
public function pointInFrustum (x:Number, y:Number, z:Number) : int;/**
* Tests whether a sphere is inside the frustum.
		 *
		 * @param 	object	The object to test.
		 * @param	boundingSphere	The bounding sphere.
		 *
		 * @return	Integer indicating inside (1), outside (0) or intersecting (-1) the frustum.
*/
public function sphereInFrustum (obj:DisplayObject3D, boundingSphere:BoundingSphere) : int;/**
* Tests whether an object is inside the frustum.
		 * 
		 * @param	obj		The object to test
		 * 
		 * @return	Integer indicating inside(1), outside(-1) or intersecting(0)
*/
public function testObject (obj:DisplayObject3D) : int;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\FrustumTestMethod.as
package org.papervision3d.core.culling{public class FrustumTestMethod{/**
* @Author Ralph Hauwert
*/
public static const NO_TESTING : int;public static const BOUNDING_SPHERE : int;public static const BOUNDING_BOX : int;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\ILineCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Line3D;/**
* @author Seb Lee-Delisle
*/
public interface ILineCuller{public function testLine (line:Line3D) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\IObjectCuller.as
package org.papervision3d.core.culling{import org.papervision3d.objects.DisplayObject3D;/**
* @author Tim Knip
*/
public interface IObjectCuller{public function testObject (object:DisplayObject3D) : int;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\IParticleCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Particle;public interface IParticleCuller{public function testParticle (particle:Particle) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\ITriangleCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;public interface ITriangleCuller{public function testFace (face3D:Triangle3D, vertex0:Vertex3DInstance, vertex1:Vertex3DInstance, vertex2:Vertex3DInstance) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\NullTriangleCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.geom.renderables.Triangle3D;public class NullTriangleCuller implements ITriangleCuller{public function NullTriangleCuller ();public function testFace (face3D:Triangle3D, vertex0:Vertex3DInstance, vertex1:Vertex3DInstance, vertex2:Vertex3DInstance) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\RectangleLineCuller.as
package org.papervision3d.core.culling{import flash.geom.Rectangle;import org.papervision3d.core.geom.renderables.Line3D;import org.papervision3d.core.culling.ILineCuller;import org.papervision3d.core.math.util.FastRectangleTools;/**
* @author Seb Lee-Delisle
*/
public class RectangleLineCuller implements ILineCuller{private var cullingRectangle : Rectangle;private var lineBoundsRect : Rectangle;private var rectIntersection : Rectangle;/**
* @Author Seb Lee-Delisle		 *		 * RectangleLineCuller		 * 		 * This Line Culler culls lines based upon whether they intersect the viewport rectangle.
*/
public function RectangleLineCuller (cullingRectangle:Rectangle = null);public function testLine (line:Line3D) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\RectangleParticleCuller.as
package org.papervision3d.core.culling{import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.geom.renderables.Vertex3D;import flash.geom.Rectangle;import flash.geom.Point;import org.papervision3d.core.math.util.FastRectangleTools;public class RectangleParticleCuller implements IParticleCuller{private static var vInstance : Vertex3DInstance;private static var testPoint : Point;public var cullingRectangle : Rectangle;public function RectangleParticleCuller (cullingRectangle:Rectangle = null);public function testParticle (particle:Particle) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\RectangleTriangleCuller.as
package org.papervision3d.core.culling{import flash.geom.Rectangle;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.util.FastRectangleTools;public class RectangleTriangleCuller extends DefaultTriangleCuller implements ITriangleCuller{private static const DEFAULT_RECT_W : Number;private static const DEFAULT_RECT_H : Number;private static const DEFAULT_RECT_X : Number;private static const DEFAULT_RECT_Y : Number;private static var hitRect : Rectangle;public var cullingRectangle : Rectangle;/**
* @Author Ralph Hauwert
		 *
		 * RectangleTriangleCuller
		 * 
		 * This Triangle Culler culls faces based upon the visibility of it vertices and their visibility in a defined rectangle.
*/
public function RectangleTriangleCuller (cullingRectangle:Rectangle = null);public function testFace (face:Triangle3D, vertex0:Vertex3DInstance, vertex1:Vertex3DInstance, vertex2:Vertex3DInstance) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\ViewportObjectFilter.as
package org.papervision3d.core.culling{import flash.utils.Dictionary;import org.papervision3d.objects.DisplayObject3D;/**
* @Author Ralph Hauwert
*/
public class ViewportObjectFilter implements IObjectCuller{protected var _mode : int;protected var objects : Dictionary;public function set mode (mode:int) : Void;public function get mode () : int;public function ViewportObjectFilter (mode:int);private function init () : void;public function testObject (object:DisplayObject3D) : int;public function addObject (do3d:DisplayObject3D) : void;public function removeObject (do3d:DisplayObject3D) : void;public function destroy () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\culling\ViewportObjectFilterMode.as
package org.papervision3d.core.culling{/**
* @Author Ralph Hauwert
*/
public class ViewportObjectFilterMode{public static const INCLUSIVE : int;public static const EXCLUSIVE : int;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\data\UserData.as
package org.papervision3d.core.data{/**
* @author Ralph Hauwert
*/
public class UserData{public var data : *;/**
* UserData();
		 * 
		 * The UserData class abstracts an end-user defined data object.
		 * 
		 * The UserData class itself can be extends for more typed setting of data.
*/
public function UserData (data:* = null);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\dyn\DynamicTriangles.as
package org.papervision3d.core.dyn{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.materials.BitmapMaterial;import org.papervision3d.materials.special.CompositeMaterial;import org.papervision3d.objects.DisplayObject3D;public class DynamicTriangles{private static const GROW_SIZE : int;private static const INIT_SIZE : int;private static var triangleCounter : int;private static var trianglePool : Array;public function DynamicTriangles ();private static function init () : void;public function getTriangle (object:DisplayObject3D = null, m:MaterialObject3D = null, v0:Vertex3D = null, v1:Vertex3D = null, v2:Vertex3D = null, uv0:NumberUV = null, uv1:NumberUV = null, uv2:NumberUV = null) : Triangle3D;public function releaseAll () : void;public function returnTriangle (triangle:Triangle3D) : void;public function returnAllTriangles () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\AbstractEffect.as
package org.papervision3d.core.effects{import flash.filters.BitmapFilter;import org.papervision3d.view.layer.BitmapEffectLayer;public class AbstractEffect implements IEffect{internal function AbstractEffect ();public function attachEffect (layer:BitmapEffectLayer) : void;public function preRender () : void;public function postRender () : void;public function getEffect () : BitmapFilter;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\BitmapColorEffect.as
package org.papervision3d.core.effects{import flash.filters.ColorMatrixFilter;import flash.geom.Point;import org.papervision3d.view.layer.BitmapEffectLayer;public class BitmapColorEffect extends AbstractEffect{private var layer : BitmapEffectLayer;private var filter : ColorMatrixFilter;public function BitmapColorEffect (r:Number = 1, g:Number = 1, b:Number = 1, a:Number = 1);public function updateEffect (r:Number = 1, g:Number = 1, b:Number = 1, a:Number = 1) : void;public function attachEffect (layer:BitmapEffectLayer) : void;public function postRender () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\BitmapFireEffect.as
package org.papervision3d.core.effects{import org.papervision3d.view.layer.BitmapEffectLayer;import flash.display.BitmapData;import flash.display.DisplayObject;import flash.filters.BlurFilter;import flash.filters.ColorMatrixFilter;import flash.filters.DisplacementMapFilter;import flash.geom.ColorTransform;import flash.geom.Matrix;import flash.geom.Point;public class BitmapFireEffect extends AbstractEffect{private var layer : BitmapEffectLayer;private var _fadeRate : Number;private var _distortionScale : Number;private var _distortion : Number;private var _flameHeight : Number;private var _flameSpread : Number;private var _blueFlame : Boolean;private var _smoke : Number;private var displayBmp : BitmapData;private var scratchBmp : BitmapData;private var perlinBmp : BitmapData;private var mtx : Matrix;private var pnt : Point;private var drawColorTransform : ColorTransform;private var fireCMF : ColorMatrixFilter;private var dispMapF : DisplacementMapFilter;private var blurF : BlurFilter;private var endCount : Number;private var bmpsValid : Boolean;private var perlinValid : Boolean;private var filtersValid : Boolean;private var _target : DisplayObject;public function set width (value:Number) : Void;public function get width () : Number;public function set height (value:Number) : Void;public function get height () : Number;/**
* Sets the rate that flames fade as they move up. 0 is slowest, 1 is fastest.         *         * @default 0.4
*/
public function set fadeRate (value:Number) : Void;public function get fadeRate () : Number;/**
* Sets the scale of flame distortion. 0.1 is tiny and chaotic, 1 is large and smooth.         *         * @default 0.4
*/
public function set distortionScale (value:Number) : Void;public function get distortionScale () : Number;/**
* Sets the amount of distortion. 0.1 is little, 1 is chaotic.         *         * @default 0.4
*/
public function set distortion (value:Number) : Void;public function get distortion () : Number;/**
* Sets the how high the flame will burn. 0 is zero gravity, 1 is a bonfire.         *         * @default 0.3
*/
public function set flameHeight (value:Number) : Void;public function get flameHeight () : Number;/**
* Sets the how much the fire will spread out around the target. 0 is no spread, 1 is a lot.         *         * @default 0.3
*/
public function set flameSpread (value:Number) : Void;public function get flameSpread () : Number;/**
* Indicates whether it should use a blue or red flame.         *         * @default false
*/
public function set blueFlame (value:Boolean) : Void;public function get blueFlame () : Boolean;/**
* Sets the amount of smoke. 0 little, 1 lots.         *         * @default 0
*/
public function set smoke (value:Number) : Void;public function get smoke () : Number;/**
* Sets the amount of smoke. 0 little, 1 lots.         *         * @default
*/
public function set targetName (value:String) : Void;/**
* Defines the shape of the fire. The fire will burn upwards, so it should be near the bottom, and centered in the FireFX component.         *         * @default
*/
public function set target (value:DisplayObject) : Void;public function get target () : DisplayObject;public function BitmapFireEffect (r:Number = 1, g:Number = 1, b:Number = 1, a:Number = 1);public function attachEffect (layer:BitmapEffectLayer) : void;public function postRender () : void;/**
* Clears the fire.
*/
public function clear () : void;public function stopFire () : void;private function updateBitmaps () : void;private function updatePerlin () : void;private function updateFilters () : void;private function startFire () : void;private function doFire () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\BitmapLayerEffect.as
package org.papervision3d.core.effects{import flash.filters.BitmapFilter;import org.papervision3d.view.layer.BitmapEffectLayer;public class BitmapLayerEffect extends AbstractEffect{private var layer : BitmapEffectLayer;private var filter : BitmapFilter;public var isPostRender : Boolean;public function BitmapLayerEffect (filter:BitmapFilter, isPostRender:Boolean = true);public function updateEffect (filter:BitmapFilter) : void;public function attachEffect (layer:BitmapEffectLayer) : void;public function preRender () : void;public function postRender () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\BitmapMotionEffect.as
package org.papervision3d.core.effects{import flash.display.BitmapData;import flash.display.BlendMode;import flash.filters.BitmapFilter;import flash.geom.Point;import org.papervision3d.view.layer.BitmapEffectLayer;public class BitmapMotionEffect extends AbstractEffect{private var layer : BitmapEffectLayer;private var filter : BitmapFilter;private var color : uint;public var now : BitmapData;public var before : BitmapData;public var buffer : BitmapData;public function BitmapMotionEffect (color:uint = 0xFF00FF00);public function attachEffect (layer:BitmapEffectLayer) : void;public function preRender () : void;public function postRender () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\BitmapPixelateEffect.as
package org.papervision3d.core.effects{import flash.display.BitmapData;import flash.geom.Rectangle;import org.papervision3d.view.layer.BitmapEffectLayer;public class BitmapPixelateEffect extends AbstractEffect{private var layer : BitmapEffectLayer;public var size : int;public function BitmapPixelateEffect (size:int = 4);public function attachEffect (layer:BitmapEffectLayer) : void;public function preRender () : void;public function postRender () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\IEffect.as
package org.papervision3d.core.effects{import flash.filters.BitmapFilter;import org.papervision3d.view.layer.BitmapEffectLayer;public interface IEffect{public function attachEffect (layer:BitmapEffectLayer) : void;public function preRender () : void;public function postRender () : void;public function getEffect () : BitmapFilter;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\objects\LensFlare.as
package org.papervision3d.core.effects.objects{import flash.display.BlendMode;import flash.display.DisplayObject;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.layer.ViewportLayer;public class LensFlare extends ViewportLayer{public var light : LightObject3D;public var flareWidth : Number;public var flareHeight : Number;public var edgeOffset : Number;private var flareArray : Array;public var positions : Array;public function LensFlare (light:LightObject3D, flareArray:Array, width:Number, height:Number, positions:Array = null);public function setFlareArray (flareArray:Array) : void;private function emptyFlareArray () : void;private function buildFlareArray () : void;public function updateFlare (showFlare:Boolean = true, testHit:DisplayObject = null) : void;public function hideFlare () : void;private function drawFlare () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\utils\BitmapClearMode.as
package org.papervision3d.core.effects.utils{public class BitmapClearMode{public static const CLEAR_PRE : String;public static const CLEAR_POST : String;public static const CLEAR_NEVER : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\utils\BitmapDrawCommand.as
package org.papervision3d.core.effects.utils{import flash.display.BitmapData;import flash.display.BlendMode;import flash.display.DisplayObject;import flash.geom.ColorTransform;import flash.geom.Matrix;import flash.geom.Rectangle;public class BitmapDrawCommand{public var colorTransform : ColorTransform;public var transformMatrix : Matrix;public var blendMode : String;public var smooth : Boolean;public var drawContainer : Boolean;public function BitmapDrawCommand (transMat:Matrix = null, colorTransform:ColorTransform = null, blendMode:String = null, smooth:Boolean = false);public function draw (canvas:BitmapData, drawLayer:DisplayObject, transMat:Matrix = null, clipRect:Rectangle = null) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\utils\ConvolutionMatrices.as
package org.papervision3d.core.effects.utils{public class ConvolutionMatrices{public static var SHARPEN : Array;public static var BRIGHTNESS : Array;public static var EXTRUDE : Array;public static var EMBOSS : Array;public static var BLUR : Array;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\effects\view\ReflectionView.as
package org.papervision3d.core.effects.view{import org.papervision3d.cameras.Camera3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.view.BasicView;import org.papervision3d.view.Viewport3D;import flash.events.Event;import flash.geom.ColorTransform;public class ReflectionView extends BasicView{public var viewportReflection : Viewport3D;public var cameraReflection : CameraObject3D;public var surfaceHeight : Number;private var _autoScaleToStage : Boolean;/**
* We need  to move the reflection view whenever the stage is resized so we have to implement
		 * the same functionality as the Viewport3D, ie we add a stage resize listener (once we're on the stage).
*/
public function set autoScaleToStage (scale:Boolean) : Void;public function ReflectionView (viewportWidth:Number = 640, viewportHeight:Number = 320, scaleToStage:Boolean = true, interactive:Boolean = false, cameraType:String = "Target");public function singleRender () : void;public function setReflectionColor (redMultiplier:Number = 0, greenMultiplier:Number = 0, blueMultiplier:Number = 0, redOffset:Number = 0, greenOffset:Number = 0, blueOffset:Number = 0) : void;/**
* Triggered when added to the stage to start listening to stage resizing
*/
protected function onAddedToStage (event:Event) : void;/**
* Triggered when removed from the stage to remove the stage resizing listener
*/
protected function onRemovedFromStage (event:Event) : void;private function onStageResize (e:Event = null) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\Lines3D.as
package org.papervision3d.core.geom{import org.papervision3d.core.geom.renderables.Line3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.render.command.RenderLine;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ILineDrawer;import org.papervision3d.materials.special.LineMaterial;import org.papervision3d.objects.DisplayObject3D;/**
* <p>
	 * The Lines object is a DisplayObject3D that is designed to contain and handle the rendering of
	 * Line3D objects. A Line3D is defined by two 3D vertices; one for each end. A line's start and end 
	 * vertices are converted into 2D space and rendered using the Flash drawing API lineTo method. 
	 * 
	 * Line3D can also render curves; add a control vertex using the Line3D.addControlVertex(...) method.
	 * The line's control vertex is then converted into 2D space and rendered using the Flash drawing API
	 * curveTo method.
	 * 
	 * The line's appearance is defined by its LineMaterial. 
	 * 
	 * </p>
	 * 
	 * <p>
	 * Example:
	 * </p>
	 * <pre><code>
	 * 
	 *  //This example creates a Lines3D DisplayObject3D and adds 100 lines into it. 
	 * 
	 *	var numLines : int = 100; 
	 *	
	 *	var lines3D : Lines3D = new Lines3D(); 
	 *	var lineMaterial : LineMaterial = new LineMaterial(0xff0000, 0.8); 
	 *	var lineWeight : Number = 5; 
	 *	
	 *	for(var i : int = 0; i<numLines; i++)
	 *	{
	 *		var startVertex : Vertex3D = new Vertex3D(Math.random()*200, Math.random()*200, Math.random()*200);
	 *		var endVertex 	: Vertex3D = new Vertex3D(Math.random()*200, Math.random()*200, Math.random()*200);
	 *		
	 *		var line : Line3D = new Line3D(lines3D, lineMaterial, lineWeight, startVertex, endVertex); 
	 *		
	 *		lines3D.addLine(line); 
	 *		
	 *	}
	 *	scene.addChild(lines3D); 
	 *		
 	 * </code></pre>
	 * </p>
	 * 
	 * <p>
	 * See also : LineMaterial
	 * </p>
	 * 
	 * @Author Ralph Hauwert
	 * @Author Seb Lee-Delisle
	 * @Author Alan Owen
 *
*/
public class Lines3D extends Vertices3D{public var lines : Array;private var _material : ILineDrawer;/**
* @param material			The default material for this Lines3D. If ommitted then the default
		 * 							LineMaterial3D is used. 
		 * @param name				An identifier for this Lines object.
*/
public function Lines3D (material:LineMaterial = null, name:String = null);private function init () : void;/**
* Converts 3D vertices into 2D space, to prepare for rendering onto the stage.
		*
		* @param 	parent				The parent DisplayObject3D
		* @param 	renderSessionData	The renderSessionData object for this render cycle. 
		 *
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* Adds a Line3D object to this Lines3D container.  
		 * @param line 	The Line3D object to add. 
		 *
*/
public function addLine (line:Line3D) : void;/**
* Creates a new line from the parameters passed and adds it.  
		 * @param size		The weight of the line. 
		 * @param x0		The line's start x position. 
		 * @param y0		The line's start y position. 
		 * @param z0		The line's start z position. 
		 * @param x1		The line's end x position. 
		 * @param y1		The line's end y position. 
		 * @param z1		The line's end z position. 
		 * @return 			The line just created. 
		 *
*/
public function addNewLine (size:Number, x0:Number, y0:Number, z0:Number, x1:Number, y1:Number, z1:Number) : Line3D;/**
* This is identical to addNewLine, except it breaks up the line into several shorter line segments
		 * that together make up the full line. This would be useful for improved z-depth sorting. 
		 * 
		 * @param size		The weight of the line. 
		 * @param segments	The number of segments to break up the line into
		 * @param x0		The line's start x position. 
		 * @param y0		The line's start y position. 
		 * @param z0		The line's start z position. 
		 * @param x1		The line's end x position. 
		 * @param y1		The line's end y position. 
		 * @param z1		The line's end z position. 
		 * @return 			An array of the lines just created. 
		 *
*/
public function addNewSegmentedLine (size:Number, segments:Number, x0:Number, y0:Number, z0:Number, x1:Number, y1:Number, z1:Number) : Array;/**
* Removes a line. 
		 * @param line 	The line to remove. 
		 *
*/
public function removeLine (line:Line3D) : void;/**
* Removes all the lines.  
		 *
*/
public function removeAllLines () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\Particles.as
package org.papervision3d.core.geom{import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.geom.renderables.Vertex3D;import flash.geom.Rectangle;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.core.culling.IObjectCuller;/**
* <p>	 * The Particles object is a DisplayObject3D that is used solely for displaying particle objects.	 * A single particle is a 2D graphic that is scaled and positioned relative to a 3D point, without	 * any perspective distortion. In effect, it's like a plane that is always facing the camera. This 	 * is sometimes referred to as a 3D sprite, pointsprite or billboard.	 * 	 * A particle's appearance is defined by its ParticleMaterial. 	 * 	 * </p>	 * 	 * <p>	 * Example:	 * </p>	 * <pre><code>	 * 	 *  //This example creates a Particles DisplayObject3D and adds 100 particles into it. 	 * 	 *	var numParticles : int = 100; 	 *		 *	var particles : Particles = new Particles(); 	 *	var particleMaterial : ParticleMaterial = new ParticleMaterial(0xff0000, 0.8,ParticleMaterial.SHAPE_CIRCLE); 	 *	var particleSize : Number = 5; 	 *		 *	for(var i : int = 0; i<numParticles; i++)	 *	{	 * 		var xpos : Number = Math.random()*200; 	 * 		var ypos : Number = Math.random()*200; 	 * 		var zpos : Number = Math.random()*200; 	 * 	 *		var particle : Particle = new Particle(particleMaterial, particleSize, xpos, ypos, zpos);	 *		particles.addParticle(particle); 	 *			 *	}	 *	scene.addChild(particles); 	 *  	 * </code></pre>	 * </p>	 * 	 * <p>	 * See also : ParticleMaterial, MovieAssetParticleMaterial, MovieParticleMaterial, BitmapParticleMaterial. 	 * </p>	 * 	 * @Author Ralph Hauwert	 * @Author Seb Lee-Delisle
*/
public class Particles extends Vertices3D{private var vertices : Array;public var particles : Array;private static var _newID : int;/**
* @param name				An identifier for this Particles object. 		 *
*/
public function Particles (name:String = "Particles");/**
* Converts 3D vertices into 2D space, to prepare for rendering onto the stage.		*		* @param 	parent				The parent DisplayObject3D		* @param 	renderSessionData	The renderSessionData object for this render cycle. 		 *
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* Adds a particle. 		 * 		 * @param	particle	The particle to be added.
*/
public function addParticle (particle:Particle) : void;/**
* Removes a particle. 		 * 		 * @param	particle	The particle to be removed.
*/
public function removeParticle (particle:Particle) : void;/**
* Removes all the particles. 		 *
*/
public function removeAllParticles () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\Pixels.as
package org.papervision3d.core.geom{import org.papervision3d.core.geom.renderables.Pixel3D;import org.papervision3d.core.render.command.RenderPixels;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.layer.BitmapEffectLayer;/**
* @Author Andy Zupko
*/
public class Pixels extends Vertices3D{private var vertices : Array;private var renderCommand : RenderPixels;public var pixels : Array;public var layer : BitmapEffectLayer;public var screenDepth : int;public var sort : Boolean;/**
* Vertexpixels
		 * 
		 * A simple Particle Renderer for Papervision3D.
		 * 
		 * Renders added pixels to a given container using Flash's drawing API.
*/
public function Pixels (effectLayer:BitmapEffectLayer, name:String = "pixels3d");/**
* Project
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* addParticle(particle);
		 * 
		 * @param	particle	partical to be added and rendered by to this Vertexpixels Object.
*/
public function addPixel3D (pixel:Pixel3D) : void;/**
* removeParticle(pixel);
		 * 
		 * @param	pixel	partical to be removed from this Vertexpixels Object.
*/
public function removePixel3D (pixel:Pixel3D) : void;/**
* removeAllpixels()
		 * 
		 * removes all pixels in this Vertexpixels Object.
*/
public function removeAllpixels () : void;private function sortOnDepth (a:Pixel3D, b:Pixel3D) : Number;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\TriangleMesh3D.as
package org.papervision3d.core.geom{import flash.utils.Dictionary;import org.papervision3d.core.culling.ITriangleCuller;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Triangle3DInstance;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.math.util.ClassificationUtil;import org.papervision3d.core.proto.*;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.objects.DisplayObject3D;/**
* The Mesh3D class lets you create and display solid 3D objects made of vertices and triangular polygons.
*/
public class TriangleMesh3D extends Vertices3D{private var _dtStore : Array;private var _dtActive : Array;private var _tri : RenderTriangle;public function set material (material:MaterialObject3D) : Void;/**
* Creates a new Mesh object.		*		* The Mesh DisplayObject3D class lets you create and display solid 3D objects made of vertices and triangular polygons.		* <p/>		* @param	material	A MaterialObject3D object that contains the material properties of the object.		* <p/>		* @param	vertices	An array of Vertex3D objects for the vertices of the mesh.		* <p/>		* @param	faces		An array of Face3D objects for the faces of the mesh.		* <p/>
*/
public function TriangleMesh3D (material:MaterialObject3D, vertices:Array, faces:Array, name:String = null);/**
* Clones this object.		 * 		 * @return	The cloned DisplayObject3D.
*/
public function clone () : DisplayObject3D;/**
* Projects three dimensional coordinates onto a two dimensional plane to simulate the relationship of the camera to subject.		*		* This is the first step in the process of representing three dimensional shapes two dimensionally.		*		* @param	camera	Camera3D object to render from.
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;protected function setScreenZ (meshSort:uint, vertex0:Vertex3DInstance, vertex1:Vertex3DInstance, vertex2:Vertex3DInstance) : Number;/**
* Planar projection from the specified plane.		*		* @param	u	The texture horizontal axis. Can be "x", "y" or "z". The default value is "x".		* @param	v	The texture vertical axis. Can be "x", "y" or "z". The default value is "y".
*/
public function projectTexture (u:String = "x", v:String = "y") : void;/**
* Divides all faces into 4.
*/
public function quarterFaces () : void;/**
* Merges duplicated vertices.
*/
public function mergeVertices () : void;public function createRenderTriangle (face:Triangle3D, material:MaterialObject3D, v0:Vertex3DInstance, v1:Vertex3DInstance, v2:Vertex3DInstance, uv0:NumberUV, uv1:NumberUV, uv2:NumberUV) : RenderTriangle;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\Vertices3D.as
package org.papervision3d.core.geom{import org.papervision3d.core.culling.IObjectCuller;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.proto.GeometryObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;/**
* The Vertices3D class lets you create and manipulate groups of vertices.	*
*/
public class Vertices3D extends DisplayObject3D{/**
* Creates a new Vertices3D object.		*		*		* @param	vertices	An array of Vertex3D objects for the vertices of the mesh.		* <p/>
*/
public function Vertices3D (vertices:Array, name:String = null);/**
* Clones this object.		 * 		 * @return	The cloned DisplayObject3D.
*/
public function clone () : DisplayObject3D;/**
* Projects three dimensional coordinates onto a two dimensional plane to simulate the relationship of the camera to subject.		*		* This is the first step in the process of representing three dimensional shapes two dimensionally.		*		* @param	camera		Camera.
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;public function projectEmpty (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* 		 * @param	parent		 * @param	camera		 * @param	sorted		 * @return
*/
public function projectFrustum (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* Calculates 3D bounding box.		*		* @return	{min : Number3D, max : Number3D, size : Number3D}
*/
public function boundingBox () : Object;/**
* Calculates 3D bounding box in world space.		*		* @return	{minX, maxX, minY, maxY, minZ, maxZ}
*/
public function worldBoundingBox () : Object;public function transformVertices (transformation:Matrix3D) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\AbstractRenderable.as
package org.papervision3d.core.geom.renderables{import org.papervision3d.core.data.UserData;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.objects.DisplayObject3D;public class AbstractRenderable implements IRenderable{public var _userData : UserData;public var instance : DisplayObject3D;/**
* userData UserData
		 * 
		 * Optional extra data to be added to this object.
*/
public function set userData (userData:UserData) : Void;public function get userData () : UserData;public function AbstractRenderable ();public function getRenderListItem () : IRenderListItem;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\IRenderable.as
package org.papervision3d.core.geom.renderables{import org.papervision3d.core.render.command.IRenderListItem;/**
* @Author Ralph Hauwert
*/
public interface IRenderable{public function getRenderListItem () : IRenderListItem;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\Line3D.as
package org.papervision3d.core.geom.renderables{import org.papervision3d.core.geom.Lines3D;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderLine;import org.papervision3d.materials.special.LineMaterial;/**
* 
	 * Line3D is used by Lines3D to store and render the lines. See Lines3D for a full explanation. 
	 * 
	 * @Author Ralph Hauwert
	 * @Author Andy Zupko
	 * @Author Seb Lee-Delisle
*/
public class Line3D extends AbstractRenderable implements IRenderable{public var v0 : Vertex3D;public var v1 : Vertex3D;public var cV : Vertex3D;public var material : LineMaterial;public var renderCommand : RenderLine;public var size : Number;/**
* 
		 * @param instance		The containing Lines3D object
		 * @param material		The material for the line
		 * @param size			The line weight
		 * @param vertex0		The start vertex
		 * @param vertex1		The end vertex
		 *
*/
public function Line3D (instance:Lines3D, material:LineMaterial, size:Number, vertex0:Vertex3D, vertex1:Vertex3D);public function addControlVertex (cx:Number, cy:Number, cz:Number) : void;public function getRenderListItem () : IRenderListItem;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\Particle.as
package org.papervision3d.core.geom.renderables{import flash.geom.Matrix;import flash.geom.Rectangle;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderParticle;import org.papervision3d.materials.special.ParticleMaterial;/**
* This is the single renderable Particle object, used by Particles.as
	 * 
	 * See Particles.as for a full explanation. 
	 * 
	 * 
	 * @author Ralph Hauwert
	 * @author Seb Lee-Delisle
*/
public class Particle extends AbstractRenderable implements IRenderable{/**
* The size or scale factor of the particle.
*/
public var size : Number;public var vertex3D : Vertex3D;public var material : ParticleMaterial;public var renderCommand : RenderParticle;public var renderScale : Number;public var drawMatrix : Matrix;public var rotationZ : Number;/**
* The rectangle containing the particles visible area in 2D.
*/
public var renderRect : Rectangle;public function set x (x:Number) : Void;public function get x () : Number;public function set y (y:Number) : Void;public function get y () : Number;public function set z (z:Number) : Void;public function get z () : Number;/**
* 
		 * @param material		The ParticleMaterial used for rendering the Particle
		 * @param size			The size of the particle. For some materials (ie BitmapParticleMaterial) this is used as a scale factor. 
		 * @param x				x position of the particle
		 * @param y				y position of the particle
		 * @param z				z position of the particle
		 *
*/
public function Particle (material:ParticleMaterial, size:Number = 1, x:Number = 0, y:Number = 0, z:Number = 0);/**
* This is called during the projection cycle. It updates the rectangular area that 
		 * the particle is drawn into. It's important for the culling phase, and changes dependent
		 * on the type of material used.  
		 *
*/
public function updateRenderRect () : void;public function getRenderListItem () : IRenderListItem;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\Pixel3D.as
package org.papervision3d.core.geom.renderables{import org.papervision3d.core.geom.Pixels;/**
* @author Andy Zupko.
*/
public class Pixel3D{public var vertex3D : Vertex3D;public var color : uint;public var instance : Pixels;public function set x (x:Number) : Void;public function get x () : Number;public function set y (y:Number) : Void;public function get y () : Number;public function set z (z:Number) : Void;public function get z () : Number;public function Pixel3D (color:uint, x:Number = 0, y:Number = 0, z:Number = 0);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\Triangle3D.as
package org.papervision3d.core.geom.renderables{import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.*;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.materials.BitmapMaterial;import org.papervision3d.materials.special.CompositeMaterial;import org.papervision3d.objects.DisplayObject3D;/**
* The Face3D class lets you render linear textured triangles. It also supports solid colour fill and hairline outlines.	*
*/
public class Triangle3D extends AbstractRenderable implements IRenderable{/**
* An array of Vertex3D objects for the three vertices of the triangle.
*/
public var vertices : Array;/**
* A material id TODO
*/
public var _materialName : String;/**
* A MaterialObject3D object that contains the material properties of the back of a single sided triangle.
*/
public var uv0 : NumberUV;public var uv1 : NumberUV;public var uv2 : NumberUV;public var _uvArray : Array;/**
* [read-only] The average depth (z coordinate) of the transformed triangle. Also known as the distance from the camera. Used internally for z-sorting.
*/
public var screenZ : Number;/**
* [read-only] A Boolean value that indicates that the face is visible, i.e. it's vertices are in front of the camera.
*/
public var visible : Boolean;/**
* [read-only] Unique id of this instance.
*/
public var id : Number;/**
* Used to store references to the vertices.
*/
public var v0 : Vertex3D;public var v1 : Vertex3D;public var v2 : Vertex3D;/**
* The face normal
*/
public var faceNormal : Number3D;/**
* stores the material for this face.
*/
public var material : MaterialObject3D;public var renderCommand : RenderTriangle;private static var _totalFaces : Number;/**
* An array of {x,y} objects for the corresponding UV pixel coordinates of each triangle vertex.
*/
public function set uv (uvs:Array) : Void;public function get uv () : Array;/**
* The Face3D constructor lets you create linear textured or solid colour triangles.		*		* @param	vertices	An array of Vertex3D objects for the three vertices of the triangle.		* @param	material	A MaterialObject3D object that contains the material properties of the triangle.		* @param	uv			An array of {x,y} objects for the corresponding UV pixel coordinates of each triangle vertex.
*/
public function Triangle3D (do3dInstance:DisplayObject3D, vertices:Array, material:MaterialObject3D = null, uv:Array = null);public function reset (object:DisplayObject3D, vertices:Array, material:MaterialObject3D, uv:Array) : void;public function createNormal () : void;public function getRenderListItem () : IRenderListItem;public function updateVertices () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\Triangle3DInstance.as
package org.papervision3d.core.geom.renderables{import flash.display.Sprite;import org.papervision3d.core.math.Number3D;import org.papervision3d.objects.DisplayObject3D;public class Triangle3DInstance{public var instance : DisplayObject3D;/**
* container is initialized via DisplayObject3D's render method IF DisplayObject3D.faceLevelMode is set to true
*/
public var container : Sprite;public var visible : Boolean;public var screenZ : Number;public var faceNormal : Number3D;public function Triangle3DInstance (face:Triangle3D, instance:DisplayObject3D);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\VectorShapeRenderable.as
package org.papervision3d.core.geom.renderables{import org.papervision3d.core.geom.renderables.AbstractRenderable;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderVectorShape;import org.papervision3d.materials.special.VectorShapeMaterial;import org.papervision3d.objects.special.VectorShape3D;/**
* @author Mark Barcinski
*/
public class VectorShapeRenderable extends AbstractRenderable implements IRenderable{public var material : VectorShapeMaterial;public var renderCommand : RenderVectorShape;public function VectorShapeRenderable (instance:VectorShape3D, renderCommand:RenderVectorShape);public function getRenderListItem () : IRenderListItem;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\Vertex3D.as
package org.papervision3d.core.geom.renderables{import flash.utils.Dictionary;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.render.command.IRenderListItem;/**
* The Vertex3D constructor lets you create 3D vertices.
*/
public class Vertex3D extends AbstractRenderable implements IRenderable{/**
* An Number that sets the X coordinate of a object relative to the scene coordinate system.
*/
public var x : Number;/**
* An Number that sets the Y coordinate of a object relative to the scene coordinates.
*/
public var y : Number;/**
* An Number that sets the Z coordinate of a object relative to the scene coordinates.
*/
public var z : Number;/**
* An object that contains user defined properties.
*/
public var extra : Object;/**
* Used for removing duplicates in clipping procedures
*/
public var timestamp : Number;/**
* Vertex2D instance
*/
public var vertex3DInstance : Vertex3DInstance;public var normal : Number3D;public var connectedFaces : Dictionary;private var persp : Number;protected var position : Number3D;/**
* Creates a new Vertex3D object whose three-dimensional values are specified by the x, y and z parameters.
		*
		* @param	x	The horizontal coordinate value. The default value is zero.
		* @param	y	The vertical coordinate value. The default value is zero.
		* @param	z	The depth coordinate value. The default value is zero.
		*
		*
*/
public function Vertex3D (x:Number = 0, y:Number = 0, z:Number = 0);public function getPosition () : Number3D;public function toNumber3D () : Number3D;public function clone () : Vertex3D;public function calculateNormal () : void;public function getRenderListItem () : IRenderListItem;public static function weighted (a:Vertex3D, b:Vertex3D, aw:Number, bw:Number) : Vertex3D;public function perspective (focus:Number) : Vertex3DInstance;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\geom\renderables\Vertex3DInstance.as
package org.papervision3d.core.geom.renderables{import org.papervision3d.core.math.Number3D;/**
* The Vertex3DInstance constructor lets you create 2D projected vertices.
*/
public class Vertex3DInstance{/**
* An Number that sets the X coordinate of a object relative to the scene coordinate system.
*/
public var x : Number;/**
* An Number that sets the Y coordinate of a object relative to the scene coordinates.
*/
public var y : Number;/**
* An Number that sets the Z coordinate of a object relative to the scene coordinates.
*/
public var z : Number;/**
* An object that contains user defined properties.
*/
public var extra : Object;/**
* [internal-use] A Boolean value that indicates whether the vertex is visible after projection.
		*
		* If false, it indicates that the vertex is behind the camera plane.
		*
		*
*/
public var visible : Boolean;public var normal : Number3D;private var persp : Number;/**
* Creates a new Vertex2D object whose three-dimensional values are specified by the x, y and z parameters.
		*
		* @param	x	The horizontal coordinate value. The default value is zero.
		* @param	y	The vertical coordinate value. The default value is zero.
		* @param	z	The depth coordinate value. The default value is zero.
		*
		*
*/
public function Vertex3DInstance (x:Number = 0, y:Number = 0, z:Number = 0);public function clone () : Vertex3DInstance;public static function dot (v0:Vertex3DInstance, v1:Vertex3DInstance) : Number;public static function cross (v0:Vertex3DInstance, v1:Vertex3DInstance) : Number;public static function sub (v0:Vertex3DInstance, v1:Vertex3DInstance) : Vertex3DInstance;public static function subTo (v0:Vertex3DInstance, v1:Vertex3DInstance, o:Vertex3DInstance) : void;public function deperspective (focus:Number) : Vertex3D;/**
* Calculates the squared distance between two screen vertex objects.
		 * 
		 * @param	b	The screen vertex object to use for the calcation.
		 * @return		The squared scalar value of the vector between this and the given scren vertex.
*/
public function distanceSqr (b:Vertex3DInstance) : Number;/**
* Calculates the distance between two screen vertex objects.
		 * 
		 * @param	b	The second screen vertex object to use for the calcation.
		 * @return		The scalar value of the vector between this and the given screen vertex.
*/
public function distance (b:Vertex3DInstance) : Number;public static function median (a:Vertex3DInstance, b:Vertex3DInstance, focus:Number) : Vertex3DInstance;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\io\BasicExporter.as
package org.papervision3d.core.io{import flash.utils.ByteArray;import org.papervision3d.core.io.exporters.*;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.proto.DisplayObjectContainer3D;import org.papervision3d.core.proto.SceneObject3D;import org.papervision3d.materials.BitmapFileMaterial;import org.papervision3d.materials.ColorMaterial;import org.papervision3d.materials.WireframeMaterial;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.objects.primitives.Sphere;import org.papervision3d.scenes.Scene3D;/**
* @author Tim Knip
*/
public class BasicExporter{/**
* Exports an object and its children to the specified file format.
		 * NOTE: its best to only export after at least one renderpass (all object-internals like 
		 * rotation-matrices etc. will then be initialized).
		 * 
		 * @param object The object to export. Supported: DisplayObject3D, SceneObject3D.
		 * @param exportFileFormat The file export format. @see org.papervision3d.core.io.exporters.ExportFileFormat
		 * 
		 * @return ByteArray
*/
public static function export (object:DisplayObjectContainer3D, exportFileFormat:uint = 0) : ByteArray;/**
* Test
*/
public static function test () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\io\exporters\ExportCollada.as
package org.papervision3d.core.io.exporters{import flash.utils.Dictionary;import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.materials.BitmapFileMaterial;import org.papervision3d.materials.WireframeMaterial;import org.papervision3d.materials.utils.MaterialsList;import org.papervision3d.objects.DisplayObject3D;/**
* This class lets you export a DisplayObject3D to the Collada file format (*.dae).
	 * <p></p>
	 * 
	 * @author Tim Knip
*/
public class ExportCollada{public static var DEFAULT_TEXTURE_DIR : String;/**
Default visuals scene id and name.
*/
public static var VISUAL_SCENE_NAME : String;/**
Number of fraction digits to use for floats.
*/
public static var FRACTION_DIGITS : int;/**
Boolean indicatin whether to flip faces.
*/
public static var REVERSE_WINDING : Boolean;private static var _numInstances : int;private static var _numMaterials : int;private static var _materialTargets : Dictionary;private static var _hasImages : Boolean;private static var _numImages : int;private static var _materialToImageId : Dictionary;/**
*
*/
public static function export (object:DisplayObject3D) : String;/**
* Exports the <color> element.
		 * 
		 * @param material
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportColor (material:MaterialObject3D = null, indent:int = 0) : String;/**
* Exports the <effect> elements.
		 * 
		 * @param object
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportEffects (object:DisplayObject3D, indent:int = 0) : String;/**
* Exports a <source> element with float data.
		 * 
		 * @param id
		 * @param values
		 * @param params
		 * @param indent
		 * 
		 * @return XML String
*/
private static function exportFloatSource (id:String, values:Array, params:Array, indent:int = 0) : String;/**
* Export all geometries and child-geometries for a specific DisplayObject3D
		 * 
		 * @param instance
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportGeometries (instance:DisplayObject3D, indent:int = 0) : String;/**
* Exports a mesh's geometry as a Collada <geometry> element.
		 * 
		 * @param mesh
		 * @param id
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportGeometry (mesh:TriangleMesh3D, id:String, indent:int = 0) : String;/**
* Exports the <image> elements.
		 * 
		 * @param object
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportImages (object:DisplayObject3D, indent:int = 0) : String;/**
* Exports the <material> elements.
		 * 
		 * @param object
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportMaterials (object:DisplayObject3D, indent:int = 0) : String;/**
* Exports a <matrix> element.
		 * 
		 * @param matrix
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportMatrix (matrix:Matrix3D, indent:int = 0) : String;/**
* Exports a <visual_scene> element.
		 * 
		 * @param object
		 * @param indent
		 * 
		 * @return XML string
*/
private static function exportVisualScene (object:DisplayObject3D, indent:int = 0) : String;/**
*
*/
private static function getInstanceName (instance:DisplayObject3D) : String;/**
*
*/
private static function prepareMaterials (object:DisplayObject3D) : void;/**
*
*/
private static function findMaterialName (find:MaterialObject3D, list:MaterialsList) : String;private static function printLine (str:String, indent:int = 0) : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\io\exporters\ExportFileFormat.as
package org.papervision3d.core.io.exporters{public class ExportFileFormat{public static const COLLADA : uint;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\log\AbstractPaperLogger.as
package org.papervision3d.core.log{import org.papervision3d.core.log.event.PaperLoggerEvent;/**
* @author Ralph Hauwert
*/
public class AbstractPaperLogger implements IPaperLogger{public function AbstractPaperLogger ();protected function onLogEvent (event:PaperLoggerEvent) : void;public function log (msg:String, object:Object = null, arg:Array = null) : void;public function info (msg:String, object:Object = null, arg:Array = null) : void;public function debug (msg:String, object:Object = null, arg:Array = null) : void;public function warning (msg:String, object:Object = null, arg:Array = null) : void;public function error (msg:String, object:Object = null, arg:Array = null) : void;public function fatal (msg:String, object:Object = null, arg:Array = null) : void;public function registerWithPaperLogger (paperLogger:PaperLogger) : void;public function unregisterFromPaperLogger (paperLogger:PaperLogger) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\log\IPaperLogger.as
package org.papervision3d.core.log{/**
* @author Ralph Hauwert
*/
public interface IPaperLogger{public function log (msg:String, object:Object = null, arguments:Array = null) : void;public function info (msg:String, object:Object = null, arguments:Array = null) : void;public function debug (msg:String, object:Object = null, arguments:Array = null) : void;public function warning (msg:String, object:Object = null, arguments:Array = null) : void;public function error (msg:String, object:Object = null, arguments:Array = null) : void;public function fatal (msg:String, object:Object = null, arguments:Array = null) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\log\LogLevel.as
package org.papervision3d.core.log{/**
* @author Ralph Hauwert
*/
public class LogLevel{public static const LOG : int;public static const INFO : int;public static const DEBUG : int;public static const WARNING : int;public static const ERROR : int;public static const FATAL : int;public function LogLevel ();}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\log\PaperLogger.as
package org.papervision3d.core.log{import flash.events.EventDispatcher;import org.papervision3d.core.log.event.PaperLoggerEvent;/**
* @author Ralph Hauwert
*/
public class PaperLogger extends EventDispatcher{private static var instance : PaperLogger;public var traceLogger : PaperTraceLogger;public function PaperLogger ();public function _log (msg:String, object:Object = null, ...arg) : void;public function _info (msg:String, object:Object = null, ...arg) : void;public function _debug (msg:String, object:Object = null, ...arg) : void;public function _error (msg:String, object:Object = null, ...arg) : void;public function _warning (msg:String, object:Object = null, ...arg) : void;public function registerLogger (logger:AbstractPaperLogger) : void;public function unregisterLogger (logger:AbstractPaperLogger) : void;public static function log (msg:String, object:Object = null, ...arg) : void;public static function warning (msg:String, object:Object = null, ...arg) : void;public static function info (msg:String, object:Object = null, ...arg) : void;public static function error (msg:String, object:Object = null, ...arg) : void;public static function debug (msg:String, object:Object = null, ...arg) : void;public static function getInstance () : PaperLogger;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\log\PaperLogVO.as
package org.papervision3d.core.log{/**
* @author Ralph Hauwert
*/
public class PaperLogVO{public var level : int;public var msg : String;public var object : Object;public var arg : Array;public function PaperLogVO (level:int, msg:String, object:Object, arg:Array);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\log\PaperTraceLogger.as
package org.papervision3d.core.log{public class PaperTraceLogger extends AbstractPaperLogger implements IPaperLogger{public function PaperTraceLogger ();public function log (msg:String, object:Object = null, arguments:Array = null) : void;public function info (msg:String, object:Object = null, arguments:Array = null) : void;public function debug (msg:String, object:Object = null, arguments:Array = null) : void;public function warning (msg:String, object:Object = null, arguments:Array = null) : void;public function error (msg:String, object:Object = null, arguments:Array = null) : void;public function fatal (msg:String, object:Object = null, arguments:Array = null) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\log\event\PaperLoggerEvent.as
package org.papervision3d.core.log.event{import flash.events.Event;import org.papervision3d.core.log.PaperLogVO;/**
* @author Ralph Hauwert
*/
public class PaperLoggerEvent extends Event{public static const TYPE_LOGEVENT : String;public var paperLogVO : PaperLogVO;public function PaperLoggerEvent (paperLogVO:PaperLogVO);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\material\AbstractLightShadeMaterial.as
package org.papervision3d.core.material{import flash.utils.Dictionary;import org.papervision3d.core.material.TriangleMaterial;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.core.render.material.IUpdateBeforeMaterial;import org.papervision3d.materials.utils.LightMatrix;import org.papervision3d.objects.DisplayObject3D;public class AbstractLightShadeMaterial extends TriangleMaterial implements ITriangleDrawer{public var lightMatrices : Dictionary;private var _light : LightObject3D;protected static var lightMatrix : Matrix3D;public function set light (light:LightObject3D) : Void;public function get light () : LightObject3D;public function AbstractLightShadeMaterial ();protected function init () : void;public function updateBeforeRender (renderSessionData:RenderSessionData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\material\AbstractSmoothShadeMaterial.as
package org.papervision3d.core.material{import flash.geom.Matrix;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.core.render.material.IUpdateBeforeMaterial;/**
* @Author Ralph Hauwert
*/
public class AbstractSmoothShadeMaterial extends AbstractLightShadeMaterial implements ITriangleDrawer{protected var transformMatrix : Matrix;protected var triMatrix : Matrix;public function AbstractSmoothShadeMaterial ();protected function init () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\material\TriangleMaterial.as
package org.papervision3d.core.material{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;/**
* @Author Ralph Hauwert
*/
public class TriangleMaterial extends MaterialObject3D implements ITriangleDrawer{public function TriangleMaterial ();public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;public function drawRT (rt:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\AxisAlignedBoundingBox.as
package org.papervision3d.core.math{import org.papervision3d.core.geom.renderables.Vertex3D;public class AxisAlignedBoundingBox{public var minX : Number;public var minY : Number;public var minZ : Number;public var maxX : Number;public var maxY : Number;public var maxZ : Number;protected var _vertices : Array;/**
* @author Ralph Hauwert/Alex Clarke
*/
public function AxisAlignedBoundingBox (minX:Number, minY:Number, minZ:Number, maxX:Number, maxY:Number, maxZ:Number);protected function createBoxVertices () : void;public function getBoxVertices () : Array;public function merge (bbox:AxisAlignedBoundingBox) : void;public static function createFromVertices (vertices:Array) : AxisAlignedBoundingBox;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\BoundingSphere.as
package org.papervision3d.core.math{import org.papervision3d.core.geom.renderables.Vertex3D;public class BoundingSphere{public var maxDistance : Number;public var radius : Number;/**
* @Author Ralph Hauwert
*/
public function BoundingSphere (maxDistance:Number);public static function getFromVertices (vertices:Array) : BoundingSphere;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\Matrix3D.as
package org.papervision3d.core.math{import org.papervision3d.Papervision3D;/**
* The Matrix3D class lets you create and manipulate 4x3 3D transformation matrices.
*/
public class Matrix3D{/**
* X O O O	 * O O O O	 * O O O O
*/
public var n11 : Number;/**
* O X O O	 * O O O O	 * O O O O
*/
public var n12 : Number;/**
* O O X O	 * O O O O	 * O O O O
*/
public var n13 : Number;/**
* O O O X	 * O O O O	 * O O O O
*/
public var n14 : Number;/**
* O O O O	 * X O O O	 * O O O O
*/
public var n21 : Number;/**
* O O O O	 * O X O O	 * O O O O
*/
public var n22 : Number;/**
* O O O O	 * O O X O	 * O O O O
*/
public var n23 : Number;/**
* O O O O	 * O O O X	 * O O O O
*/
public var n24 : Number;/**
* O O O O	 * O O O O	 * X O O O
*/
public var n31 : Number;/**
* O O O O	 * O O O O	 * O X O O
*/
public var n32 : Number;/**
* O O O O	 * O O O O	 * O O X O
*/
public var n33 : Number;/**
* O O O O	 * O O O O	 * O O O X
*/
public var n34 : Number;/**
* O O O O	 * O O O O	 * O O O O	 * X O O O
*/
public var n41 : Number;/**
* O O O O	 * O O O O	 * O O O O	 * O X O O
*/
public var n42 : Number;/**
* O O O O	 * O O O O	 * O O O O	 * O O X O
*/
public var n43 : Number;/**
* O O O O	 * O O O O	 * O O O O	 * O O O X
*/
public var n44 : Number;private static var temp : Matrix3D;private static var n3Di : Number3D;private static var n3Dj : Number3D;private static var n3Dk : Number3D;private static var toDEGREES : Number;private static var toRADIANS : Number;private static var _sin : Function;private static var _cos : Function;public static function get IDENTITY () : Matrix3D;public function get det () : Number;/**
* The Matrix3D constructor lets you create Matrix3D objects.	*	* @param	args	The values to populate the matrix with. Identity matrix is returned by default.
*/
public function Matrix3D (args:Array = null);public function reset (args:Array = null) : void;public function toString () : String;public function calculateMultiply (a:Matrix3D, b:Matrix3D) : void;public static function multiply (a:Matrix3D, b:Matrix3D) : Matrix3D;public function calculateMultiply3x3 (a:Matrix3D, b:Matrix3D) : void;public function calculateMultiply4x4 (a:Matrix3D, b:Matrix3D) : void;/**
*
*/
public function calculateSkewSymmetric (a:Number3D) : void;public static function multiply3x3 (a:Matrix3D, b:Matrix3D) : Matrix3D;public function calculateAdd (a:Matrix3D, b:Matrix3D) : void;public static function add (a:Matrix3D, b:Matrix3D) : Matrix3D;public function calculateInverse (m:Matrix3D) : void;public function calculateTranspose () : void;public static function inverse (m:Matrix3D) : Matrix3D;public function invert () : void;/**
public function get trace():Number	{		return this.n11 + this.n22 + this.n33 + 1;	}
*/
public function copy (m:Matrix3D) : Matrix3D;public function copy3x3 (m:Matrix3D) : Matrix3D;public static function clone (m:Matrix3D) : Matrix3D;public static function multiplyVector (m:Matrix3D, v:Number3D) : void;public static function multiplyVector3x3 (m:Matrix3D, v:Number3D) : void;public static function multiplyVector4x4 (m:Matrix3D, v:Number3D) : void;public static function rotateAxis (m:Matrix3D, v:Number3D) : void;/**
public static function matrix2eulerOLD( m:Matrix3D ):Number3D	{		var angle:Number3D = new Number3D();		var d :Number = -Math.asin( Math.max( -1, Math.min( 1, m.n13 ) ) ); // Calculate Y-axis angle		var c :Number =  Math.cos( d );		angle.y = d * toDEGREES;		var trX:Number, trY:Number;		if( Math.abs( c ) > 0.005 )  // Gimball lock?		{			trX =  m.n33 / c;  // No, so get X-axis angle			trY = -m.n23 / c;			angle.x = Math.atan2( trY, trX ) * toDEGREES;			trX =  m.n11 / c;  // Get Z-axis angle			trY = -m.n12 / c;			angle.z = Math.atan2( trY, trX ) * toDEGREES;		}		else  // Gimball lock has occurred		{			angle.x = 0;  // Set X-axis angle to zero			trX = m.n22;  // And calculate Z-axis angle			trY = m.n21;			angle.z = Math.atan2( trY, trX ) * toDEGREES;		}		// TODO: Clamp all angles to range		return angle;	}		public static function matrix2euler2( t:Matrix3D, rot:Number3D = null, scale:Number3D=null):Number3D	{		if(!rot) rot = Number3D.ZERO; 		// Normalize the local x, y and z axes to remove scaling.		n3Di.reset( t.n11, t.n21, t.n31 );		n3Dj.reset( t.n12, t.n22, t.n32 );		n3Dk.reset( t.n13, t.n23, t.n33 );		n3Di.normalize();		n3Dj.normalize();		n3Dk.normalize();		temp.reset([			n3Di.x, n3Dj.x, n3Dk.x, 0,			n3Di.y, n3Dj.y, n3Dk.y, 0,			n3Di.z, n3Dj.z, n3Dk.z, 0		]);		var m:Matrix3D = temp;	    // Extract the first angle, rot.x		rot.x = Math.atan2( m.n23, m.n33 ); // rot.x = Math<T>::atan2 (M[1][2], M[2][2]);			// Remove the rot.x rotation from M, so that the remaining		// rotation, N, is only around two axes, and gimbal lock		// cannot occur.		var rx:Matrix3D = Matrix3D.rotationX( -rot.x );		var n:Matrix3D = Matrix3D.multiply( rx, m );		// Extract the other two angles, rot.y and rot.z, from N.		var cy:Number = Math.sqrt( n.n11 * n.n11 + n.n21 * n.n21); // T cy = Math<T>::sqrt (N[0][0]*N[0][0] + N[0][1]*N[0][1]);		rot.y = Math.atan2( -n.n31, cy ); // rot.y = Math<T>::atan2 (-N[0][2], cy);		rot.z = Math.atan2( -n.n12, n.n11 ); //rot.z = Math<T>::atan2 (-
*/
public static function matrix2euler (m:Matrix3D, euler:Number3D = null, scale:Number3D = null) : Number3D;public static function euler2matrix (deg:Number3D) : Matrix3D;public static function rotationX (rad:Number) : Matrix3D;public static function rotationY (rad:Number) : Matrix3D;public static function rotationZ (rad:Number) : Matrix3D;public static function rotationMatrix (x:Number, y:Number, z:Number, rad:Number, targetmatrix:Matrix3D = null) : Matrix3D;public static function rotationMatrixWithReference (axis:Number3D, rad:Number, ref:Number3D) : Matrix3D;public static function translationMatrix (x:Number, y:Number, z:Number) : Matrix3D;public static function scaleMatrix (x:Number, y:Number, z:Number) : Matrix3D;public static function magnitudeQuaternion (q:Object) : Number;public static function normalizeQuaternion (q:Object) : Object;public static function axis2quaternion (x:Number, y:Number, z:Number, angle:Number) : Object;public static function euler2quaternion (ax:Number, ay:Number, az:Number, targetquat:Quaternion = null) : Quaternion;public static function quaternion2matrix (x:Number, y:Number, z:Number, w:Number, targetmatrix:Matrix3D = null) : Matrix3D;public static function multiplyQuaternion (a:Object, b:Object) : Object;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\Number2D.as
package org.papervision3d.core.math{import org.papervision3d.Papervision3D;/**
* PLUG-IN MEDIA 2D Vector Class, by Seb Lee-Delisle re-written for Papervision3D as Number2D. 	 *  	 * Version 0.1 10 Feb 2008
*/
public class Number2D{public static const RADTODEG : Number;public static const DEGTORAD : Number;public var x : Number;public var y : Number;public function get modulo () : Number;public function get moduloSquared () : Number;public function Number2D (x:Number = 0, y:Number = 0);public function toString () : String;public function clone () : Number2D;public function copyTo (v:Number2D) : void;public function copyFrom (v:Number2D) : void;public function normalise () : void;public function reverse () : void;public static function add (v:Number2D, w:Number2D) : Number2D;public static function subtract (v:Number2D, w:Number2D) : Number2D;public function plusEq (v:Number2D) : void;public function minusEq (v:Number2D) : void;public function divideEq (d:Number) : void;public function multiplyEq (d:Number) : void;public static function multiplyScalar (v:Number2D, n:Number) : Number2D;public static function dot (v:Number2D, w:Number2D) : Number;public function angle () : Number;public function rotate (angle:Number) : void;public function reset (x:Number = 0, y:Number = 0) : void;/**
* Super fast modulo(length, magnitude) comparisons.		 * 		 *
*/
public function isModuloLessThan (v:Number) : Boolean;public function isModuloGreaterThan (v:Number) : Boolean;public function isModuloEqualTo (v:Number) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\Number3D.as
package org.papervision3d.core.math{import org.papervision3d.Papervision3D;/**
* The Number3D class represents a value in a three-dimensional coordinate system.** Properties x, y and z represent the horizontal, vertical and z the depth axes respectively.*
*/
public class Number3D{/**
* The horizontal coordinate value.
*/
public var x : Number;/**
* The vertical coordinate value.
*/
public var y : Number;/**
* The depth coordinate value.
*/
public var z : Number;/**
* pre-made Number3D : used by various methods as a way to temporarily store Number3Ds.
*/
private static var temp : Number3D;public static var toDEGREES : Number;public static var toRADIANS : Number;/**
* Modulo
*/
public function get modulo () : Number;public function get moduloSquared () : Number;/**
* Returns a Number3D object with x, y and z properties set to zero.	*	* @return A Number3D object.
*/
public static function get ZERO () : Number3D;/**
* Creates a new Number3D object whose three-dimensional values are specified by the x, y and z parameters. If you call this constructor function without parameters, a Number3D with x, y and z properties set to zero is created.	*	* @param	x	The horizontal coordinate value. The default value is zero.	* @param	y	The vertical coordinate value. The default value is zero.	* @param	z	The depth coordinate value. The default value is zero.
*/
public function Number3D (x:Number = 0, y:Number = 0, z:Number = 0);/**
* Returns a new Number3D object that is a clone of the original instance with the same three-dimensional values.	*	* @return	A new Number3D instance with the same three-dimensional values as the original Number3D instance.
*/
public function clone () : Number3D;/**
* Copies the values of this Number3d to the passed Number3d.	 *
*/
public function copyTo (n:Number3D) : void;/**
* Copies the values of this Number3d to the passed Number3d.	 *
*/
public function copyFrom (n:Number3D) : void;/**
* Quick way to set the properties of the Number3D	 *
*/
public function reset (newx:Number = 0, newy:Number = 0, newz:Number = 0) : void;/**
* Add
*/
public static function add (v:Number3D, w:Number3D) : Number3D;/**
* Subtract.
*/
public static function sub (v:Number3D, w:Number3D) : Number3D;/**
* Dot product.
*/
public static function dot (v:Number3D, w:Number3D) : Number;/**
* Cross product. Now optionally takes a target Number3D to put the change into. So we're not constantly making new number3Ds. 	 * Maybe make a crossEq function?
*/
public static function cross (v:Number3D, w:Number3D, targetN:Number3D = null) : Number3D;/**
* Normalize.
*/
public function normalize () : void;/**
* Multiplies the vector by a number. The same as the *= operator
*/
public function multiplyEq (n:Number) : void;/**
* Adds the vector passed to this vector. The same as the += operator.
*/
public function plusEq (v:Number3D) : void;/**
* Subtracts the vector passed to this vector. The same as the -= operator.
*/
public function minusEq (v:Number3D) : void;/**
* Super fast modulo(length, magnitude) comparisons.	 * 	 *
*/
public function isModuloLessThan (v:Number) : Boolean;public function isModuloGreaterThan (v:Number) : Boolean;public function isModuloEqualTo (v:Number) : Boolean;/**
* Returns a string value representing the three-dimensional values in the specified Number3D object.	*	* @return	A string.
*/
public function toString () : String;/**
* 	 * 	 *
*/
public function rotateX (angle:Number) : void;public function rotateY (angle:Number) : void;public function rotateZ (angle:Number) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\NumberUV.as
package org.papervision3d.core.math{/**
* The NumberUV class represents a value in a texture UV coordinate system.
*
* Properties u and v represent the horizontal and vertical texture axes respectively.
*
*/
public class NumberUV{/**
* The horizontal coordinate value.
*/
public var u : Number;/**
* The vertical coordinate value.
*/
public var v : Number;/**
* Returns a NumberUV object with u and v properties set to zero.
	*
	* @return A NumberUV object.
*/
public static function get ZERO () : NumberUV;/**
* Creates a new NumberUV object whose coordinate values are specified by the u and v parameters. If you call this constructor function without parameters, a NumberUV with u and v properties set to zero is created.
	*
	* @param	u	The horizontal coordinate value. The default value is zero.
	* @param	v	The vertical coordinate value. The default value is zero.
*/
public function NumberUV (u:Number = 0, v:Number = 0);/**
* Returns a new NumberUV object that is a clone of the original instance with the same UV values.
	*
	* @return	A new NumberUV instance with the same UV values as the original NumberUV instance.
*/
public function clone () : NumberUV;/**
* Returns a string value representing the UV values in the specified NumberUV object.
	*
	* @return	A string.
*/
public function toString () : String;public static function weighted (a:NumberUV, b:NumberUV, aw:Number, bw:Number) : NumberUV;public static function median (a:NumberUV, b:NumberUV) : NumberUV;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\Plane3D.as
package org.papervision3d.core.math{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.util.ClassificationUtil;/**
* The Plane3D class represents a plane in 3D space.
	* 
	* @author Tim Knip
*/
public class Plane3D{private static var _yUP : Number3D;private static var _zUP : Number3D;/**
* The plane normal (A, B, C).
*/
public var normal : Number3D;/**
* D.
*/
public var d : Number;internal var eps : Number;protected static var flipPlane : Plane3D;/**
* Constructor.
		 *
		 * @param	normal		The plane normal.
		 * @param	ptOnPlane	A point on the plane.
*/
public function Plane3D (normal:Number3D = null, ptOnPlane:Number3D = null);/**
*
*/
public function clone () : Plane3D;public function isCoplanar (plane:Plane3D) : Boolean;public function isCoplanarOpposite (plane:Plane3D) : Boolean;public function getFlip () : Plane3D;public function getTempFlip () : Plane3D;public function getIntersectionLineNumbers (v0:Number3D, v1:Number3D) : Number3D;public function getIntersectionLine (v0:Vertex3D, v1:Vertex3D) : Vertex3D;/**
* Creates a plane from coefficients.
		 *
		 * @param	a
		 * @param	b
		 * @param	c
		 * @param	d
		 *
		 * @return	The created plane.
*/
public static function fromCoefficients (a:Number, b:Number, c:Number, d:Number) : Plane3D;/**
* Creates a plane from a normal and a point.
		 *
		 * @param	normal
		 * @param	point
		 *
		 * @return	The created plane.
*/
public static function fromNormalAndPoint (normal:*, point:*) : Plane3D;/**
* Creates a plane from three points.
		 *
		 * @param	p0	First point.
		 * @param	p1	Second point.
		 * @param	p2	Third point.
		 *
		 * @return	The created plane.
*/
public static function fromThreePoints (p0:*, p1:*, p2:*) : Plane3D;/**
* Get the closest point on the plane.
		 *
		 * @param	point		The point to 'project'.
		 * @param 	ptOnPlane	A known point on the plane.
*/
public function closestPointOnPlane (point:Number3D, ptOnPlane:Number3D) : Number3D;/**
* distance of point to plane.
		 * 
		 * @param	v
		 * @return
*/
public function distance (pt:*) : Number;/**
* distance of vertex to plane, optimized.
		 * 
		 * @param	v
		 * @return
*/
public function vertDistance (pt:Vertex3D) : Number;/**
* normalize.
		 * 
		 * @return
*/
public function normalize () : void;/**
* Sets this plane from ABCD coefficients.
		 *
		 * @param	a
		 * @param	b
		 * @param	c
		 * @param	d
*/
public function setCoefficients (a:Number, b:Number, c:Number, d:Number) : void;/**
* Sets this plane from a normal and a point.
		 *
		 * @param	normal
		 * @param	pt
*/
public function setNormalAndPoint (normal:Number3D, pt:Number3D) : void;/**
* Sets this plane from three points.
		 *
		 * @param	p0
		 * @param	p1
		 * @param	p2
*/
public function setThreePoints (p0:Number3D, p1:Number3D, p2:Number3D) : void;/**
* Gets the side a vertex is on.
*/
public function pointOnSide (num:Number3D) : int;/**
* Projects points onto this plane. 
		 * <p>Passed points should be in the XY-plane. If the points have Z=0 then the points are
		 * projected exactly on the plane. When however Z is greater then zero, the points are
		 * moved 'out of the plane' by a distance Z. Negative values for Z move the points 'into the plane'.</p>
		 *
		 * @param	points	Array of points (any object with x, y, z props).
		 * @param	origin	Where to move the points.
*/
public function projectPoints (points:Array, origin:Number3D = null) : void;public function toString () : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\Quaternion.as
package org.papervision3d.core.math{/**
* @author Tim Knip
*/
public class Quaternion{private var _matrix : Matrix3D;public static const EPSILON : Number;public static const DEGTORAD : Number;public static const RADTODEG : Number;/**

*/
public var x : Number;/**

*/
public var y : Number;/**

*/
public var z : Number;/**

*/
public var w : Number;/**
* Modulo.		 * 		 * @param	a		 * @return
*/
public function get modulo () : Number;/**
* Gets the matrix representation of this Quaternion.		 * 		 * @return matrix. @see org.papervision3d.core.Matrix3D
*/
public function get matrix () : Matrix3D;/**
* constructor.		 * 		 * @param	x		 * @param	y		 * @param	z		 * @param	w		 * @return
*/
public function Quaternion (x:Number = 0, y:Number = 0, z:Number = 0, w:Number = 1);/**
* Clone.		 *
*/
public function clone () : Quaternion;/**
* Multiply.		 * 		 * @param	a		 * @param	b
*/
public function calculateMultiply (a:Quaternion, b:Quaternion) : void;/**
* Creates a Quaternion from a axis and a angle.		 * 		 * @param	x 	X-axis		 * @param	y 	Y-axis		 * @param	z 	Z-axis		 * @param	angle	angle in radians.		 * 		 * @return
*/
public function setFromAxisAngle (x:Number, y:Number, z:Number, angle:Number) : void;/**
* Sets this Quaternion from Euler angles.		 * 		 * @param	ax	X-angle in radians.		 * @param	ay	Y-angle in radians.		 * @param	az	Z-angle in radians.
*/
public function setFromEuler (ax:Number, ay:Number, az:Number, useDegrees:Boolean = false) : void;/**
* Conjugate.		 * 		 * @param	a		 * @return
*/
public static function conjugate (a:Quaternion) : Quaternion;/**
* Creates a Quaternion from a axis and a angle.		 * 		 * @param	x 	X-axis		 * @param	y 	Y-axis		 * @param	z 	Z-axis		 * @param	angle	angle in radians.		 * 		 * @return
*/
public static function createFromAxisAngle (x:Number, y:Number, z:Number, angle:Number) : Quaternion;/**
* Creates a Quaternion from Euler angles.		 * 		 * @param	ax	X-angle in radians.		 * @param	ay	Y-angle in radians.		 * @param	az	Z-angle in radians.		 * 		 * @return
*/
public static function createFromEuler (ax:Number, ay:Number, az:Number, useDegrees:Boolean = false) : Quaternion;/**
* Creates a Quaternion from a matrix.		 * 		 * @param	matrix	a matrix. @see org.papervision3d.core.Matrix3D		 * 		 * @return	the created Quaternion
*/
public static function createFromMatrix (matrix:Matrix3D) : Quaternion;/**
* Creates a Quaternion from a orthonormal matrix.		 * 		 * @param	m	a orthonormal matrix. @see org.papervision3d.core.Matrix3D		 * 		 * @return  the created Quaternion
*/
public static function createFromOrthoMatrix (m:Matrix3D) : Quaternion;/**
* Dot product.		 * 		 * @param	a		 * @param	b		 * 		 * @return
*/
public static function dot (a:Quaternion, b:Quaternion) : Number;/**
* Multiply.		 * 		 * @param	a		 * @param	b		 * @return
*/
public static function multiply (a:Quaternion, b:Quaternion) : Quaternion;/**
* Multiply by another Quaternion.		 * 		 * @param	b	The Quaternion to multiply by.
*/
public function mult (b:Quaternion) : void;public function toString () : String;/**
* Normalize.		 * 		 * @param	a		 * 		 * @return
*/
public function normalize () : void;/**
* SLERP (Spherical Linear intERPolation). @author Trevor Burton		 * 		 * @param	qa		start quaternion		 * @param	qb		end quaternion		 * @param	alpha	a value between 0 and 1		 * 		 * @return the interpolated quaternion.
*/
public static function slerp (qa:Quaternion, qb:Quaternion, alpha:Number) : Quaternion;/**
* SLERP (Spherical Linear intERPolation).		 * 		 * @param	qa		start quaternion		 * @param	qb		end quaternion		 * @param	alpha	a value between 0 and 1		 * 		 * @return the interpolated quaternion.
*/
public static function slerpOld (qa:Quaternion, qb:Quaternion, alpha:Number) : Quaternion;public function toEuler () : Number3D;public static function sub (a:Quaternion, b:Quaternion) : Quaternion;public static function add (a:Quaternion, b:Quaternion) : Quaternion;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\Ray3D.as
package org.papervision3d.core.math{import org.papervision3d.core.math.Number3D;public class Ray3D{public var x : Number;public var y : Number;public var z : Number;public var dx : Number;public var dy : Number;public var dz : Number;public function get o () : Number3D;public function get d () : Number3D;public function Ray3D (x:Number = 0, y:Number = 0, z:Number = 0, dx:Number = 0, dy:Number = 0, dz:Number = 0);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\Sphere3D.as
package org.papervision3d.core.math{import org.papervision3d.core.math.Number3D;public class Sphere3D{public var x : Number;public var y : Number;public var z : Number;public var radius : Number;public function get o () : Number3D;public function get r2 () : Number;public function Sphere3D (r:Number = 100, x:Number = 0, y:Number = 0, z:Number = 0);public function intersectRay (ray:Ray3D) : Number;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\util\ClassificationUtil.as
package org.papervision3d.core.math.util{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.Plane3D;public class ClassificationUtil{public static const FRONT : uint;public static const BACK : uint;public static const COINCIDING : uint;public static const STRADDLE : uint;protected static var point : Vertex3D;public function ClassificationUtil ();public static function classifyPoint (point:Vertex3D, plane:Plane3D, e:Number = 0.01) : uint;public static function classifyPoints (points:Array, plane:Plane3D, e:Number = 0.01) : uint;public static function classifyTriangle (triangle:Triangle3D, plane:Plane3D, e:Number = 0.01) : uint;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\util\FastRectangleTools.as
package org.papervision3d.core.math.util{import flash.geom.Rectangle;import org.papervision3d.core.math.Number2D;import org.papervision3d.core.math.Number3D;/**
* @author Seb Lee-Delisle	 * 	 * Some handy rectangle tools that are faster than the built in Rectangle methods. 	 *
*/
public class FastRectangleTools{/**
* 		 * in my tests runs 1/3 faster the Rectangle.intersects		 * Rectangle.intersects() Test: 71.4499		 * Fast intersect Test: 54.199		 * 		 * @Author Seb Lee-Delisle		 * 		 * @param	rect1 		 * @param	rect2  		 * @return  true if the rectangles intersect.
*/
public static function intersects (rect1:Rectangle, rect2:Rectangle) : Boolean;/**
* 		 * benchmarks compared to Rectangle.intersection : 		 * Rectangle.intersects() Test			: 146.89999999999998		 * this function (without targetrect)  	: 133.45		 * this function (with targetrect)  	    : 72.55 		 * @Author Seb Lee-Delisle		 * 		 * @param	rect1 		 * @param	rect2  		 * @param	targetrect  		 * @return  a rectangle representing the intersection of the two source rectangles.
*/
public static function intersection (rect1:Rectangle, rect2:Rectangle, targetrect:Rectangle = null) : Rectangle;/**
* 		 * Returns a rectangle defining the bounds of a rotated rectangle. 		 * @Author Seb Lee-Delisle		 * 		 * @param	rect 		 * @param	angle		 * @param	targetrect  		 * @return  a rectangle representing the bounds of the source rectangle, rotated at the angle given.
*/
public static function getRotatedBounds (rect:Rectangle, angle:Number, targetrect:Rectangle = null) : Rectangle;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\util\GLU.as
package org.papervision3d.core.math.util{public class GLU{public static function makeIdentity (m:Array) : void;public static function multMatrices (a:Array, b:Array, r:Array) : void;public static function multMatrixVec (matrix:Array, a:Array, out:Array) : void;public static function invertMatrix (src:Array, inverse:Array) : Boolean;public static function ortho (m:Array, left:Number, right:Number, top:Number, bottom:Number, zNear:Number, zFar:Number) : Boolean;public static function perspective (m:Array, fovy:Number, aspect:Number, zNear:Number, zFar:Number) : Boolean;public static function scale (m:Array, sx:Number, sy:Number, sz:Number) : void;public static function unProject (winx:Number, winy:Number, winz:Number, modelMatrix:Array, projMatrix:Array, viewport:Array, out:Array) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\util\InterpolationUtil.as
package org.papervision3d.core.math.util{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;public class InterpolationUtil{public static function interpolatePoint (a:Vertex3D, b:Vertex3D, alpha:Number) : Vertex3D;public static function interpolatePointTo (a:Vertex3D, b:Vertex3D, alpha:Number, dst:Vertex3D) : void;public static function interpolateUV (a:NumberUV, b:NumberUV, alpha:Number) : NumberUV;public static function interpolateUVTo (a:NumberUV, b:NumberUV, alpha:Number, dst:NumberUV) : NumberUV;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\util\Intersection.as
package org.papervision3d.core.math.util{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.Plane3D;public class Intersection{public static const NONE : int;public static const INTERSECTION : int;public static const PARALLEL : int;public var point : Number3D;public var vert : Vertex3D;public var alpha : Number;public var status : int;public function Intersection (point:Number3D = null, vert:Vertex3D = null);public static function linePlane (pA:Vertex3D, pB:Vertex3D, plane:Plane3D, e:Number = 0.01, dst:Intersection = null) : Intersection;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\math\util\TriangleUtil.as
package org.papervision3d.core.math.util{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.math.Plane3D;public class TriangleUtil{/**
* Clips a triangle to a plane.
		 * 
		 * @param	tri		Triangle to be clipped.
		 * @param	plane	Plane to clip to.
		 * @param	e	Epsilon
*/
public static function clipTriangleWithPlane (tri:Triangle3D, plane:Plane3D, e:Number = 0.01) : Array;public static function clipTriangleWithPlaneTris (tri:Triangle3D, plane:Plane3D, e:Number = 0.01, t1:Triangle3D = null, t2:Triangle3D = null, depth:Number = 0) : Array;public static function clipSplitTriangleWithPlane (triangle:Triangle3D, plane:Plane3D, e:Number = 0.01) : Array;public static function splitTriangleWithPlane (triangle:Triangle3D, plane:Plane3D, e:Number = 0.01) : Array;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\ns\pv3dview.as
package org.papervision3d.core.ns{}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\proto\CameraObject3D.as
package org.papervision3d.core.proto{import flash.geom.Rectangle;import org.papervision3d.Papervision3D;import org.papervision3d.core.culling.IObjectCuller;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.util.GLU;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;/**
* The CameraObject3D class is the base class for all the cameras that can be placed in a scene.	* <p/>	* A camera defines the view from which a scene will be rendered. Different camera settings would present a scene from different points of view.	* <p/>	* 3D cameras simulate still-image, motion picture, or video cameras of the real world. When rendering, the scene is drawn as if you were looking through the camera lens.
*/
public class CameraObject3D extends DisplayObject3D{/**
* This value specifies the scale at which the 3D objects are rendered. Higher values magnify the scene, compressing distance. Use it in conjunction with focus.
*/
public var zoom : Number;/**
* This value is a positive number representing the distance of the observer from the front clipping plane, which is the closest any object can be to the camera. Use it in conjunction with zoom.		* <p/>		* Higher focus values tend to magnify distance between objects while allowing greater depth of field, as if the camera had a wider lenses. One result of using a wide angle lens in proximity to the subject is an apparent perspective distortion: parallel lines may appear to converge and with a fisheye lens, straight edges will appear to bend.		* <p/>		* Different lenses generally require a different camera to subject distance to preserve the size of a subject. Changing the angle of view can indirectly distort perspective, modifying the apparent relative size of the subject and foreground.
*/
public var focus : Number;/**
* A Boolean value that determines whether the 3D objects are z-depth sorted between themselves when rendering.
*/
public var sort : Boolean;/**
*
*/
public var eye : Matrix3D;/**
*
*/
public var viewport : Rectangle;/**
*
*/
public var culler : IObjectCuller;/**
*
*/
public var yUP : Boolean;/**
* The default position for new cameras.
*/
public static var DEFAULT_POS : Number3D;/**
* The default UP vector for new cameras.
*/
public static var DEFAULT_UP : Number3D;/**
* The default viewport for new cameras.
*/
public static var DEFAULT_VIEWPORT : Rectangle;private static var _flipY : Matrix3D;protected var _useCulling : Boolean;protected var _useProjectionMatrix : Boolean;protected var _ortho : Boolean;protected var _orthoScale : Number;protected var _orthoScaleMatrix : Matrix3D;protected var _target : DisplayObject3D;protected var _far : Number;/**
* Sets the vertical Field Of View in degrees.		 * 		 * @param	degrees
*/
public function set fov (degrees:Number) : Void;/**
* Gets the vertical Field Of View in degrees.
*/
public function get fov () : Number;/**
* Gets the distance to the far plane.
*/
public function get far () : Number;/**
* Sets the distance to the far plane.		 * 		 * @param	value
*/
public function set far (value:Number) : Void;/**
* Gets the distance to the near plane (note that this simply is an alias for #focus).
*/
public function get near () : Number;/**
* Sets the distance to the near plane (note that this is simply an alias for #focus).		 * 		 * @param	value
*/
public function set near (value:Number) : Void;/**
* Gets the target for this camera, if any.		 * 		 * @return DisplayObject3D
*/
public function get target () : DisplayObject3D;/**
* Sets the target for this camera.		 * 		 * @param	object	A DisplayObject3D
*/
public function set target (object:DisplayObject3D) : Void;/**
* Whether this camera uses culling.		 * 		 * @return Boolean
*/
public function get useCulling () : Boolean;/**
* Whether this camera uses culling.
*/
public function set useCulling (value:Boolean) : Void;/**
* Whether this camera uses a projection matrix.		 * 		 * @return Boolean
*/
public function get useProjectionMatrix () : Boolean;/**
* Whether this camera uses a projection matrix.
*/
public function set useProjectionMatrix (value:Boolean) : Void;/**
* Whether the camera uses orthographic projection.
*/
public function get ortho () : Boolean;/**
* Whether the camera uses orthographic projection.
*/
public function set ortho (value:Boolean) : Void;/**
* The scale of projection when in orthographic mode.
*/
public function get orthoScale () : Number;/**
* The scale of projection when in orthographic mode.
*/
public function set orthoScale (value:Number) : Void;/**
* The CameraObject3D constructor lets you create cameras for setting up the view from which a scene will be rendered.		*		* @param	focus		This value is a positive number representing the distance of the observer from the front clipping plane, which is the closest any object can be to the camera. Use it in conjunction with zoom.		* <p/>		* @param	zoom		This value specifies the scale at which the 3D objects are rendered. Higher values magnify the scene, compressing distance. Use it in conjunction with focus.		* <p/>
*/
public function CameraObject3D (focus:Number = 500, zoom:Number = 3);/**
* Lookat.		 * 		 * @param targetObject		 * @param upAxis
*/
public function lookAt (targetObject:DisplayObject3D, upAxis:Number3D = null) : void;/**
* Orbits the camera around the specified target. If no target is specified the 		 * camera's #target property is used. If this camera's #target property equals null		 * the camera orbits the origin (0, 0, 0).		 * 		 * @param	pitch	Rotation around X=axis (looking up or down).		 * @param	yaw		Rotation around Y-axis (looking left or right).		 * @param	useDegrees 	Whether to use degrees for pitch and yaw (defaults to 'true').		 * @param	target	An optional target to orbit around.
*/
public function orbit (pitch:Number, yaw:Number, useDegrees:Boolean = true, target:DisplayObject3D = null) : void;/**
* Projects vertices.		 * 		 * @param	object		 * @param	renderSessionData
*/
public function projectVertices (vertices:Array, object:DisplayObject3D, renderSessionData:RenderSessionData) : Number;public function projectFaces (faces:Array, object:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* [internal-use] Transforms world coordinates into camera space.
*/
public function transformView (transform:Matrix3D = null) : void;/**
* Rotate the camera in its vertical plane.		* <p/>		* Tilting the camera results in a motion similar to someone nodding their head "yes".		*		* @param	angle	Angle to tilt the camera.
*/
public function tilt (angle:Number) : void;/**
* Rotate the camera in its horizontal plane.		* <p/>		* Panning the camera results in a motion similar to someone shaking their head "no".		*		* @param	angle	Angle to pan the camera.
*/
public function pan (angle:Number) : void;/**
* Unproject.		 * 		 * @param	mX		 * @param	mY
*/
public function unproject (mX:Number, mY:Number, mZ:Number = 0) : Number3D;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\proto\DisplayObjectContainer3D.as
package org.papervision3d.core.proto{import flash.events.EventDispatcher;import flash.utils.Dictionary;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.objects.DisplayObject3D;/**
* The DisplayObjectContainer3D class is the base class for all objects that can serve as DisplayObject3D containers.	* <p/>	* Each DisplayObjectContainer3D object has its own child list.
*/
public class DisplayObjectContainer3D extends EventDispatcher{/**
* [read-only] [read-only] The scene, which is the top-most displayObjectContainer3D in the tree structure.
*/
public var root : DisplayObjectContainer3D;/**
* [internal-use] Names indexed by children.
*/
protected var _children : Dictionary;/**
* [internal-use] Children indexed by name.
*/
protected var _childrenByName : Object;private var _childrenTotal : int;/**
* Returns the number of children of this object.
*/
public function get numChildren () : int;/**
* Returns the children object.
*/
public function get children () : Object;/**
* Creates a new DisplayObjectContainer3D object.
*/
public function DisplayObjectContainer3D ();/**
* Adds a child DisplayObject3D instance to this DisplayObjectContainer instance.		*		* [TODO: If you add a child object that already has a different display object container as a parent, the object is removed from the child list of the other display object container.]		*		* @param	child	The DisplayObject3D instance to add as a child of this DisplayObjectContainer3D instance.		* @param	name	An optional name of the child to add or create. If no name is provided, the child name will be used.		* @return	The DisplayObject3D instance that you have added or created.
*/
public function addChild (child:DisplayObject3D, name:String = null) : DisplayObject3D;/**
* Adds all the children of a DisplayObject3D instance to this DisplayObjectContainer instance.		*		* @param	child	The DisplayObjectContainer3D instance that contains the children to add.		* @return	The DisplayObject3D instance that you have added or created.
*/
public function addChildren (parent:DisplayObject3D) : DisplayObjectContainer3D;/**
* @public		* Added from Bug #10 by John Grden 8/22/2007
*/
public function removeChild (child:DisplayObject3D) : DisplayObject3D;/**
* Returns the child display object that exists with the specified name.		* </p>		* If more that one child display object has the specified name, the method returns the first object in the child list.		* </p>		* @param	name	The name of the child to return.* 		* @return	The child display object with the specified name.
*/
public function getChildByName (name:String, recursive:Boolean = false) : DisplayObject3D;/**
* Removes the child DisplayObject3D instance that exists with the specified name, from the child list of the DisplayObjectContainer3D instance.		* </p>		* If more that one child display object has the specified name, the method removes the first object in the child list.		* </p>		* [TODO: The parent property of the removed child is set to null, and the object is garbage collected if no other references to the child exist.]		* </p>		* The garbage collector is the process by which Flash Player reallocates unused memory space. When a variable or object is no longer actively referenced or stored somewhere, the garbage collector sweeps through and wipes out the memory space it used to occupy if no other references to it exist.		* </p>		* @param	name	The name of the child to remove.		* @return	The DisplayObject3D instance that was removed.
*/
public function removeChildByName (name:String) : DisplayObject3D;/**
* Returns a string value with the list of objects.		*		* @return	A string.
*/
public function toString () : String;/**
* Returns a string value with the list of objects.		*		* @return	A string.
*/
public function childrenList () : String;/**
* Recursively finds a child by its name.		 * 		 * @param	name		 * @param	parent		 * 		 * @return 	The found child.
*/
private function findChildByName (name:String, parent:DisplayObject3D = null) : DisplayObject3D;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\proto\GeometryObject3D.as
package org.papervision3d.core.proto{import flash.events.EventDispatcher;import flash.utils.Dictionary;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.AxisAlignedBoundingBox;import org.papervision3d.core.math.BoundingSphere;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.objects.DisplayObject3D;/**
* The GeometryObject3D class contains the mesh definition of an object.
*/
public class GeometryObject3D extends EventDispatcher{protected var _boundingSphere : BoundingSphere;protected var _boundingSphereDirty : Boolean;protected var _aabb : AxisAlignedBoundingBox;protected var _aabbDirty : Boolean;private var _numInstances : uint;/**
*
*/
public var dirty : Boolean;/**
* An array of Face3D objects for the faces of the mesh.
*/
public var faces : Array;/**
* An array of vertices.
*/
public var vertices : Array;public var _ready : Boolean;public function set ready (b:Boolean) : Void;public function get ready () : Boolean;/**
* Radius square of the mesh bounding sphere
*/
public function get boundingSphere () : BoundingSphere;/**
* Returns an axis aligned bounding box, not world oriented.		 * 		 * @Author Ralph Hauwert - Added as an initial test.
*/
public function get aabb () : AxisAlignedBoundingBox;public function GeometryObject3D ();public function transformVertices (transformation:Matrix3D) : void;private function createVertexNormals () : void;/**
* Clones this object.		 * 		 * @param	parent		 * 		 * @return	The cloned GeometryObject3D.
*/
public function clone (parent:DisplayObject3D = null) : GeometryObject3D;/**
* Flips the winding of faces.
*/
public function flipFaces () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\proto\LightObject3D.as
package org.papervision3d.core.proto{import org.papervision3d.core.math.Matrix3D;import org.papervision3d.materials.WireframeMaterial;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.objects.primitives.Sphere;public class LightObject3D extends DisplayObject3D{public var lightMatrix : Matrix3D;/**
* A boolean value indicating whether to flip the light direction. Hack needed by DAE. 
		 * NOTE:
*/
public var flipped : Boolean;private var _showLight : Boolean;private var displaySphere : Sphere;public function set showLight (show:Boolean) : Void;public function get showLight () : Boolean;public function LightObject3D (showLight:Boolean = false, flipped:Boolean = false);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\proto\MaterialObject3D.as
package org.papervision3d.core.proto{import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.core.render.material.MaterialManager;import org.papervision3d.materials.WireframeMaterial;import org.papervision3d.objects.DisplayObject3D;import flash.display.BitmapData;import flash.display.Graphics;import flash.events.EventDispatcher;import flash.geom.Matrix;import flash.utils.Dictionary;/**
* The MaterialObject3D class is the base class for all materials.	* <p/>	* Materials collects data about how objects appear when rendered.	* <p/>	* A material is data that you assign to objects or faces, so that they appear a certain way when rendered. Materials affect the line and fill colors.	* <p/>	* Materials create greater realism in a scene. A material describes how an object reflects or transmits light.	* <p/>	* You assign materials to individual objects or a selection of faces; a single object can contain different materials.	* <p/>	* MaterialObject3D is an abstract base class; therefore, you cannot call MaterialObject3D directly.
*/
public class MaterialObject3D extends EventDispatcher implements ITriangleDrawer{private static var _totalMaterialObjects : Number;/**
* A transparent or opaque BitmapData texture.
*/
public var bitmap : BitmapData;/**
* A Boolean value that determines whether the BitmapData texture is smoothed when rendered.
*/
public var smooth : Boolean;/**
* A Boolean value that determines whether the texture is tiled when rendered. Defaults to false.
*/
public var tiled : Boolean;/**
* A Boolean value that determines whether the texture is cached, i.e. not updated before being rendered. Defaults to false.
*/
public var baked : Boolean;/**
* A RGB color value to draw the faces outline.
*/
public var lineColor : Number;/**
* An 8-bit alpha value for the faces outline. If zero, no outline is drawn.
*/
public var lineAlpha : Number;/**
* An value for the thickness of the faces line.
*/
public var lineThickness : Number;/**
* A RGB color value to fill the faces with. Only used if no texture is provided.
*/
public var fillColor : Number;/**
* An 8-bit alpha value fill the faces with. If this value is zero and no texture is provided or is undefined, a fill is not created.
*/
public var fillAlpha : Number;/**
* A Boolean value that indicates whether the faces are single sided. It has preference over doubleSided.
*/
public var oneSide : Boolean;/**
* A Boolean value that indicates whether the faces are invisible (not drawn).
*/
public var invisible : Boolean;/**
* A Boolean value that indicates whether the face is flipped. Only used if doubleSided or not singeSided.
*/
public var opposite : Boolean;/**
* Color used for DEFAULT material.
*/
public static var DEFAULT_COLOR : int;/**
* Color used for DEBUG material.
*/
public static var DEBUG_COLOR : int;/**
* The name of the material.
*/
public var name : String;/**
* [internal-use] [read-only] Unique id of this instance.
*/
public var id : Number;/**
* Internal use
*/
public var maxU : Number;/**
* Internal use
*/
public var maxV : Number;/**
* Holds the original size of the bitmap before it was resized by Automip mapping
*/
public var widthOffset : Number;/**
* Holds the original size of the bitmap before it was resized by Automip mapping
*/
public var heightOffset : Number;/**
* Defines if this material will be interactive
*/
public var interactive : Boolean;/**
* Inventory of registered objects
*/
protected var objects : Dictionary;/**
* Returns a MaterialObject3D object with the default magenta wireframe values.		*		* @return A MaterialObject3D object.
*/
public static function get DEFAULT () : MaterialObject3D;public static function get DEBUG () : MaterialObject3D;/**
* A Boolean value that indicates whether the faces are double sided.
*/
public function get doubleSided () : Boolean;public function set doubleSided (double:Boolean) : Void;/**
* Creates a new MaterialObject3D object.		*
*/
public function MaterialObject3D ();/**
* Draws the triangle to screen.
*/
public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;public function drawRT (rt:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData) : void;/**
* Updates the BitmapData bitmap from the given texture.		*		* Draws the current MovieClip image onto bitmap.
*/
public function updateBitmap () : void;/**
* Copies the properties of a material.		*		* @param	material	Material to copy from.
*/
public function copy (material:MaterialObject3D) : void;/**
* Creates a copy of the material.		*		* @return	A newly created material that contains the same properties.
*/
public function clone () : MaterialObject3D;/**
* Registers the <code>DisplayObject3D</code>
*/
public function registerObject (displayObject3D:DisplayObject3D) : void;public function unregisterObject (displayObject3D:DisplayObject3D) : void;public function destroy () : void;/**
* Returns a string value representing the material properties.		*		* @return	A string.
*/
public function toString () : String;/**
* Returns a list of <code>DisplayObject3D</code> objects registered with the material.
*/
public function getObjectList () : Dictionary;public function isUpdateable () : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\proto\SceneObject3D.as
package org.papervision3d.core.proto{import org.papervision3d.Papervision3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.materials.utils.MaterialsList;import org.papervision3d.objects.DisplayObject3D;/**
* The SceneObject3D class is the base class for all scenes.	* <p/>	* A scene is the place where objects are placed, it contains the 3D environment.	* <p/>	* The scene manages all objects rendered in Papervision3D. It extends the DisplayObjectContainer3D class to arrange the display objects.	* <p/>	* SceneObject3D is an abstract base class; therefore, you cannot call SceneObject3D directly.
*/
public class SceneObject3D extends DisplayObjectContainer3D{/**
* Contains a list of DisplayObject3D objects in the scene.
*/
public var objects : Array;/**
* It contains a list of materials in the scene.
*/
public var materials : MaterialsList;/**
* The SceneObject3D class lets you create scene classes.		*		* @param	container	The Sprite that you draw into when rendering. If not defined, each object must have it's own private container.
*/
public function SceneObject3D ();/**
* Adds a child DisplayObject3D instance to the scene.		*		* If you add a GeometryObject3D symbol, a new DisplayObject3D instance is created.		*		* [TODO: If you add a child object that already has a different display object container as a parent, the object is removed from the child list of the other display object container.]		*		* @param	child	The GeometryObject3D symbol or DisplayObject3D instance to add as a child of the scene.		* @param	name	An optional name of the child to add or create. If no name is provided, the child name will be used.		* @return	The DisplayObject3D instance that you have added or created.
*/
public function addChild (child:DisplayObject3D, name:String = null) : DisplayObject3D;/**
* Removes the specified child DisplayObject3D instance from the child and object list of the scene.		* </p>		* [TODO: The parent property of the removed child is set to null, and the object is garbage collected if no other references to the child exist.]		* </p>		* The garbage collector is the process by which Flash Player reallocates unused memory space. When a variable or object is no longer actively referenced or stored somewhere, the garbage collector sweeps through and wipes out the memory space it used to occupy if no other references to it exist.		* </p>		* @param	child	The DisplayObject3D instance to remove.		* @return	The DisplayObject3D instance that you pass in the child parameter.
*/
public function removeChild (child:DisplayObject3D) : DisplayObject3D;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\AbstractRenderEngine.as
package org.papervision3d.core.render{import flash.events.EventDispatcher;import flash.events.IEventDispatcher;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.proto.SceneObject3D;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.RenderStatistics;import org.papervision3d.view.Viewport3D;public class AbstractRenderEngine extends EventDispatcher implements IRenderEngine{public function AbstractRenderEngine (target:IEventDispatcher = null);public function renderScene (scene:SceneObject3D, camera:CameraObject3D, viewPort:Viewport3D) : RenderStatistics;public function addToRenderList (renderCommand:RenderableListItem) : int;public function removeFromRenderList (renderCommand:IRenderListItem) : int;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\IRenderEngine.as
package org.papervision3d.core.render{import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.proto.SceneObject3D;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.RenderStatistics;import org.papervision3d.view.Viewport3D;/**
* @Author Ralph Hauwert
*/
public interface IRenderEngine{public function renderScene (scene:SceneObject3D, camera:CameraObject3D, viewPort:Viewport3D) : RenderStatistics;public function addToRenderList (renderCommand:RenderableListItem) : int;public function removeFromRenderList (renderCommand:IRenderListItem) : int;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\AbstractRenderListItem.as
package org.papervision3d.core.render.command{import flash.display.Graphics;import org.papervision3d.core.render.data.RenderSessionData;/**
* @Author Ralph Hauwert
*/
public class AbstractRenderListItem implements IRenderListItem{public var screenZ : Number;public function AbstractRenderListItem ();public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\IRenderListItem.as
package org.papervision3d.core.render.command{import flash.display.Graphics;import org.papervision3d.core.render.data.RenderSessionData;/**
* @Author Ralph Hauwert
*/
public interface IRenderListItem{public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\RenderableListItem.as
package org.papervision3d.core.render.command{import flash.geom.Point;import org.papervision3d.core.geom.renderables.AbstractRenderable;import org.papervision3d.core.render.data.QuadTreeNode;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.objects.DisplayObject3D;/**
* @Author Ralph Hauwert
*/
public class RenderableListItem extends AbstractRenderListItem{public var renderable : Class;public var renderableInstance : AbstractRenderable;public var instance : DisplayObject3D;public var area : Number;public var minX : Number;/**
* Indicates the maximum x value of the drawing primitive.
*/
public var maxX : Number;/**
* Indicates the minimum y value of the drawing primitive.
*/
public var minY : Number;/**
* Indicates the maximum y value of the drawing primitive.
*/
public var maxY : Number;public var minZ : Number;public var maxZ : Number;/**
* Reference to the last quadrant used by the drawing primitive. Used in <code>QuadTree</code>
*/
public var quadrant : QuadTreeNode;public function getZ (x:Number, y:Number, focus:Number) : Number;public function RenderableListItem ();public function hitTestPoint2D (point:Point, renderHitData:RenderHitData) : RenderHitData;public function update () : void;public function quarter (focus:Number) : Array;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\RenderFog.as
package org.papervision3d.core.render.command{import org.papervision3d.core.geom.renderables.AbstractRenderable;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.special.FogMaterial;import org.papervision3d.objects.DisplayObject3D;import flash.display.Graphics;public class RenderFog extends RenderableListItem{public var alpha : Number;public var material : FogMaterial;public function RenderFog (material:FogMaterial, alpha:Number = 0.5, depth:Number = 0, do3d:DisplayObject3D = null);public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\RenderLine.as
package org.papervision3d.core.render.command{import flash.display.Graphics;import flash.geom.Point;import org.papervision3d.core.geom.renderables.Line3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.Number2D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.special.LineMaterial;/**
* @Author Ralph Hauwert
*/
public class RenderLine extends RenderableListItem implements IRenderListItem{public var line : Line3D;public var renderer : LineMaterial;private static var lineVector : Number3D;private static var mouseVector : Number3D;private var p : Number2D;private var l1 : Number2D;private var l2 : Number2D;private var v : Number2D;private var cp3d : Number3D;public var v0 : Vertex3DInstance;public var v1 : Vertex3DInstance;public var cV : Vertex3DInstance;public var size : Number;public var length : Number;/**
Quad Vars Don't Touch
*/
private var ax : Number;private var ay : Number;private var az : Number;private var bx : Number;private var by : Number;private var bz : Number;private var dx : Number;private var dy : Number;private var azf : Number;private var bzf : Number;private var faz : Number;private var fbz : Number;private var xfocus : Number;private var yfocus : Number;private var axf : Number;private var bxf : Number;private var ayf : Number;private var byf : Number;private var det : Number;private var db : Number;private var da : Number;public function RenderLine (line:Line3D);public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;public function hitTestPoint2D (point:Point, rhd:RenderHitData) : RenderHitData;public function getZ (x:Number, y:Number, focus:Number) : Number;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\RenderParticle.as
package org.papervision3d.core.render.command{import flash.display.Graphics;import flash.geom.Point;import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.special.ParticleMaterial;/**
* @Author Ralph Hauwert
	 * 
	 * updated by Seb Lee-Delisle 
	 *  - added HitTestPoint2D so that it works with interactivity.
*/
public class RenderParticle extends RenderableListItem implements IRenderListItem{public var particle : Particle;public var renderMat : ParticleMaterial;public function RenderParticle (particle:Particle);public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;public function hitTestPoint2D (point:Point, rhd:RenderHitData) : RenderHitData;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\RenderPixels.as
package org.papervision3d.core.render.command{import flash.display.BitmapData;import flash.display.Graphics;import org.papervision3d.core.geom.Pixels;import org.papervision3d.core.geom.renderables.Pixel3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.view.layer.BitmapEffectLayer;public class RenderPixels extends RenderableListItem implements IRenderListItem{private var pixels : Pixels;public function RenderPixels (pixels:Pixels);public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\RenderTriangle.as
package org.papervision3d.core.render.command{import flash.display.BitmapData;import flash.display.Graphics;import flash.display.Sprite;import flash.geom.Point;import flash.geom.Rectangle;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.materials.BitmapMaterial;import org.papervision3d.materials.MovieMaterial;/**
* @Author Ralph Hauwert
*/
public class RenderTriangle extends RenderableListItem implements IRenderListItem{protected static var resBA : Vertex3DInstance;protected static var resPA : Vertex3DInstance;protected static var resRA : Vertex3DInstance;protected static var vPoint : Vertex3DInstance;private var position : Number3D;public var triangle : Triangle3D;public var container : Sprite;public var renderer : ITriangleDrawer;public var renderMat : MaterialObject3D;/**
Drawing Variables
*/
public var v0 : Vertex3DInstance;public var v1 : Vertex3DInstance;public var v2 : Vertex3DInstance;public var uv0 : NumberUV;public var uv1 : NumberUV;public var uv2 : NumberUV;public var create : Function;protected var vPointL : Vertex3DInstance;protected var vx0 : Vertex3DInstance;protected var vx1 : Vertex3DInstance;protected var vx2 : Vertex3DInstance;/**
Don't touch these - needed for quad
*/
private var ax : Number;private var ay : Number;private var az : Number;private var bx : Number;private var by : Number;private var bz : Number;private var cx : Number;private var cy : Number;private var cz : Number;private var azf : Number;private var bzf : Number;private var czf : Number;private var faz : Number;private var fbz : Number;private var fcz : Number;private var axf : Number;private var bxf : Number;private var cxf : Number;private var ayf : Number;private var byf : Number;private var cyf : Number;private var det : Number;private var da : Number;private var db : Number;private var dc : Number;private var au : Number;private var av : Number;private var bu : Number;private var bv : Number;private var cu : Number;private var cv : Number;private var v01 : Vertex3DInstance;private var v12 : Vertex3DInstance;private var v20 : Vertex3DInstance;private var uv01 : NumberUV;private var uv12 : NumberUV;private var uv20 : NumberUV;public function RenderTriangle (triangle:Triangle3D);public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;public function hitTestPoint2D (point:Point, renderhitData:RenderHitData) : RenderHitData;public function sameSide (point:Vertex3DInstance, ref:Vertex3DInstance, a:Vertex3DInstance, b:Vertex3DInstance) : Boolean;private function deepHitTest (face:Triangle3D, vPoint:Vertex3DInstance, rhd:RenderHitData) : RenderHitData;public function update () : void;public function fivepointcut (v0:Vertex3DInstance, v01:Vertex3DInstance, v1:Vertex3DInstance, v12:Vertex3DInstance, v2:Vertex3DInstance, uv0:NumberUV, uv01:NumberUV, uv1:NumberUV, uv12:NumberUV, uv2:NumberUV) : Array;public function getZ (x:Number, y:Number, focus:Number) : Number;public function quarter (focus:Number) : Array;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\RenderVectorShape.as
package org.papervision3d.core.render.command{import org.papervision3d.core.geom.renderables.VectorShapeRenderable;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.special.VectorShapeMaterial;import org.papervision3d.objects.special.VectorShape3D;import org.papervision3d.objects.special.commands.IVectorShape;import flash.display.Graphics;import flash.geom.Point;/**
* @author Mark Barcinski
*/
public class RenderVectorShape extends RenderableListItem implements IRenderListItem{public var vectorShape : VectorShape3D;public var renderer : VectorShapeMaterial;public function RenderVectorShape (vectorShape:VectorShape3D);public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;public function hitTestPoint2D (point:Point, renderhitData:RenderHitData) : RenderHitData;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\command\VectorShapeHitTest.as
package org.papervision3d.core.render.command{import flash.events.Event;import org.papervision3d.view.Viewport3D;import flash.display.Sprite;/**
* @author Mark Barcinski
*/
public class VectorShapeHitTest extends Sprite{private static var _instance : VectorShapeHitTest;private var viewport : Viewport3D;public static function get instance () : VectorShapeHitTest;public function VectorShapeHitTest ();public function assignViewport (viewport:Viewport3D) : void;private function onStageResized (event:Event) : void;public function hitTestPoint (x:Number, y:Number, shapeFlag:Boolean = false) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\data\QuadTree.as
package org.papervision3d.core.render.data{import flash.display.Graphics;import org.papervision3d.core.clipping.draw.Clipping;import org.papervision3d.core.clipping.draw.RectangleClipping;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.objects.DisplayObject3D;/**
* Quadrant tree for storing drawing primitives
*/
public class QuadTree{private var _root : QuadTreeNode;private var _clip : Clipping;private var _rect : RectangleClipping;private var _center : Array;private var _result : Array;private var _except : DisplayObject3D;private var _minX : Number;private var _minY : Number;private var _maxX : Number;private var _maxY : Number;private var _child : RenderableListItem;private var _children : Array;private var i : int;private var _maxlevel : uint;/**
* Defines the clipping object to be used on the drawing primitives.
*/
public function get clip () : Clipping;public function set clip (val:Clipping) : Void;public function get maxLevel () : uint;public function set maxLevel (value:uint) : Void;private function getList (node:QuadTreeNode) : void;private function getParent (node:QuadTreeNode = null) : void;/**
* @inheritDoc
*/
public function add (renderItem:RenderableListItem) : void;/**
* removes a drawing primitive from the quadrant tree.
        * 
        * @param	pri	The drawing primitive to remove.
*/
public function remove (renderItem:RenderableListItem) : void;/**
* A list of primitives that have been clipped.
		 * 
		 * @return	An array containing the primitives to be rendered.
*/
public function list () : Array;/**
* Returns an array containing all primiives overlapping the specifed primitive's quadrant.
		 * 
		 * @param	renderItem			The drawing primitive to check.
		 * @param	ex		[optional]	Excludes primitives that are children of the 3d object.
		 * @return						An array of drawing primitives.
*/
public function getOverlaps (renderItem:RenderableListItem, ex:DisplayObject3D = null) : Array;/**
* Calls the render function on all primitives in the quadrant tree
*/
public function render (renderSessionData:RenderSessionData, graphics:Graphics) : void;public function getRoot () : QuadTreeNode;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\data\QuadTreeNode.as
package org.papervision3d.core.render.data{import flash.display.Graphics;import flash.geom.Rectangle;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.objects.DisplayObject3D;/**
* Quadrant tree node
*/
public class QuadTreeNode{private var render_center_length : int;private var render_center_index : int;private var halfwidth : Number;private var halfheight : Number;private var level : int;public var maxlevel : int;/**
* Array of primitives that lie in the center of the quadrant.
*/
public var center : Array;/**
* The quadrant tree node for the top left quadrant.
*/
public var lefttop : QuadTreeNode;/**
* The quadrant tree node for the bottom left quadrant.
*/
public var leftbottom : QuadTreeNode;/**
* The quadrant tree node for the top right quadrant.
*/
public var righttop : QuadTreeNode;/**
* The quadrant tree node for the bottom right quadrant.
*/
public var rightbottom : QuadTreeNode;/**
* Determines if the bounds of the top left quadrant need re-calculating.
*/
public var lefttopFlag : Boolean;/**
* Determines if the bounds of the bottom left quadrant need re-calculating.
*/
public var leftbottomFlag : Boolean;/**
* Determines if the bounds of the top right quadrant need re-calculating.
*/
public var righttopFlag : Boolean;/**
* Determines if the bounds of the bottom right quadrant need re-calculating.
*/
public var rightbottomFlag : Boolean;/**
* Determines if the quadrant node contains only one source.
*/
public var onlysourceFlag : Boolean;/**
* hold the 3d object referenced when <code>onlysourceFlag</code> is true.
*/
public var onlysource : DisplayObject3D;/**
* The x coordinate of the quadrant division.
*/
public var xdiv : Number;/**
* The x coordinate of the quadrant division.
*/
public var ydiv : Number;/**
* The quadrant parent.
*/
public var parent : QuadTreeNode;/**
* Placeholder function for creating new quadrant node from a cache of objects.
        * Saves recreating objects and GC problems.
*/
public var create : Function;/**
* Says if node has content or not
*/
public var hasContent : Boolean;private function render_other (limit:Number, renderSessionData:RenderSessionData, graphics:Graphics) : void;/**
* Creates a new <code>PrimitiveQuadrantTreeNode</code> object.
		 *
		 * @param	xdiv	The x coordinate for the division between left and right child quadrants.
		 * @param	ydiv	The y coordinate for the division between top and bottom child quadrants.
		 * @param	width	The width of the quadrant node.
		 * @param	xdiv	The height of the quadrant node.
		 * @param	level	The iteration number of the quadrant node.
		 * @param	parent	The parent quadrant of the quadrant node.
		 * @param	maxLevel	The deepest a Node can go
*/
public function QuadTreeNode (xdiv:Number, ydiv:Number, width:Number, height:Number, level:int, parent:QuadTreeNode = null, maxLevel:uint = 4);/**
* Adds a primitive to the quadrant
*/
public function push (pri:RenderableListItem) : void;/**
* Clears the quadrant of all primitives and child nodes
*/
public function reset (xdiv:Number, ydiv:Number, width:Number, height:Number, maxLevel:uint) : void;public function getRect () : Rectangle;/**
* Sorts and renders the contents of the quadrant tree
*/
public function render (limit:Number, renderSessionData:RenderSessionData, graphics:Graphics) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\data\RenderHitData.as
package org.papervision3d.core.render.data{import org.papervision3d.core.geom.renderables.IRenderable;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.objects.DisplayObject3D;/**
* @Author Ralph Hauwert
*/
public class RenderHitData{public var startTime : int;public var endTime : int;public var hasHit : Boolean;public var displayObject3D : DisplayObject3D;public var material : MaterialObject3D;public var renderable : IRenderable;public var u : Number;public var v : Number;public var x : Number;public var y : Number;public var z : Number;public function RenderHitData ();public function toString () : String;public function clear () : void;public function clone () : RenderHitData;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\data\RenderSessionData.as
package org.papervision3d.core.render.data{import flash.display.Sprite;import org.papervision3d.core.clipping.DefaultClipping;import org.papervision3d.core.culling.IParticleCuller;import org.papervision3d.core.culling.ITriangleCuller;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.proto.SceneObject3D;import org.papervision3d.core.render.IRenderEngine;import org.papervision3d.view.Viewport3D;/**
* @Author Ralph Hauwert
*/
public class RenderSessionData{public var sorted : Boolean;public var triangleCuller : ITriangleCuller;public var particleCuller : IParticleCuller;public var viewPort : Viewport3D;public var container : Sprite;public var scene : SceneObject3D;public var camera : CameraObject3D;public var renderer : IRenderEngine;public var renderStatistics : RenderStatistics;public var renderObjects : Array;public var renderLayers : Array;public var clipping : DefaultClipping;public var quadrantTree : QuadTree;public function RenderSessionData ();public function destroy () : void;public function clone () : RenderSessionData;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\data\RenderStatistics.as
package org.papervision3d.core.render.data{/**
* @Author Ralph Hauwert
*/
public class RenderStatistics{public var projectionTime : int;public var renderTime : int;public var rendered : int;public var triangles : int;public var culledTriangles : int;public var particles : int;public var culledParticles : int;public var lines : int;public var shadedTriangles : int;public var filteredObjects : int;public var culledObjects : int;public function RenderStatistics ();public function clear () : void;public function clone () : RenderStatistics;public function toString () : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\draw\ILineDrawer.as
package org.papervision3d.core.render.draw{import flash.display.Graphics;import org.papervision3d.core.render.command.RenderLine;import org.papervision3d.core.render.data.RenderSessionData;/**
* @Author Ralph Hauwert
*/
public interface ILineDrawer{public function drawLine (line:RenderLine, graphics:Graphics, renderSessionData:RenderSessionData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\draw\IParticleDrawer.as
package org.papervision3d.core.render.draw{import flash.display.Graphics;import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.core.render.data.RenderSessionData;/**
* @Author Ralph Hauwert
*/
public interface IParticleDrawer{public function drawParticle (particle:Particle, graphics:Graphics, renderSessionData:RenderSessionData) : void;public function updateRenderRect (particle:Particle) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\draw\ITriangleDrawer.as
package org.papervision3d.core.render.draw{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;/**
* @Author Ralph Hauwert
*/
public interface ITriangleDrawer{public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;public function drawRT (rt:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\filter\AbstractQuadrantFilter.as
package org.papervision3d.core.render.filter{import org.papervision3d.cameras.Camera3D;import org.papervision3d.core.clipping.draw.Clipping;import org.papervision3d.core.render.data.QuadTree;import org.papervision3d.scenes.Scene3D;public class AbstractQuadrantFilter{public function AbstractQuadrantFilter ();/**
* Runs a quadrant filter
*/
public function filterTree (tree:QuadTree, scene:Scene3D, camera:Camera3D, clip:Clipping) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\filter\BasicRenderFilter.as
package org.papervision3d.core.render.filter{/**
* @Author Ralph Hauwert
*/
public class BasicRenderFilter implements IRenderFilter{public function filter (array:Array) : int;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\filter\FogFilter.as
package org.papervision3d.core.render.filter{import org.papervision3d.core.render.command.RenderFog;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.materials.special.FogMaterial;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.layer.ViewportLayer;public class FogFilter extends BasicRenderFilter{private var _maxDepth : Number;private var _minDepth : Number;public var segments : Number;public var material : FogMaterial;public var viewportLayer : ViewportLayer;private var do3ds : Array;public function set maxDepth (value:Number) : Void;public function get maxDepth () : Number;public function set minDepth (value:Number) : Void;public function get minDepth () : Number;public function FogFilter (material:FogMaterial, segments:uint = 8, minDepth:Number = 200, maxDepth:Number = 4000, useViewportLayer:ViewportLayer = null);public function filter (array:Array) : int;private function visibleDepth (element:RenderableListItem, index:int, arr:Array) : Boolean;private function removeRenderItem (ar:Array, index:Number) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\filter\IRenderFilter.as
package org.papervision3d.core.render.filter{/**
* @Author Ralph Hauwert
*/
public interface IRenderFilter{public function filter (array:Array) : int;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\filter\QuadrantFilter.as
package org.papervision3d.core.render.filter{import flash.utils.*;import org.papervision3d.cameras.Camera3D;import org.papervision3d.core.clipping.draw.Clipping;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.render.command.RenderLine;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.QuadTree;import org.papervision3d.scenes.Scene3D;/**
* Splits all intersecting triangles
*/
public class QuadrantFilter extends AbstractQuadrantFilter{private var maxdelay : int;private var start : int;private var check : int;private var primitives : Array;private var pri : RenderableListItem;private var turn : int;private var leftover : Array;private var rivals : Array;private var rival : RenderableListItem;private var parts : Array;private var part : RenderableListItem;private var subst : Array;private var focus : Number;private var av0z : Number;private var av0p : Number;private var av0x : Number;private var av0y : Number;private var av1z : Number;private var av1p : Number;private var av1x : Number;private var av1y : Number;private var av2z : Number;private var av2p : Number;private var av2x : Number;private var av2y : Number;private var ad1x : Number;private var ad1y : Number;private var ad1z : Number;private var ad2x : Number;private var ad2y : Number;private var ad2z : Number;private var apa : Number;private var apb : Number;private var apc : Number;private var apd : Number;private var tv0z : Number;private var tv0p : Number;private var tv0x : Number;private var tv0y : Number;private var tv1z : Number;private var tv1p : Number;private var tv1x : Number;private var tv1y : Number;private var tv2z : Number;private var tv2p : Number;private var tv2x : Number;private var tv2y : Number;private var sv0 : Number;private var sv1 : Number;private var sv2 : Number;private var td1x : Number;private var td1y : Number;private var td1z : Number;private var td2x : Number;private var td2y : Number;private var td2z : Number;private var tpa : Number;private var tpb : Number;private var tpc : Number;private var tpd : Number;private var sav0 : Number;private var sav1 : Number;private var sav2 : Number;private var tv0 : Vertex3D;private var tv1 : Vertex3D;private var tv2 : Vertex3D;private var q0x : Number;private var q0y : Number;private var q1x : Number;private var q1y : Number;private var q2x : Number;private var q2y : Number;private var w0x : Number;private var w0y : Number;private var w1x : Number;private var w1y : Number;private var w2x : Number;private var w2y : Number;private var ql01a : Number;private var ql01b : Number;private var ql01c : Number;private var ql01s : Number;private var ql01w0 : Number;private var ql01w1 : Number;private var ql01w2 : Number;private var ql12a : Number;private var ql12b : Number;private var ql12c : Number;private var ql12s : Number;private var ql12w0 : Number;private var ql12w1 : Number;private var ql12w2 : Number;private var ql20a : Number;private var ql20b : Number;private var ql20c : Number;private var ql20s : Number;private var ql20w0 : Number;private var ql20w1 : Number;private var ql20w2 : Number;private var wl01a : Number;private var wl01b : Number;private var wl01c : Number;private var wl01s : Number;private var wl01q0 : Number;private var wl01q1 : Number;private var wl01q2 : Number;private var wl12a : Number;private var wl12b : Number;private var wl12c : Number;private var wl12s : Number;private var wl12q0 : Number;private var wl12q1 : Number;private var wl12q2 : Number;private var wl20a : Number;private var wl20b : Number;private var wl20c : Number;private var wl20s : Number;private var wl20q0 : Number;private var wl20q1 : Number;private var wl20q2 : Number;private var d : Number;private var k0 : Number;private var k1 : Number;private var tv01z : Number;private var tv01p : Number;private var tv01x : Number;private var tv01y : Number;private var v01 : Vertex3DInstance;private function riddle (q:RenderableListItem, w:RenderableListItem) : Array;private function riddleTT (q:RenderTriangle, w:RenderTriangle) : Array;private function overlap (q:RenderTriangle, w:RenderTriangle) : Boolean;/**
* Creates a new <code>QuadrantFilter</code> object.
		 *
		 * @param	maxdelay	[optional]		The maximum time the filter can take to resolve z-depth before timing out.
*/
public function QuadrantFilter (maxdelay:int = 60000);/**
* @inheritDoc
*/
public function filterTree (tree:QuadTree, scene:Scene3D, camera:Camera3D, clip:Clipping) : void;/**
* Used to trace the values of a filter.
		 * 
		 * @return A string representation of the filter object.
*/
public function toString () : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\filter\QuadrantZFilter.as
package org.papervision3d.core.render.filter{import flash.utils.*;import org.papervision3d.cameras.Camera3D;import org.papervision3d.core.clipping.draw.Clipping;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.QuadTree;import org.papervision3d.scenes.Scene3D;/**
* Corrects triangle z-sorting
*/
public class QuadrantZFilter extends AbstractQuadrantFilter{private var maxdelay : int;private var _focus : Number;private var start : int;private var check : int;private var primitives : Array;private var pri : RenderableListItem;private var turn : int;private var leftover : Array;private var maxZ : Number;private var minZ : Number;private var maxdeltaZ : Number;private var rivals : Array;private var rival : RenderableListItem;private var parts : Array;private var part : RenderableListItem;private var ZOrderDeeper : int;private var ZOrderIrrelevant : int;private var ZOrderHigher : int;private var ZOrderSame : int;private var q0x : Number;private var q0y : Number;private var q1x : Number;private var q1y : Number;private var q2x : Number;private var q2y : Number;private var r0x : Number;private var r0y : Number;private var r1x : Number;private var r1y : Number;private var ql01a : Number;private var ql01b : Number;private var ql01c : Number;private var ql01s : Number;private var ql01r0 : Number;private var ql01r1 : Number;private var ql12a : Number;private var ql12b : Number;private var ql12c : Number;private var ql12s : Number;private var ql12r0 : Number;private var ql12r1 : Number;private var ql20a : Number;private var ql20b : Number;private var ql20c : Number;private var ql20s : Number;private var ql20r0 : Number;private var ql20r1 : Number;private var rla : Number;private var rlb : Number;private var rlc : Number;private var rlq0 : Number;private var rlq1 : Number;private var rlq2 : Number;private var q01r : Boolean;private var q12r : Boolean;private var q20r : Boolean;private var q01rx : Number;private var q01ry : Number;private var q12rx : Number;private var q12ry : Number;private var q20rx : Number;private var q20ry : Number;private var count : int;private var cx : Number;private var cy : Number;private var q01rd : Number;private var q12rd : Number;private var q20rd : Number;private var w0x : Number;private var w0y : Number;private var w1x : Number;private var w1y : Number;private var w2x : Number;private var w2y : Number;private var ql01w0 : Number;private var ql01w1 : Number;private var ql01w2 : Number;private var ql12w0 : Number;private var ql12w1 : Number;private var ql12w2 : Number;private var ql20w0 : Number;private var ql20w1 : Number;private var ql20w2 : Number;private var wl01a : Number;private var wl01b : Number;private var wl01c : Number;private var wl01s : Number;private var wl01q0 : Number;private var wl01q1 : Number;private var wl01q2 : Number;private var wl12a : Number;private var wl12b : Number;private var wl12c : Number;private var wl12s : Number;private var wl12q0 : Number;private var wl12q1 : Number;private var wl12q2 : Number;private var wl20a : Number;private var wl20b : Number;private var wl20c : Number;private var wl20s : Number;private var wl20q0 : Number;private var wl20q1 : Number;private var wl20q2 : Number;private var q01w01 : Boolean;private var q12w01 : Boolean;private var q20w01 : Boolean;private var q01w12 : Boolean;private var q12w12 : Boolean;private var q20w12 : Boolean;private var q01w20 : Boolean;private var q12w20 : Boolean;private var q20w20 : Boolean;private var q01w01x : Number;private var q01w01y : Number;private var q12w01x : Number;private var q12w01y : Number;private var q20w01x : Number;private var q20w01y : Number;private var q01w12x : Number;private var q01w12y : Number;private var q12w12x : Number;private var q12w12y : Number;private var q20w12x : Number;private var q20w12y : Number;private var q01w20x : Number;private var q01w20y : Number;private var q12w20x : Number;private var q12w20y : Number;private var q20w20x : Number;private var q20w20y : Number;private var q01w01d : Number;private var q12w01d : Number;private var q20w01d : Number;private var q01w12d : Number;private var q12w12d : Number;private var q20w12d : Number;private var q01w20d : Number;private var q12w20d : Number;private var q20w20d : Number;private var az : Number;private var bz : Number;private function zconflict (q:RenderableListItem, w:RenderableListItem) : int;private function zconflictTT (q:RenderTriangle, w:RenderTriangle) : int;private function zcompare (a:RenderableListItem, b:RenderableListItem, x:Number, y:Number) : int;/**
* Creates a new <code>QuadrantZFilter</code> object.
		 *
		 * @param	maxdelay	[optional]		The maximum time the filter can take to resolve z-depth before timing out.
*/
public function QuadrantZFilter (maxdelay:int = 60000);/**
* @inheritDoc
*/
public function filterTree (tree:QuadTree, scene:Scene3D, camera:Camera3D, clip:Clipping) : void;/**
* Used to trace the values of a filter.
		 * 
		 * @return A string representation of the filter object.
*/
public function toString () : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\material\IUpdateAfterMaterial.as
package org.papervision3d.core.render.material{import org.papervision3d.core.render.data.RenderSessionData;public interface IUpdateAfterMaterial{public function updateAfterRender (renderSessionData:RenderSessionData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\material\IUpdateBeforeMaterial.as
package org.papervision3d.core.render.material{import org.papervision3d.core.render.data.RenderSessionData;public interface IUpdateBeforeMaterial{public function updateBeforeRender (renderSessionData:RenderSessionData) : void;public function isUpdateable () : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\material\MaterialManager.as
package org.papervision3d.core.render.material{import flash.utils.Dictionary;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;/**
* @Author Ralph Hauwert
	 * 
	 * <code>MaterialManager</code> (used internally) is a singleton that tracks 
	 * all materials. Each time a material is created, the <code>MaterialManager</code> 
	 * registers the material for access in the render engine.
*/
public class MaterialManager{private static var instance : MaterialManager;private var materials : Dictionary;/**
* MaterialManager singleton constructor
*/
public function MaterialManager ();/**
@private
*/
private function init () : void;/**
@private
*/
private function _registerMaterial (material:MaterialObject3D) : void;/**
@private
*/
private function _unRegisterMaterial (material:MaterialObject3D) : void;/**
* Allows for materials that animate or change (e.g., MovieMaterial) to 
		 * be updated prior to the render
		 * 
		 * @param renderSessionData		the data used in updating the material
*/
public function updateMaterialsBeforeRender (renderSessionData:RenderSessionData) : void;/**
* Allows for materials that animate or change (e.g., MovieMaterial) to 
		 * be updated after the render
		 * 
		 * @param renderSessionData		the data used in updating the material
*/
public function updateMaterialsAfterRender (renderSessionData:RenderSessionData) : void;/**
* Registers a material
*/
public static function registerMaterial (material:MaterialObject3D) : void;/**
* Unregisters a material
*/
public static function unRegisterMaterial (material:MaterialObject3D) : void;/**
* Returns a singleton instance of the <code>MaterialManager</code>
*/
public static function getInstance () : MaterialManager;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\project\BasicProjectionPipeline.as
package org.papervision3d.core.render.project{import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;public class BasicProjectionPipeline extends ProjectionPipeline{public function BasicProjectionPipeline ();protected function init () : void;/**
* project(renderSessionData:RenderSessionData);
		 * 
		 * Projects all base objects
		 * 
		 * @returns void;
*/
public function project (renderSessionData:RenderSessionData) : void;protected function projectObject (object:DisplayObject3D, renderSessionData:RenderSessionData, test:Number) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\project\ProjectionPipeline.as
package org.papervision3d.core.render.project{import org.papervision3d.core.render.data.RenderSessionData;/**
* @author Ralph Hauwert
*/
public class ProjectionPipeline{/**
* ProjectionPipeline();
		 * 
		 * A projection pipeline defines the way a scene and it's contained objects will be projected and culled.
		 * It's designed to create flexibility within the rendering of Papervision3D, allowing multiple projection methods and culling.
*/
public function ProjectionPipeline ();/**
* project(renderSessionData:RenderSessionData);
		 * 
		 * The main projection function as called by the renderer.
*/
public function project (renderSessionData:RenderSessionData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\project\basic\IProjector.as
package org.papervision3d.core.render.project.basic{import org.papervision3d.core.render.data.RenderSessionData;public interface IProjector{public function project (renderSessionData:RenderSessionData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\shader\IShaderRenderer.as
package org.papervision3d.core.render.shader{import flash.display.Sprite;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.shaders.Shader;public interface IShaderRenderer{public function render (renderSessionData:RenderSessionData) : void;public function clear () : void;public function getLayerForShader (shader:Shader) : Sprite;public function destroy () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\shader\ShaderObjectData.as
package org.papervision3d.core.render.shader{import flash.display.BitmapData;import flash.geom.Matrix;import flash.geom.Point;import flash.geom.Rectangle;import flash.utils.Dictionary;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.materials.BitmapMaterial;import org.papervision3d.materials.shaders.ShadedMaterial;import org.papervision3d.objects.DisplayObject3D;/**
* Author Ralph Hauwert
*/
public class ShaderObjectData{private var origin : Point;public var shaderRenderer : ShaderRenderer;public var uvMatrices : Dictionary;public var lightMatrices : Dictionary;public var object : DisplayObject3D;public var material : BitmapMaterial;public var shadedMaterial : ShadedMaterial;public var triangleUVS : Dictionary;public var renderTriangleUVS : Dictionary;protected var triangleBitmaps : Dictionary;public var triangleRects : Dictionary;public function ShaderObjectData (object:DisplayObject3D, material:BitmapMaterial, shadedMaterial:ShadedMaterial);/**
* Returns a matrix for the original texturemap coordinates
*/
public function getUVMatrixForTriangle (triangle:Triangle3D, perturb:Boolean = false) : Matrix;/**
* Returns a per tri bitmap to use to render to screen.
*/
public function getOutputBitmapFor (triangle:Triangle3D) : BitmapData;/**
* For per tri mode. Returns a correct uvmap for the material to draw to an individual bitmap to screen.
*/
public function getPerTriUVForDraw (triangle:Triangle3D) : Matrix;/**
* For per tri mode. Returns a correct uvmap for the shader to draw to an individual bitmap.
*/
public function getPerTriUVForShader (triangle:Triangle3D) : Matrix;/**
* For PER_TRI MODE. Returns a rectangle for the surface size to draw too.
*/
public function getRectFor (triangle:Triangle3D) : Rectangle;public function updateBeforeRender () : void;public function destroy () : void;private function perturbUVMatrix (matrix:Matrix, triangle:Triangle3D, numPixels:Number = 2) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\shader\ShaderRenderer.as
package org.papervision3d.core.render.shader{import flash.display.Bitmap;import flash.display.BitmapData;import flash.display.BitmapDataChannel;import flash.display.BlendMode;import flash.display.Sprite;import flash.events.EventDispatcher;import flash.geom.Point;import flash.utils.Dictionary;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.shaders.Shader;/**
* Author Ralph Hauwert
*/
public class ShaderRenderer extends EventDispatcher implements IShaderRenderer{public var resizedInput : Boolean;public var bitmapLayer : Sprite;public var container : Sprite;public var bitmapContainer : Bitmap;public var shadeLayers : Dictionary;public var outputBitmap : BitmapData;private var _inputBitmapData : BitmapData;public function set inputBitmap (bitmapData:BitmapData) : Void;public function get inputBitmap () : BitmapData;public function ShaderRenderer ();public function render (renderSessionData:RenderSessionData) : void;public function clear () : void;public function destroy () : void;public function getLayerForShader (shader:Shader) : Sprite;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\sort\BasicRenderSorter.as
package org.papervision3d.core.render.sort{/**
* @author Ralph Hauwert
*/
public class BasicRenderSorter implements IRenderSorter{public function sort (array:Array) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\sort\IRenderSorter.as
package org.papervision3d.core.render.sort{/**
* @Author Ralph Hauwert
*/
public interface IRenderSorter{public function sort (array:Array) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\render\sort\NullSorter.as
package org.papervision3d.core.render.sort{public class NullSorter implements IRenderSorter{/**
* NullSorter();
		 * 
		 * Doesn't do anything to the renderlist, during the sort phase.
*/
public function NullSorter ();public function sort (array:Array) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\InteractiveSceneManager.as
package org.papervision3d.core.utils{import flash.display.Sprite;import flash.events.Event;import flash.events.EventDispatcher;import flash.events.MouseEvent;import flash.geom.Point;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.core.utils.virtualmouse.IVirtualMouseEvent;import org.papervision3d.core.utils.virtualmouse.VirtualMouse;import org.papervision3d.events.InteractiveScene3DEvent;import org.papervision3d.materials.MovieMaterial;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.Viewport3D;/**
* @author John Grden
*/
public class InteractiveSceneManager extends EventDispatcher{/**
* MOUSE_IS_DOWN is a quick static property to check and is maintained by the ISM
*/
public static var MOUSE_IS_DOWN : Boolean;/**
* VirtualMouse is used with faceLevelMode of ISM or DO3D's.  Its a virtual mouse that causes the objects in your materials movieclip containers to fire off their mouse events such as click, over, out, release, press etc
		 * </p>
		 * <p>
		 * Using these events requires you only to do what you normally do - establish listeners with your objects like you normally would, and you'll receive them!
*/
public var virtualMouse : VirtualMouse;public var mouse3D : Mouse3D;public var viewport : Viewport3D;/**
* Main container for ISM to create the sub InteractiveSprite containers for the faces and DO3D objects passed in during the render loop
*/
public var container : Sprite;public var renderHitData : RenderHitData;public var currentDisplayObject3D : DisplayObject3D;public var currentMaterial : MaterialObject3D;public var enableOverOut : Boolean;public var currentMouseDO3D : DisplayObject3D;public var debug : Boolean;public var currentMousePos : Point;public var lastMousePos : Point;public var _viewportRendered : Boolean;public function InteractiveSceneManager (viewport:Viewport3D);public function destroy () : void;public function init () : void;/**
* @private
		 * @param e
		 *
*/
protected function handleAddedToStage (e:Event) : void;protected function initVirtualMouse () : void;public function initListeners () : void;public function updateRenderHitData () : void;protected function manageOverOut () : void;protected function resolveRenderHitData () : void;/**
* Handles the MOUSE_DOWN event on an InteractiveSprite container
		 * @param e
		 *
*/
protected function handleMousePress (e:MouseEvent) : void;/**
* Handles the MOUSE_UP event on an InteractiveSprite container
		 * @param e
		 *
*/
protected function handleMouseRelease (e:MouseEvent) : void;/**
* Handles the MOUSE_CLICK event on an InteractiveSprite container
		 * @param e
		 *
*/
protected function handleMouseClick (e:MouseEvent) : void;/**
* Handles the MOUSE_CLICK event on an InteractiveSprite container
		 * @param e
		 *
*/
protected function handleMouseDoubleClick (e:MouseEvent) : void;/**
* Handles the MOUSE_OVER event on an InteractiveSprite container
		 * @param e
		 *
*/
protected function handleMouseOver (DO3D:DisplayObject3D) : void;/**
* Handles the MOUSE_OUT event on an InteractiveSprite container
		 * @param e
		 *
*/
protected function handleMouseOut (DO3D:DisplayObject3D) : void;public function updateAfterRender () : void;protected function hasMouseMoved () : Boolean;/**
* This handles the MOUSE_MOVE event on an InteractiveSprite container
		 * and replaces handleMouseMove. 
		 * 
		 * By using ENTER_FRAME and manually checking for mouse movement we should save CPU.
		 * 
		 * @param e
		 *
*/
protected function handleEnterFrame (e:Event) : void;/**
* @private
		 * @param event
		 * @param currentTarget
		 *
*/
protected function dispatchObjectEvent (event:String, DO3D:DisplayObject3D) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\InteractiveUtils.as
package org.papervision3d.core.utils{import flash.display.BitmapData;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.materials.BitmapMaterial;import org.papervision3d.objects.DisplayObject3D;/**
* InteractiveUtils are used in conjunction with the ISM to resolve a face's mouse interaction and coordinates back to 2D screen space	 * 	 *
*/
public class InteractiveUtils{public static function UVatPoint (face3d:Triangle3D, x:Number, y:Number) : Object;public static function getCoordAtPoint (face3d:Triangle3D, x:Number, y:Number) : Vertex3D;public static function getMapCoordAtPointDO3D (displayObject:DisplayObject3D, x:Number, y:Number) : Object;public static function getMapCoordAtPoint (face3d:Triangle3D, x:Number, y:Number) : Object;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\MeshUtil.as
package org.papervision3d.core.utils{import flash.utils.Dictionary;import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.Plane3D;import org.papervision3d.core.math.util.ClassificationUtil;import org.papervision3d.core.math.util.TriangleUtil;import org.papervision3d.core.proto.GeometryObject3D;public class MeshUtil{public function MeshUtil ();public static function cutTriangleMesh (mesh:TriangleMesh3D, cuttingPlane:Plane3D) : Array;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\Mouse3D.as
package org.papervision3d.core.utils{import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.objects.DisplayObject3D;/**
* Mouse3D tracks the mouse's position in relation to 3d space
*/
public class Mouse3D extends DisplayObject3D{private static var UP : Number3D;/**
* A boolean flag to enable or disable the mouse updating in the		 * <code>InteractiveSceneManager</code>
*/
public static var enabled : Boolean;private var target : Number3D;public function Mouse3D ();/**
* updates the mouse position		 * 		 * @param rhd		the data used to update the mouse position
*/
public function updatePosition (rhd:RenderHitData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\StopWatch.as
package org.papervision3d.core.utils{import flash.events.EventDispatcher;import flash.utils.getTimer;/**
* StopWatch times how long certain actions (e.g., a render) take
*/
public class StopWatch extends EventDispatcher{private var startTime : int;private var stopTime : int;private var elapsedTime : int;private var isRunning : Boolean;public function StopWatch ();/**
* Starts the timer
*/
public function start () : void;/**
* Stops the timer
*/
public function stop () : int;/**
* Resets the timer
*/
public function reset () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\virtualmouse\IVirtualMouseEvent.as
package org.papervision3d.core.utils.virtualmouse{/**
* Interface for virtual mouse events	 * allowing you to check an event for	 * the type of IVirtualMouseEvent to see	 * if it originated from VirtualMouse.
*/
public interface IVirtualMouseEvent{}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\virtualmouse\VirtualMouse.as
package org.papervision3d.core.utils.virtualmouse{import flash.display.DisplayObject;import flash.display.DisplayObjectContainer;import flash.display.InteractiveObject;import flash.display.SimpleButton;import flash.display.Sprite;import flash.display.Stage;import flash.events.Event;import flash.events.EventDispatcher;import flash.events.KeyboardEvent;import flash.events.MouseEvent;import flash.geom.Point;import flash.utils.Dictionary;import org.papervision3d.core.log.PaperLogger;/**
* The VirtualMouse class is used to create a programmatic 	 * version of the users mouse that can be moved about the	 * Flash player stage firing off mouse events of the display	 * objects it interacts with.  This can allow you to simulate	 * interaction with buttons and movie clips through ActionScript.	 * <br />	 * Handled events include:	 * 		Event.MOUSE_LEAVE,	 * 		MouseEvent.MOUSE_MOVE,	 * 		MouseEvent.MOUSE_OUT,	 * 		MouseEvent.ROLL_OUT,	 * 		MouseEvent.MOUSE_OVER,	 * 		MouseEvent.ROLL_OVER,	 * 		MouseEvent.MOUSE_DOWN,	 * 		MouseEvent.MOUSE_UP.	 * 		MouseEvent.CLICK, and,	 * 		MouseEvent.DOUBLE_CLICK.	 * Along with dispatching those events for their respective	 * targets, the VirtualMouse instance will also dispatch the	 * event on itself allowing to capture which events are being	 * fired by the virtual mouse.  The last event fired can also	 * be referenced in the lastEvent property.	 * <br />	 * VirtualMouse mouse cannot:	 * 		activate states of SimpleButton instances, 	 * 		change object focus, 	 * 		handle mouseWheel related events,	 * 		change the system's cursor location, or 	 * 		spoof the location of the mouseX and mouseY properties	 * 			(which some components rely on).
*/
public class VirtualMouse extends EventDispatcher{public static const UPDATE : String;private var altKey : Boolean;private var ctrlKey : Boolean;private var shiftKey : Boolean;private var delta : int;private var _stage : Stage;private var _container : Sprite;private var target : InteractiveObject;private var location : Point;private var isLocked : Boolean;private var isDoubleClickEvent : Boolean;private static var _mouseIsDown : Boolean;private var disabledEvents : Object;private var ignoredInstances : Dictionary;private var _lastEvent : Event;private var lastMouseDown : Boolean;private var updateMouseDown : Boolean;private var lastLocation : Point;private var lastDownTarget : DisplayObject;private var lastWithinStage : Boolean;private var _useNativeEvents : Boolean;private var eventEvent : Class;private var mouseEventEvent : Class;/**
* A reference to the Stage instance. This		 * reference needs to be passed to the 		 * VirtualMouse instance either in its constructor		 * or through assigning it's stage property.		 * Without a valid reference to the stage, the		 * virtual mouse will not function.		 * @see VirtualMouse()
*/
public function get stage () : Stage;public function set stage (s:Stage) : Void;/**
* 		* @param	value Sprite container you want VirtualMouse to use with its testing of sub containers		* @return
*/
public function set container (value:Sprite) : Void;public function get container () : Sprite;/**
* The last event dispatched by the VirtualMouse		 * instance.  This can be useful for preventing		 * event recursion if performing VirtualMouse		 * operations within MouseEvent handlers.
*/
public function get lastEvent () : Event;/**
* True if the virtual mouse is being		 * pressed, false if not.  The mouse is		 * down for the virtual mouse if press()		 * was called.		 * @see press()		 * @see release()
*/
public function get mouseIsDown () : Boolean;/**
* The x location of the virtual mouse. If you are		 * setting both the x and y properties of the		 * virtual mouse at the same time, you would probably		 * want to lock the VirtualMouse instance to prevent		 * additional events from firing.		 * @see lock		 * @see unlock		 * @see y		 * @see setLocation()		 * @see getLocation()
*/
public function get x () : Number;public function set x (n:Number) : Void;/**
* The y location of the virtual mouse.  If you are		 * setting both the x and y properties of the		 * virtual mouse at the same time, you would probably		 * want to lock the VirtualMouse instance to prevent		 * additional events from firing.		 * @see lock		 * @see unlock		 * @see x		 * @see setLocation()		 * @see getLocation()
*/
public function get y () : Number;public function set y (n:Number) : Void;/**
* Determines if the events dispatched by the		 * VirtualMouse instance are IVirualMouseEvent		 * Events (wrapping Event and MouseEvent) or events		 * of the native Event and MouseEvent type. When using		 * non-native events, you can check to see if the		 * events originated from VirtualMouse by seeing if		 * the events are of the type IVirualMouseEvent.		 * @see lastEvent
*/
public function get useNativeEvents () : Boolean;public function set useNativeEvents (b:Boolean) : Void;/**
* Initializes a new VirtualMouse instance. 		 * @param stage A reference to the stage instance.		 * @param startX The initial x location of		 * 		the virtual mouse.		 * @param startY The initial y location of		 * 		the virtual mouse.
*/
public function VirtualMouse (stage:Stage = null, container:Sprite = null, startX:Number = 0, startY:Number = 0);/**
* Returns the location (x and y) of the current		 * VirtualMouse instance. The location of the		 * virtual mouse is based in the global		 * coordinate space.		 * @return A Point instance representing the 		 * 		location of the virtual mouse in		 * 		global coordinate space.		 * @see x		 * @see y		 * @see setLocation()
*/
public function getLocation () : Point;/**
* Sets the location (x and y) of the current		 * VirtualMouse instance.  There are two ways to		 * call setLocation, either passing in a single		 * Point instance, or by passing in two Number		 * instances representing x and y coordinates.		 * The location of the virtual mouse is based in		 * the global coordinate space.		 * @param a A Point instance or x Number value.		 * @param b A y Number value if a is a Number.		 * @see x		 * @see y		 * @see getLocation()
*/
public function setLocation (a:*, b:* = null) : void;/**
* Locks the current VirtualMouse instance		 * preventing updates from being made as 		 * properties change within the instance.		 * To release and allow an update, call unlock().		 * @see lock()		 * @see update()
*/
public function lock () : void;/**
* Unlocks the current VirtualMouse instance		 * allowing updates to be made for the		 * dispatching of virtual mouse events. After		 * unlocking the instance, it will update and		 * additional calls to press(), release(), or		 * changing the location of the virtual mouse		 * will also invoke updates.		 * @see lock()		 * @see update()
*/
public function unlock () : void;/**
* Allows you to disable an event by type		 * preventing the virtual mouse from 		 * dispatching that event during an update.		 * @param type The type for the event to		 * 		disable, e.g. MouseEvent.CLICK		 * @see enableEvent()
*/
public function disableEvent (type:String) : void;/**
* Re-enables an event disabled with		 * disableEvent.		 * @param type The type for the event to		 * 		enable, e.g. MouseEvent.CLICK		 * @see disableEvent()
*/
public function enableEvent (type:String) : void;/**
* Ignores a display object preventing that		 * object from recieving events from the		 * virtual mouse.  This is useful for instances		 * used for cursors which may always be under		 * the virtual mouse's location.		 * @param instance A reference to the		 * 		DisplayObject instance to ignore.		 * @see unignore()
*/
public function ignore (instance:DisplayObject) : void;/**
* Removes an instance from the ignore list		 * defined by ignore().  When an ingored		 * object is passed into unignore(), it will		 * be able to receive events from the virtual		 * mouse.		 * @param instance A reference to the		 * 		DisplayObject instance to unignore.		 * @see ignore()
*/
public function unignore (instance:DisplayObject) : void;/**
* Simulates the pressing of the left		 * mouse button. To release the mouse		 * button, use release().		 * @see release()		 * @see click()
*/
public function press () : void;/**
* Simulates the release of the left		 * mouse button.  This method has no		 * effect unless press() was called first.		 * @see press()		 * @see click()
*/
public function release () : void;/**
* Simulates a click of the left		 * mouse button (press and release)		 * @see press()		 * @see release()		 * @see click()		 * @see doubleClick()
*/
public function click () : void;/**
* Simulates a double-click of the left		 * mouse button (press and release twice).		 * Calling this command is the only way to		 * simulate a double-click for the virtual		 * mouse.  Calling press() and release() or		 * click() is rapid succession will not		 * invoke a double-click event. The double-click		 * event will also only fire for an instance		 * if it's doubleClickEnabled property is		 * set to true.		 * @see click()
*/
public function doubleClick () : void;/**
Added by Jim Kremens kremens@gmail.com 08/16/07
*/
public function exitContainer () : void;/**
* Updates the VirtualMouse instance's state		 * to reflect a change in the virtual mouse.		 * Within this method all events will be dispatched.		 * update() is called any time a VirtualMouse		 * property is changed unless lock() was used to		 * lock the instance.  update() will then not be		 * called until unlock() is used to unlock		 * the instance. Typically you would never call		 * update() directly; it is called automatically		 * by the VirtualMouse class. Calling update()		 * manually will override lock(). Whenever update()		 * is called, the UPDATE event is dispatched.		 * @see lock()		 * @see unlock()
*/
public function update () : void;private function handleUpdate (event:Event) : void;private function keyHandler (event:KeyboardEvent) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\virtualmouse\VirtualMouseEvent.as
package org.papervision3d.core.utils.virtualmouse{import flash.events.Event;/**
* Wrapper for the Event class to let you check to	 * see if an event originated from the user's mouse	 * or a VirtualMouse instance.
*/
public class VirtualMouseEvent extends Event implements IVirtualMouseEvent{public function VirtualMouseEvent (type:String, bubbles:Boolean = false, cancelable:Boolean = false);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\utils\virtualmouse\VirtualMouseMouseEvent.as
package org.papervision3d.core.utils.virtualmouse{import flash.display.InteractiveObject;import flash.events.MouseEvent;/**
* Wrapper for the MouseEvent class to let you check	 * to see if an event originated from the user's mouse	 * or a VirtualMouse instance.
*/
public class VirtualMouseMouseEvent extends MouseEvent implements IVirtualMouseEvent{public function VirtualMouseMouseEvent (type:String, bubbles:Boolean = false, cancelable:Boolean = false, localX:Number = NaN, localY:Number = NaN, relatedObject:InteractiveObject = null, ctrlKey:Boolean = false, altKey:Boolean = false, shiftKey:Boolean = false, buttonDown:Boolean = false, delta:int = 0);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\view\IView.as
package org.papervision3d.core.view{/**
* @Author Ralph Hauwert
*/
public interface IView{public function singleRender () : void;public function startRendering () : void;public function stopRendering (reRender:Boolean = false, cacheAsBitmap:Boolean = false) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\core\view\IViewport3D.as
package org.papervision3d.core.view{import org.papervision3d.core.render.data.RenderSessionData;/**
* @Author Ralph Hauwert
*/
public interface IViewport3D{public function updateBeforeRender (renderSessionData:RenderSessionData) : void;public function updateAfterRender (renderSessionData:RenderSessionData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\events\AnimationEvent.as
package org.papervision3d.events{import flash.events.Event;/**
* The AnimationEvent class represents events that are dispatched by the animation engine.
*/
public class AnimationEvent extends Event{public static const ANIMATION_COMPLETE : String;public static const ANIMATION_ERROR : String;public static const ANIMATION_NEXT_FRAME : String;public var currentFrame : uint;public var totalFrames : uint;public var message : String;public var dataObj : Object;public function AnimationEvent (type:String, currentFrame:uint, totalFrames:uint, message:String = "", dataObj:Object = null, bubbles:Boolean = false, cancelable:Boolean = false);public function clone () : Event;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\events\FileLoadEvent.as
package org.papervision3d.events{import flash.events.Event;/**
* The FileLoadEvent class represents events that are dispatched when files are loaded.
*/
public class FileLoadEvent extends Event{public static const LOAD_COMPLETE : String;public static const LOAD_ERROR : String;public static const SECURITY_LOAD_ERROR : String;public static const COLLADA_MATERIALS_DONE : String;public static const LOAD_PROGRESS : String;public static const ANIMATIONS_COMPLETE : String;public static const ANIMATIONS_PROGRESS : String;public var file : String;public var bytesLoaded : Number;public var bytesTotal : Number;public var message : String;public var dataObj : Object;public function FileLoadEvent (type:String, file:String = "", bytesLoaded:Number = -1, bytesTotal:Number = -1, message:String = "", dataObj:Object = null, bubbles:Boolean = false, cancelable:Boolean = false);public function clone () : Event;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\events\InteractiveScene3DEvent.as
package org.papervision3d.events{import flash.display.Sprite;import flash.events.Event;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.objects.DisplayObject3D;/**
* ...	* @author John Grden	* @version 0.1
*/
public class InteractiveScene3DEvent extends Event{/**
* Dispatched when a container in the ISM recieves a MouseEvent.CLICK event		* @eventType mouseClick
*/
public static const OBJECT_CLICK : String;/**
* Dispatched when a container in the ISM recieves a MouseEvent.CLICK event		* @eventType mouseClick
*/
public static const OBJECT_DOUBLE_CLICK : String;/**
* Dispatched when a container in the ISM receives an MouseEvent.MOUSE_OVER event		* @eventType mouseOver
*/
public static const OBJECT_OVER : String;/**
* Dispatched when a container in the ISM receives an MouseEvent.MOUSE_OUT event		* @eventType mouseOut
*/
public static const OBJECT_OUT : String;/**
* Dispatched when a container in the ISM receives a MouseEvent.MOUSE_MOVE event		* @eventType mouseMove
*/
public static const OBJECT_MOVE : String;/**
* Dispatched when a container in the ISM receives a MouseEvent.MOUSE_PRESS event		* @eventType mousePress
*/
public static const OBJECT_PRESS : String;/**
* Dispatched when a container in the ISM receives a MouseEvent.MOUSE_RELEASE event		* @eventType mouseRelease
*/
public static const OBJECT_RELEASE : String;/**
* Dispatched when the main container of the ISM is clicked		* @eventType mouseReleaseOutside
*/
public static const OBJECT_RELEASE_OUTSIDE : String;/**
* Dispatched when a container is created in the ISM for drawing and mouse interaction purposes		* @eventType objectAdded
*/
public static const OBJECT_ADDED : String;public var displayObject3D : DisplayObject3D;public var sprite : Sprite;public var face3d : Triangle3D;public var x : Number;public var y : Number;public var renderHitData : RenderHitData;public function InteractiveScene3DEvent (type:String, container3d:DisplayObject3D = null, sprite:Sprite = null, face3d:Triangle3D = null, x:Number = 0, y:Number = 0, renderhitData:RenderHitData = null, bubbles:Boolean = false, cancelable:Boolean = false);public function toString () : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\events\RendererEvent.as
package org.papervision3d.events{import flash.events.Event;import org.papervision3d.core.render.data.RenderSessionData;public class RendererEvent extends Event{public static const RENDER_DONE : String;public static const PROJECTION_DONE : String;public var renderSessionData : RenderSessionData;public function RendererEvent (type:String, renderSessionData:RenderSessionData);public function clear () : void;public function clone () : Event;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\lights\PointLight3D.as
package org.papervision3d.lights{import org.papervision3d.core.math.Number3D;import org.papervision3d.core.proto.LightObject3D;public class PointLight3D extends LightObject3D{public static var DEFAULT_POS : Number3D;/**
* Constructor.
		 * 
		 * @param	showLight	A Boolean value indicating whether the light is visible.
		 * @param	flipped		A Boolean value indicating whether to flip the light-direction (needed for correct DAE-shading).
*/
public function PointLight3D (showLight:Boolean = false, flipped:Boolean = false);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\BitmapAssetMaterial.as
package org.papervision3d.materials{import flash.display.BitmapData;import flash.utils.describeType;import flash.utils.getDefinitionByName;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.render.draw.ITriangleDrawer;/**
* The BitmapAssetMaterial class creates a texture from a Bitmap library symbol.	*	* Materials collects data about how objects appear when rendered.	*
*/
public class BitmapAssetMaterial extends BitmapMaterial implements ITriangleDrawer{private static var _library : Object;private static var _count : Object;/**
* A texture object.
*/
public function get texture () : Object;/**
* @private
*/
public function set texture (asset:Object) : Void;/**
* The BitmapAssetMaterial class creates a texture from a Bitmap library asset.		*		* @param	linkageID				The linkage name of the Bitmap symbol in the library.
*/
public function BitmapAssetMaterial (linkageID:String, precise:Boolean = false);/**
* [internal-use]		*		* @param	asset		* @return
*/
protected function createBitmapFromLinkageID (asset:String) : BitmapData;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\BitmapColorMaterial.as
package org.papervision3d.materials{import flash.display.BitmapData;import flash.display.Graphics;import flash.display.Sprite;import flash.geom.Matrix;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;public class BitmapColorMaterial extends BitmapMaterial implements ITriangleDrawer{private var uvMatrix : Matrix;private static const BITMAP_WIDTH : int;private static const BITMAP_HEIGHT : int;public function BitmapColorMaterial (color:Number = 0xFF00FF, alpha:Number = 1);private function init () : void;public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;private function createBitmapData () : void;private function createStaticUVMatrix () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\BitmapFileMaterial.as
package org.papervision3d.materials{import flash.display.Bitmap;import flash.display.BitmapData;import flash.display.Graphics;import flash.display.Loader;import flash.events.*;import flash.geom.Matrix;import flash.net.URLRequest;import flash.system.LoaderContext;import flash.utils.Dictionary;import flash.utils.Timer;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.events.FileLoadEvent;/**
* The BitmapFileMaterial class creates a texture by loading a bitmap from an external file.	*	* Materials collect data about how objects appear when rendered.
*/
public class BitmapFileMaterial extends BitmapMaterial implements ITriangleDrawer{/**
* The URL that has been requested.
*/
public var url : String;/**
* Whether or not the texture has been loaded.
*/
public var loaded : Boolean;/**
* Function to call when the last image has loaded.
*/
public static var callback : Function;/**
* The color to use in materials before loading has finished.
*/
public static var LOADING_COLOR : int;/**
* The color to use for the lines when there is an error.
*/
public static var ERROR_COLOR : int;/**
* A temporary bitmap to use if the file hasn't loaded yet.
*/
public static var loadingBitmap : BitmapData;/**
* Sets to check for the policy file or not.
*/
public var checkPolicyFile : Boolean;/**
* Internal		 * 		 * Used to define if the loading had failed.
*/
protected var errorLoading : Boolean;protected var bitmapLoader : Loader;protected static var _waitingBitmaps : Array;protected static var _loaderUrls : Dictionary;protected static var _bitmapMaterials : Dictionary;protected static var _subscribedMaterials : Object;protected static var _loadingIdle : Boolean;/**
* A texture object.
*/
public function get texture () : Object;/**
* @private
*/
public function set texture (asset:Object) : Void;public function get subscribedMaterials () : Object;public function get bitmapMaterials () : Dictionary;/**
* The BitmapFileMaterial class creates a texture by loading a bitmap from an external file.		*		* @param	url					The URL of the requested bitmap file.
*/
public function BitmapFileMaterial (url:String = "", precise:Boolean = false);/**
* [internal-use]		*		* @param	asset		* @return
*/
protected function createBitmapFromURL (asset:String) : BitmapData;private function queueBitmap (file:String) : void;protected function loadNextBitmap () : void;protected function loadBitmapErrorHandler (e:IOErrorEvent) : void;protected function loadBitmapProgressHandler (e:ProgressEvent) : void;protected function loadBitmapCompleteHandler (e:Event) : void;protected function setupAsyncLoadCompleteCallback () : void;protected function dispatchAsyncLoadCompleteEvent (e:TimerEvent) : void;protected function loadComplete () : void;protected function removeLoaderListeners () : void;/**
*  drawFace3D
*/
public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;protected function getBitmapForFilename (filename:String) : BitmapData;public function destroy () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\BitmapMaterial.as
package org.papervision3d.materials{import org.papervision3d.Papervision3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.material.TriangleMaterial;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.materials.utils.PrecisionMode;import org.papervision3d.materials.utils.RenderRecStorage;import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import flash.geom.Point;import flash.geom.Rectangle;import flash.utils.Dictionary;/**
* The BitmapMaterial class creates a texture from a BitmapData object.	*	* Materials collect data about how objects appear when rendered.	*
*/
public class BitmapMaterial extends TriangleMaterial implements ITriangleDrawer{protected static const DEFAULT_FOCUS : Number;protected static var hitRect : Rectangle;protected var renderRecStorage : Array;protected var focus : Number;protected var _precise : Boolean;protected var _precision : int;protected var _perPixelPrecision : int;public var minimumRenderSize : Number;protected var _texture : Object;/**
* Indicates if mip mapping is forced.
*/
public static var AUTO_MIP_MAPPING : Boolean;/**
* Levels of mip mapping to force.
*/
public static var MIP_MAP_DEPTH : Number;/**
* Precision mode indicates how triangles are created for precise texture render.
*/
public var precisionMode : int;public var uvMatrices : Dictionary;/**
* @private
*/
protected static var _triMatrix : Matrix;protected static var _triMap : Matrix;/**
* @private
*/
protected static var _localMatrix : Matrix;private var x0 : Number;private var y0 : Number;private var x1 : Number;private var y1 : Number;private var x2 : Number;private var y2 : Number;protected var ax : Number;protected var ay : Number;protected var az : Number;protected var bx : Number;protected var by : Number;protected var bz : Number;protected var cx : Number;protected var cy : Number;protected var cz : Number;protected var faz : Number;protected var fbz : Number;protected var fcz : Number;protected var mabz : Number;protected var mbcz : Number;protected var mcaz : Number;protected var mabx : Number;protected var maby : Number;protected var mbcx : Number;protected var mbcy : Number;protected var mcax : Number;protected var mcay : Number;protected var dabx : Number;protected var daby : Number;protected var dbcx : Number;protected var dbcy : Number;protected var dcax : Number;protected var dcay : Number;protected var dsab : Number;protected var dsbc : Number;protected var dsca : Number;protected var dmax : Number;protected var cullRect : Rectangle;protected var tempPreGrp : Graphics;protected var tempPreBmp : BitmapData;protected var tempPreRSD : RenderSessionData;protected var tempTriangleMatrix : Matrix;private var a2 : Number;private var b2 : Number;private var c2 : Number;private var d2 : Number;private var dx : Number;private var dy : Number;private var d2ab : Number;private var d2bc : Number;private var d2ca : Number;/**
* Sets the material's precise rendering mode. If set to true, material will adaptively render triangles to conquer texture distortion.
*/
public function set precise (boolean:Boolean) : Void;public function get precise () : Boolean;/**
* If the material is rendering with @see precise to true, this sets tesselation per pixel ratio.
*/
public function set precision (precision:int) : Void;public function get precision () : int;/**
* If the material is rendering with @see precise to true, this sets tesselation per pixel ratio.		 * 		 * corrected to set per pixel precision exactly.
*/
public function set pixelPrecision (precision:int) : Void;public function get pixelPrecision () : int;/**
* A texture object.
*/
public function get texture () : Object;/**
* @private
*/
public function set texture (asset:Object) : Void;/**
* The BitmapMaterial class creates a texture from a BitmapData object.		*		* @param	asset				A BitmapData object.
*/
public function BitmapMaterial (asset:BitmapData = null, precise:Boolean = false);protected function createRenderRecStorage () : void;/**
* Resets the mapping coordinates. Use when the texture has been resized.
*/
public function resetMapping () : void;/**
*  drawTriangle
*/
public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;/**
* Applies the updated UV texture mapping values to the triangle. This is required to speed up rendering.		*
*/
public function transformUV (face3D:Triangle3D) : Matrix;/**
* Applies the updated UV texture mapping values to the triangle. This is required to speed up rendering.		*
*/
public function transformUVRT (tri:RenderTriangle) : Matrix;protected function renderRec (emMap:Matrix, v0:Vertex3DInstance, v1:Vertex3DInstance, v2:Vertex3DInstance, index:Number) : void;/**
* Returns a string value representing the material properties in the specified BitmapMaterial object.		*		* @return	A string.
*/
public function toString () : String;protected function createBitmap (asset:BitmapData) : BitmapData;protected function correctBitmap (bitmap:BitmapData) : BitmapData;protected function extendBitmapEdges (bmp:BitmapData, originalWidth:Number, originalHeight:Number) : void;/**
* resetUVMatrices();		 * 		 * Resets the precalculated uvmatrices, so they can be recalculated
*/
public function resetUVS () : void;/**
* Copies the properties of a material.		*		* @param	material	Material to copy from.
*/
public function copy (material:MaterialObject3D) : void;/**
* Creates a copy of the material.		*		* @return	A newly created material that contains the same properties.
*/
public function clone () : MaterialObject3D;public function destroy () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\BitmapViewportMaterial.as
package org.papervision3d.materials{import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.view.BitmapViewport3D;public class BitmapViewportMaterial extends BitmapMaterial implements ITriangleDrawer{public function BitmapViewportMaterial (bitmapViewport:BitmapViewport3D, precise:Boolean = false);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\BitmapWireframeMaterial.as
package org.papervision3d.materials{import flash.display.BitmapData;import flash.display.Graphics;import flash.display.Sprite;import flash.geom.Matrix;import org.papervision3d.core.material.TriangleMaterial;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;public class BitmapWireframeMaterial extends TriangleMaterial implements ITriangleDrawer{private static const BITMAP_WIDTH : int;private static const BITMAP_HEIGHT : int;private var uvMatrix : Matrix;protected static var _triMatrix : Matrix;protected static var _localMatrix : Matrix;public function BitmapWireframeMaterial (color:Number = 0xFF00FF, alpha:Number = 1, thickness:Number = 3);private function init () : void;public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;private function createBitmapData () : void;private function createStaticUVMatrix () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\ColorMaterial.as
package org.papervision3d.materials{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.material.TriangleMaterial;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;/**
* The ColorMaterial class creates a solid color material.** Materials collects data about how objects appear when rendered.*
*/
public class ColorMaterial extends TriangleMaterial implements ITriangleDrawer{/**
* The ColorMaterial class creates a solid color material.	*	* @param	asset				A BitmapData object.
*/
public function ColorMaterial (color:Number = 0xFF00FF, alpha:Number = 1, interactive:Boolean = false);/**
*  drawTriangle
*/
public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;/**
* Returns a string value representing the material properties in the specified ColorMaterial object.	*	* @return	A string.
*/
public function toString () : String;public function clone () : MaterialObject3D;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\MovieAssetMaterial.as
package org.papervision3d.materials{import flash.display.MovieClip;import flash.display.Sprite;import flash.utils.getDefinitionByName;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.render.draw.ITriangleDrawer;/**
* The MovieAssetMaterial class creates a texture from a MovieClip library symbol.
	* <p/>
	* The texture can be animated and/or transparent.
	* <p/>
	* The MovieClip's content needs to be top left aligned with the registration point.
	* <p/>
	* Materials collects data about how objects appear when rendered.
*/
public class MovieAssetMaterial extends MovieMaterial implements ITriangleDrawer{private static var _library : Object;private static var _count : Object;/**
* By default, a MovieAssetMaterial is stored and resused, but there are times where a user may want a unique copy.  set to true if you want a unique instance
		 * created
*/
public var createUnique : Boolean;/**
* A texture object.
*/
public function get texture () : Object;/**
* @private
*/
public function set texture (asset:Object) : Void;/**
* The MovieAssetMaterial class creates a texture from a MovieClip library id.
		*
		* @param	linkageID			The linkage name of the MovieClip symbol in the library.
		* @param	transparent			[optional] - If it's not transparent, the empty areas of the MovieClip will be of fill32 color. Default value is false.
*/
public function MovieAssetMaterial (linkageID:String = "", transparent:Boolean = false, animated:Boolean = false, createUnique:Boolean = false, precise:Boolean = false);/**
* since we need to pass a movieclip reference to MovieMaterial, I changed this method
		* from createBitmap, to createMovie.  the super's constructor will take care of
		* creating the actual bitmap reference
		*
*/
protected function createMovie (asset:*) : MovieClip;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\MovieMaterial.as
package org.papervision3d.materials{import flash.display.BitmapData;import flash.display.DisplayObject;import flash.display.Graphics;import flash.display.Stage;import flash.geom.Matrix;import flash.geom.Rectangle;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.core.render.material.IUpdateAfterMaterial;import org.papervision3d.core.render.material.IUpdateBeforeMaterial;/**
* The MovieMaterial class creates a texture from an existing MovieClip instance.
	* <p/>
	* The texture can be animated and/or transparent. Current scale and color values of the MovieClip instance will be used. Rotation will be discarded.
	* <p/>
	* Materials collects data about how objects appear when rendered.
*/
public class MovieMaterial extends BitmapMaterial implements ITriangleDrawer{protected var recreateBitmapInSuper : Boolean;private var materialIsUsed : Boolean;/**
* The MovieClip that is used as a texture.
*/
public var movie : DisplayObject;/**
* A Boolean value that determines whether the MovieClip is transparent. The default value is false, which is much faster.
*/
public var movieTransparent : Boolean;/**
* When updateBitmap() is called on an animated material, it looks to handle a change in size on the texture.
		* 
		* This is true by default, but in certain situations, like drawing on an object, you wouldn't want the size to change
*/
public var allowAutoResize : Boolean;private var userClipRect : Rectangle;private var autoClipRect : Rectangle;private var movieAnimated : Boolean;private var quality : String;private var stage : Stage;/**
* A Boolean value that determines whether the texture is animated.
		*
		* If set, the material must be included into the scene so the BitmapData texture can be updated when rendering. For performance reasons, the default value is false.
*/
public function get animated () : Boolean;public function set animated (status:Boolean) : Void;/**
* A texture object.
*/
public function get texture () : Object;/**
* @private
*/
public function set texture (asset:Object) : Void;/**
*  Rectangle object that defines the area of the source object to draw.
		*  
		*  When present, this property defines bitmap size overriding allowAutoResize.
		*
		*  If you do not supply this value, no clipping occurs and the entire source object is drawn.
		*
*/
public function get rect () : Rectangle;public function set rect (clipRect:Rectangle) : Void;/**
* The MovieMaterial class creates a texture from an existing MovieClip instance.
		*
		* @param	movieAsset		A reference to an existing MovieClip loaded into memory or on stage
		* @param	transparent		[optional] - If it's not transparent, the empty areas of the MovieClip will be of fill32 color. Default value is false.
		* @param	animated		[optional] - a flag setting whether or not this material has animation.  If set to true, it will be updated during each render loop
*/
public function MovieMaterial (movieAsset:DisplayObject = null, transparent:Boolean = false, animated:Boolean = false, precise:Boolean = false, rect:Rectangle = null);/**
* 
		* @param	asset
		* @return
*/
protected function createBitmapFromSprite (asset:DisplayObject) : BitmapData;protected function initBitmap (asset:DisplayObject) : void;public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;/**
* Updates animated MovieClip bitmap.
		*
		* Draws the current MovieClip image onto bitmap.
*/
public function updateBeforeRender (renderSessionData:RenderSessionData) : void;public function updateAfterRender (renderSessionData:RenderSessionData) : void;public function drawBitmap () : void;/**
* Specifies which rendering quality Flash Player uses when drawing the bitmap texture from the movie asset.
		* 
		* If not set, bitmaps are drawn using the current stage quality setting.
*/
public function setQuality (quality:String, stage:Stage, updateNow:Boolean = true) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\VideoStreamMaterial.as
package org.papervision3d.materials{import flash.display.DisplayObject;import flash.events.NetStatusEvent;import flash.geom.Matrix;import flash.media.Video;import flash.net.NetStream;import org.papervision3d.core.render.draw.ITriangleDrawer;/**
* The VideoMaterial class creates a texture from an existing Video instance and is for use with a Video and NetStream objects with an RTMP stream.	* <p/>	* The texture can be animated and/or transparent.	* <p/>	* Materials collects data about how objects appear when rendered.
*/
public class VideoStreamMaterial extends MovieMaterial implements ITriangleDrawer{/**
* The NetStream and Vdeo that are used as a texture.
*/
public var stream : NetStream;public var video : Video;/**
* The MovieMaterial class creates a texture from an existing Video instance.		*		* @param	video			A video object that display the FLV file		* @param	stream			Stream that is used to play the FLV file		* @param 	transparent		Whether we're using a transparent video or not.
*/
public function VideoStreamMaterial (video:Video, stream:NetStream, precise:Boolean = false, transparent:Boolean = false);/**
* Executes when the VideoMaterial is instantiated
*/
private function initMaterial (video:Video, stream:NetStream) : void;/**
* Updates Video Bitmap		*		* Draws the current Video frame onto bitmap.
*/
public function updateBitmap () : void;/**
* Executes when the status of the NetStream object changes		*		* @param Event that invoked the handler
*/
private function onStreamStatus (event:NetStatusEvent) : void;/**
* Returns a string value representing the material properties in the specified VideoMaterial object.		*		* @return	A string.
*/
public function toString () : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\WireframeMaterial.as
package org.papervision3d.materials{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.material.TriangleMaterial;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;/**
* The WireframeMaterial class creates a wireframe material, where only the outlines of the faces are drawn.	* <p/>	* Materials collects data about how objects appear when rendered.
*/
public class WireframeMaterial extends TriangleMaterial implements ITriangleDrawer{/**
* The WireframeMaterial class creates a wireframe material, where only the outlines of the faces are drawn.		*		* @param	asset				A BitmapData object.
*/
public function WireframeMaterial (color:Number = 0xFF00FF, alpha:Number = 1, thickness:Number = 0);/**
*  drawTriangle
*/
public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;/**
* Returns a string value representing the material properties in the specified WireframeMaterial object.		*		* @return	A string.
*/
public function toString () : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shadematerials\CellMaterial.as
package org.papervision3d.materials.shadematerials{import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.materials.utils.LightMaps;/**
* @Author Ralph Hauwert
*/
public class CellMaterial extends EnvMapMaterial{public function CellMaterial (light:LightObject3D, color_1:int, color_2:int, steps:int);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shadematerials\EnvMapMaterial.as
package org.papervision3d.materials.shadematerials{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.material.AbstractSmoothShadeMaterial;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;/**
* @Author Ralph Hauwert
*/
public class EnvMapMaterial extends AbstractSmoothShadeMaterial implements ITriangleDrawer{private static var p0 : Number;private static var q0 : Number;private static var p1 : Number;private static var q1 : Number;private static var p2 : Number;private static var q2 : Number;private static var v0 : Vertex3DInstance;private static var v1 : Vertex3DInstance;private static var v2 : Vertex3DInstance;private static var x1 : Number;private static var x0 : Number;private static var x2 : Number;private static var y0 : Number;private static var y1 : Number;private static var y2 : Number;protected var lightmapHalfheight : Number;protected var lightmapHalfwidth : Number;public var _lightMap : BitmapData;public var backenvmap : BitmapData;/**
* Localized stuff.
*/
private static var useMap : BitmapData;public function set lightMap (lightMap:BitmapData) : Void;public function get lightMap () : BitmapData;public function EnvMapMaterial (light:LightObject3D, lightMap:BitmapData, backEnvMap:BitmapData = null, ambientColor:int = 0);public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shadematerials\FlatShadeMaterial.as
package org.papervision3d.materials.shadematerials{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.material.AbstractLightShadeMaterial;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.materials.utils.LightMaps;/**
*	@Author Ralph Hauwert
*/
public class FlatShadeMaterial extends AbstractLightShadeMaterial implements ITriangleDrawer{private static var currentColor : int;private static var zAngle : int;protected var _colors : Array;/**
* Localized stuff.
*/
private static var zd : Number;private static var x0 : Number;private static var y0 : Number;public function FlatShadeMaterial (light:LightObject3D, lightColor:uint = 0xffffff, ambientColor:uint = 0x000000, specularLevel:uint = 0);public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shadematerials\GouraudMaterial.as
package org.papervision3d.materials.shadematerials{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.material.AbstractSmoothShadeMaterial;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.core.render.material.IUpdateBeforeMaterial;import org.papervision3d.materials.utils.LightMaps;/**
* @Author Ralph Hauwert
*/
public class GouraudMaterial extends AbstractSmoothShadeMaterial implements ITriangleDrawer{private var gouraudMap : BitmapData;public function GouraudMaterial (light:LightObject3D, lightColor:uint = 0xFFFFFF, ambientColor:uint = 0x000000, specularLevel:uint = 0);public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shadematerials\PhongMaterial.as
package org.papervision3d.materials.shadematerials{import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.materials.utils.LightMaps;/**
* @Author Ralph Hauwert
*/
public class PhongMaterial extends EnvMapMaterial{public function PhongMaterial (light:LightObject3D, lightColor:uint, ambientColor:uint, specularLevel:uint);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\CellShader.as
package org.papervision3d.materials.shaders{import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.materials.utils.LightMaps;/**
*@Author Ralph Hauwert
*/
public class CellShader extends EnvMapShader{public function CellShader (light:LightObject3D, color_1:int = 0xFFFFFF, color_2:int = 0x000000, steps:int = 3);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\EnvMapShader.as
package org.papervision3d.materials.shaders{import flash.display.BitmapData;import flash.display.BitmapDataChannel;import flash.display.Graphics;import flash.display.Sprite;import flash.filters.DisplacementMapFilter;import flash.filters.DisplacementMapFilterMode;import flash.geom.Matrix;import flash.geom.Point;import flash.geom.Rectangle;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.shader.ShaderObjectData;import org.papervision3d.materials.utils.BumpmapGenerator;/**
* @Author Ralph Hauwert
*/
public class EnvMapShader extends LightShader implements IShader{protected var lightmapHalfwidth : Number;protected var lightmapHalfheight : Number;private var dFilter : DisplacementMapFilter;private var _envMap : BitmapData;private var _backEnvMap : BitmapData;private var _specularMap : BitmapData;private var _bumpMap : BitmapData;private var _ambientColor : int;private static var mapOrigin : Point;private static var origin : Point;private static var triMatrix : Matrix;private static var transformMatrix : Matrix;private static var light : Number3D;private static var p0 : Number;private static var q0 : Number;private static var p1 : Number;private static var q1 : Number;private static var p2 : Number;private static var q2 : Number;private static var v0 : Vertex3DInstance;private static var v1 : Vertex3DInstance;private static var v2 : Vertex3DInstance;private static var currentGraphics : Graphics;private static var v0x : Number;private static var v0y : Number;private static var v0z : Number;private static var v1x : Number;private static var v1y : Number;private static var v1z : Number;private static var v2x : Number;private static var v2y : Number;private static var v2z : Number;private static var sod : ShaderObjectData;private static var n0 : Number3D;private static var n1 : Number3D;private static var n2 : Number3D;private static var r : Rectangle;private static var lm : Matrix3D;/**
* Localized stuff.
*/
private static var useMap : BitmapData;private static var ts : Sprite;public function set bumpmap (bumpmap:BitmapData) : Void;public function get bumpmap () : BitmapData;public function set envMap (lightMap:BitmapData) : Void;public function get envMap () : BitmapData;public function set specularMap (specularMap:BitmapData) : Void;public function get specularMap () : BitmapData;public function set ambientColor (ambient:int) : Void;public function get ambientColor () : int;public function set backenvmap (envmap:BitmapData) : Void;public function get backenvmap () : BitmapData;public function EnvMapShader (light:LightObject3D, envmap:BitmapData, backenvmap:BitmapData = null, ambientColor:int = 0x000000, bumpMap:BitmapData = null, specularMap:BitmapData = null);public function renderLayer (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;public function renderTri (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData, bmp:BitmapData) : void;public function updateAfterRender (renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\FlatShader.as
package org.papervision3d.materials.shaders{import flash.display.BitmapData;import flash.display.Graphics;import flash.display.Sprite;import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.shader.ShaderObjectData;import org.papervision3d.materials.utils.LightMaps;/**
* @Author Ralph Hauwert
*/
public class FlatShader extends LightShader implements IShader{private static var triMatrix : Matrix;private static var currentGraphics : Graphics;private static var zAngle : Number;private static var currentColor : int;private static var vx : Number;private static var vy : Number;private static var vz : Number;public var lightColor : int;public var ambientColor : int;public var specularLevel : int;private var _colors : Array;private var _colorRamp : BitmapData;/**
* Localized vars
*/
private static var zd : Number;private static var lightMatrix : Matrix3D;private static var sod : ShaderObjectData;/**
*Localized var
*/
public static var scaleMatrix : Matrix;public function FlatShader (light:LightObject3D, lightColor:int = 0xFFFFFF, ambientColor:int = 0x000000, specularLevel:int = 0);public function renderLayer (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;public function renderTri (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData, bmp:BitmapData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\GouraudShader.as
package org.papervision3d.materials.shaders{import flash.display.BitmapData;import flash.display.Graphics;import flash.display.Sprite;import flash.geom.Matrix;import flash.geom.Rectangle;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.shader.ShaderObjectData;import org.papervision3d.materials.utils.LightMaps;/**
* @Author Ralph Hauwert
*/
public class GouraudShader extends LightShader{private var _ambientColor : int;private var gouraudMap : BitmapData;private static var triMatrix : Matrix;private static var transformMatrix : Matrix;private static var light : Number3D;private static var p0 : Number;private static var q0 : Number;private static var p1 : Number;private static var q1 : Number;private static var p2 : Number;private static var q2 : Number;private static var v0 : Vertex3DInstance;private static var v1 : Vertex3DInstance;private static var v2 : Vertex3DInstance;private static var currentGraphics : Graphics;/**
* Localized vars
*/
private var lightMatrix : Matrix3D;private static var ts : Sprite;public function set ambientColor (ambient:int) : Void;public function get ambientColor () : int;public function GouraudShader (light:LightObject3D, lightColor:uint = 0xFFFFFF, ambientColor:uint = 0x000000, specularLevel:uint = 0);public function renderLayer (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;public function renderTri (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData, bmp:BitmapData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\ILightShader.as
package org.papervision3d.materials.shaders{import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.shader.ShaderObjectData;public interface ILightShader{public function updateLightMatrix (sod:ShaderObjectData, renderSessionData:RenderSessionData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\IShader.as
package org.papervision3d.materials.shaders{import flash.display.BitmapData;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.shader.ShaderObjectData;/**
* @Author Ralph Hauwert
*/
public interface IShader{public function renderLayer (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;public function renderTri (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData, bmp:BitmapData) : void;public function updateAfterRender (renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;public function destroy () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\LightShader.as
package org.papervision3d.materials.shaders{import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.shader.ShaderObjectData;import org.papervision3d.materials.utils.LightMatrix;/**
* @Author Ralph Hauwert
*/
public class LightShader extends Shader implements IShader{private var _light : LightObject3D;public function set light (light:LightObject3D) : Void;public function get light () : LightObject3D;public function LightShader ();public function updateLightMatrix (sod:ShaderObjectData, renderSessionData:RenderSessionData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\PhongShader.as
package org.papervision3d.materials.shaders{import flash.display.BitmapData;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.materials.utils.LightMaps;/**
*	@Author Ralph Hauwert
*/
public class PhongShader extends EnvMapShader{public function PhongShader (light:LightObject3D, lightColor:int, ambientColor:int = 0x000000, specularLevel:int = 0, bumpMap:BitmapData = null, specularMap:BitmapData = null);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\ShadedMaterial.as
package org.papervision3d.materials.shaders{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import flash.utils.Dictionary;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.material.TriangleMaterial;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.core.render.material.IUpdateAfterMaterial;import org.papervision3d.core.render.material.IUpdateBeforeMaterial;import org.papervision3d.core.render.shader.ShaderObjectData;import org.papervision3d.materials.BitmapMaterial;import org.papervision3d.objects.DisplayObject3D;/**
* @Author Ralph Hauwert
*/
public class ShadedMaterial extends TriangleMaterial implements ITriangleDrawer{private var _shaderCompositeMode : int;public var shader : Shader;public var material : BitmapMaterial;public var shaderObjectData : Dictionary;/**
* Localized vars
*/
private static var bmp : BitmapData;public function set shaderCompositeMode (compositeMode:int) : Void;public function get shaderCompositeMode () : int;public function ShadedMaterial (material:BitmapMaterial, shader:Shader, compositeMode:int = 0);private function init () : void;public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;public function updateBeforeRender (renderSessionData:RenderSessionData) : void;public function updateAfterRender (renderSessionData:RenderSessionData) : void;public function registerObject (displayObject3D:DisplayObject3D) : void;public function unregisterObject (displayObject3D:DisplayObject3D) : void;/**
* Debug thingy.
*/
public function getOutputBitmapDataFor (object:DisplayObject3D) : BitmapData;public function destroy () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\Shader.as
package org.papervision3d.materials.shaders{import flash.display.BitmapData;import flash.display.BlendMode;import flash.display.Sprite;import flash.events.EventDispatcher;import flash.filters.BitmapFilter;import flash.utils.Dictionary;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.shader.ShaderObjectData;import org.papervision3d.objects.DisplayObject3D;/**
* @Author Ralph Hauwert
*/
public class Shader extends EventDispatcher implements IShader{protected var _filter : BitmapFilter;protected var _blendMode : String;protected var _object : DisplayObject3D;protected var layers : Dictionary;public function set filter (filter:BitmapFilter) : Void;public function get filter () : BitmapFilter;public function set layerBlendMode (blendMode:String) : Void;public function get layerBlendMode () : String;public function Shader ();public function renderLayer (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;public function renderTri (triangle:Triangle3D, renderSessionData:RenderSessionData, sod:ShaderObjectData, bmp:BitmapData) : void;public function destroy () : void;public function setContainerForObject (object:DisplayObject3D, layer:Sprite) : void;public function updateAfterRender (renderSessionData:RenderSessionData, sod:ShaderObjectData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\shaders\ShaderCompositeModes.as
package org.papervision3d.materials.shaders{/**
* @Author Ralph Hauwert
*/
public class ShaderCompositeModes{public static var PER_LAYER : int;public static var PER_TRIANGLE_IN_BITMAP : int;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\BitmapParticleMaterial.as
package org.papervision3d.materials.special{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import flash.geom.Rectangle;import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.math.Number2D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.util.FastRectangleTools;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.IParticleDrawer;/**
* A Particle material that is made from BitmapData object
	 * 
	 * @author Ralph Hauwert
 	 * @author Seb Lee-Delisle
*/
public class BitmapParticleMaterial extends ParticleMaterial implements IParticleDrawer{private var renderRect : Rectangle;public var particleBitmap : ParticleBitmap;/**
* 
		 * @param bitmap	The BitmapData object to make the material from. 
		 *
*/
public function BitmapParticleMaterial (bitmap:*, scale:Number = 1, offsetx:Number = 0, offsety:Number = 0);/**
* Draws the particle as part of the render cycle. 
		 *  
		 * @param particle			The particle we're drawing
		 * @param graphics			The graphics object we're drawing into
		 * @param renderSessionData	The renderSessionData for this render cycle.
		 *
*/
public function drawParticle (particle:Particle, graphics:Graphics, renderSessionData:RenderSessionData) : void;/**
* This is called during the projection cycle. It updates the rectangular area that 
		 * the particle is drawn into. It's important for the culling phase. 
		 *  
		 * @param particle	The particle whose renderRect we're updating. 
		 *
*/
public function updateRenderRect (particle:Particle) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\CompositeMaterial.as
package org.papervision3d.materials.special{import flash.display.BitmapData;import flash.display.Graphics;import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.material.TriangleMaterial;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.command.RenderTriangle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ITriangleDrawer;import org.papervision3d.objects.DisplayObject3D;public class CompositeMaterial extends TriangleMaterial implements ITriangleDrawer{public var materials : Array;public function CompositeMaterial ();private function init () : void;public function addMaterial (material:MaterialObject3D) : void;public function removeMaterial (material:MaterialObject3D) : void;public function removeAllMaterials () : void;public function registerObject (displayObject3D:DisplayObject3D) : void;public function unregisterObject (displayObject3D:DisplayObject3D) : void;public function drawTriangle (tri:RenderTriangle, graphics:Graphics, renderSessionData:RenderSessionData, altBitmap:BitmapData = null, altUV:Matrix = null) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\FogMaterial.as
package org.papervision3d.materials.special{import flash.display.Graphics;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.view.Viewport3D;public class FogMaterial{public var color : uint;public var alpha : Number;public function FogMaterial (color:uint = 0);public function draw (renderSessionData:RenderSessionData, graphics:Graphics, alpha:Number) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\Letter3DMaterial.as
package org.papervision3d.materials.special{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.objects.special.VectorShape3D;import org.papervision3d.objects.special.commands.CurveTo;import org.papervision3d.objects.special.commands.LineTo;import org.papervision3d.objects.special.commands.MoveTo;import flash.display.Graphics;/**
* @author Mark Barcinski
*/
public class Letter3DMaterial extends VectorShapeMaterial{public var scaleStroke : Boolean;private static var viewVector : Number3D;private static var normalVector : Number3D;public function Letter3DMaterial (fillColor:uint = 0xFF00FF, fillAlpha:Number = 1);public function drawShape (vectorShape:VectorShape3D, graphics:Graphics, renderSessionData:RenderSessionData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\LineMaterial.as
package org.papervision3d.materials.special{import flash.display.Graphics;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.command.RenderLine;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.ILineDrawer;public class LineMaterial extends MaterialObject3D implements ILineDrawer{public function LineMaterial (color:Number = 0xFF0000, alpha:Number = 1);public function drawLine (line:RenderLine, graphics:Graphics, renderSessionData:RenderSessionData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\MovieAssetParticleMaterial.as
package org.papervision3d.materials.special{import flash.utils.Dictionary;import flash.utils.getDefinitionByName;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.render.draw.IParticleDrawer;/**
* @author Seb Lee-Delisle	 * 	 * version 0.1 of MovieAssetParticleMaterial that uses a reference to a	 * library symbol to create a particle.	 *
*/
public class MovieAssetParticleMaterial extends MovieParticleMaterial implements IParticleDrawer{public static var movieLibrary : Dictionary;private var movieAsset : Class;/**
* A Particle material that is made from a single DisplayObject (Sprite, MovieClip, etc) or a		 * Class that extends a DisplayObject (ie a library symbol)		 * 		 * v0.1 - TODO implement reusable assets in the same way as MovieAssetMaterial		 * 		 * @param linkageID		The Library symbol to make the material out of.		 * @param transparent	[optional] - whether the image is transparent or not		 * @param animated		[optional] If true, then the bitmap updates every frame. 		 * @param forceMipMap	If true, we'll make a bitmap that scales up or down to 		 * 						the nearest mip-map-able size. Thus making your particles 		 * 						appear smoother. 		 *
*/
public function MovieAssetParticleMaterial (classRef:*, transparent:Boolean = true, animated:Boolean = false);public function destroy () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\MovieParticleMaterial.as
package org.papervision3d.materials.special{import flash.display.DisplayObject;import flash.utils.Dictionary;import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.material.IUpdateBeforeMaterial;/**
* @author Seb Lee-Delisle
	 * 
	 * version 0.1 of MovieAssetParticleMaterial that uses a reference to a
	 * library symbol to create a particle.
	 *
*/
public class MovieParticleMaterial extends BitmapParticleMaterial implements IUpdateBeforeMaterial{public static var bitmapLibrary : Dictionary;/**
* The MovieClip that is used as a texture.
*/
public var movie : DisplayObject;/**
* A Boolean value that determines whether the MovieClip is transparent. The default value is true, which, 
		* although slower, is usually what you need for particles.
*/
public var movieTransparent : Boolean;public var animated : Boolean;public var actualSize : Boolean;/**
* A Particle material that is made from a single DisplayObject (Sprite, MovieClip, etc) or a
		 * Class that extends a DisplayObject (ie a library symbol)
		 * 
		 * v0.1 - TODO implement reusable assets in the same way as MovieAssetMaterial
		 * 
		 * @param linkageID		The Library symbol to make the material out of.
		 * @param transparent	[optional] - whether the image is transparent or not
		 * @param animated		[optional] NOT IMPLEMENTED YET! Please do not use!
		 * @param createUnique	If true, we'll make a bitmap especially for use with this instance of the material, otherwise we'll use a cached version (if there is one)
		 *
*/
public function MovieParticleMaterial (displayobject:DisplayObject, transparent:Boolean = true, animated:Boolean = false);public function updateParticleBitmap (scale:Number = 1, posX:Number = 0, posY:Number = 0) : void;public function updateRenderRect (particle:Particle) : void;public function updateBeforeRender (renderSessionData:RenderSessionData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\ParticleBitmap.as
package org.papervision3d.materials.special{import flash.display.BitmapData;import flash.display.DisplayObject;import flash.display.Sprite;import flash.geom.Matrix;import flash.geom.Rectangle;import org.papervision3d.core.log.PaperLogger;/**
* Used to store the bitmap for a particle material. It also stores scale and offsets for moving the registration point of the bitmap. 
	 * 
	 * @author Seb Lee-Delisle
*/
public class ParticleBitmap{public var offsetX : Number;public var offsetY : Number;public var scaleX : Number;public var scaleY : Number;public var bitmap : BitmapData;public var width : int;public var height : int;private static var drawMatrix : Matrix;private static var tempSprite : Sprite;public function ParticleBitmap (source:* = null, scale:Number = 1, forceMipMap:Boolean = false, transparent:Boolean = true);public function create (clip:DisplayObject, scale:Number = 1, transparent:Boolean = true) : BitmapData;public function createExact (clip:DisplayObject, posX:Number = 1, posY:Number = 1, scaleX:Number = 1, scaleY:Number = 1, rotation:Number = 0) : BitmapData;/**
* rounds up to the nearest MIPMAP-able size to the value you pass in. 
		 * 
		 * Kudos to Jack Lang for writing this optimised function. 
		 * 
		 * 
		 *
*/
protected function roundUpToMipMap (val:Number) : uint;/**
* Finds the nearest MIPMAP-able size to the value you pass in. 
		 * 
		 * Kudos to Jack Lang for writing this optimised function. 
		 * 
		 * 
		 *
*/
protected function getNearestMipMapSize (val:Number) : uint;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\ParticleMaterial.as
package org.papervision3d.materials.special{import flash.display.Graphics;import flash.geom.Rectangle;import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.draw.IParticleDrawer;/**
* @Author Ralph Hauwert
	 * 
	 * updated by Seb Lee-Delisle 
	 *  - added size implementation
	 *  - added rectangle of particle for smart culling and drawing
	 *
*/
public class ParticleMaterial extends MaterialObject3D implements IParticleDrawer{public static var SHAPE_SQUARE : int;public static var SHAPE_CIRCLE : int;public var shape : int;public var scale : Number;public function ParticleMaterial (color:Number, alpha:Number, shape:int = 0, scale:Number = 1);public function drawParticle (particle:Particle, graphics:Graphics, renderSessionData:RenderSessionData) : void;public function updateRenderRect (particle:Particle) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\special\VectorShapeMaterial.as
package org.papervision3d.materials.special{import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.special.VectorShape3D;import org.papervision3d.objects.special.commands.IVectorShape;import flash.display.Graphics;/**
* @author Mark Barcinski
*/
public class VectorShapeMaterial extends MaterialObject3D{public function VectorShapeMaterial ();public function drawShape (vectorShape:VectorShape3D, graphics:Graphics, renderSessionData:RenderSessionData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\utils\BitmapMaterialTools.as
package org.papervision3d.materials.utils{import flash.display.Bitmap;import flash.display.BitmapData;import flash.geom.Matrix;import org.papervision3d.materials.BitmapMaterial;public class BitmapMaterialTools{public static function createBitmapMaterial (bitmapClass:Class, oneSided:Boolean = true) : BitmapMaterial;public static function getTexture (bitmapClass:Class) : BitmapData;/**
* Mirrors the bitmap over its X axis		 * 		 * @param	bitmap The bitmap to mirror.
*/
public static function mirrorBitmapX (bitmap:BitmapData) : void;/**
* Mirrors the bitmap over its Y axis		 * 		 * @param	bitmap The bitmap to mirror.
*/
public static function mirrorBitmapY (bitmap:BitmapData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\utils\BumpmapGenerator.as
package org.papervision3d.materials.utils{import flash.display.BitmapData;import flash.filters.ConvolutionFilter;import flash.geom.Point;public class BumpmapGenerator{public static function generateBumpmapFrom (bitmapData:BitmapData) : BitmapData;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\utils\LightMaps.as
package org.papervision3d.materials.utils{import flash.display.BitmapData;import flash.display.GradientType;import flash.display.Sprite;import flash.filters.BlurFilter;import flash.geom.Matrix;import flash.geom.Point;/**
* @Author Ralph Hauwert
*/
public class LightMaps{private static var origin : Point;public static function getFlatMapArray (lightColor:uint, ambientColor:uint, specularLevel:uint) : Array;public static function getFlatMap (lightColor:uint, ambientColor:uint, specularLevel:uint) : BitmapData;public static function getPhongMap (lightColor:uint, ambientColor:uint, specularLevel:uint, height:int = 255, width:int = 255) : BitmapData;public static function getGouraudMap (lightColor:uint, ambientColor:uint, specularLevel:uint) : BitmapData;public static function getGouraudMaterialMap (lightColor:uint, ambientColor:uint, specularLevel:uint) : BitmapData;public static function getCellMap (color_1:uint, color_2:uint, steps:int) : BitmapData;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\utils\LightMatrix.as
package org.papervision3d.materials.utils{import org.papervision3d.Papervision3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.proto.LightObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.lights.PointLight3D;import org.papervision3d.objects.DisplayObject3D;/**
* @Author Tim Knip / Ralph Hauwert
*/
public class LightMatrix{private static var lightMatrix : Matrix3D;private static var invMatrix : Matrix3D;private static var _targetPos : Number3D;private static var _lightPos : Number3D;private static var _lightDir : Number3D;private static var _lightUp : Number3D;private static var _lightSide : Number3D;protected static var UP : Number3D;/**
* Gets the 'lightmatrix' for a light and object.
		 * 
		 * @param	light
		 * @param	object
		 * @return
*/
public static function getLightMatrix (light:LightObject3D, object:DisplayObject3D, renderSessionData:RenderSessionData, objectLightMatrix:Matrix3D) : Matrix3D;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\utils\MaterialsList.as
package org.papervision3d.materials.utils{import flash.utils.Dictionary;import org.papervision3d.core.proto.*;/**
* The MaterialsList class contains a list of materials.	* <p/>	* Each MaterialsList object has its own materials list.
*/
public class MaterialsList{/**
* [internal-use] List of materials.
*/
protected var _materials : Dictionary;private var _materialsTotal : int;/**
* List of materials indexed by name.
*/
public var materialsByName : Dictionary;/**
* Returns the number of children of this object.
*/
public function get numMaterials () : int;/**
* Creates a list of materials.		*		* @param	materials	An array or name indexed object with materials to populate the list with.
*/
public function MaterialsList (materials:* = null);/**
* Adds a material to this MaterialsList object.		*		* @param	material	The material to add.		* @param	name		An optional name of the material. If no name is provided, the material name will be used.		* @return	The material you have added.
*/
public function addMaterial (material:MaterialObject3D, name:String = null) : MaterialObject3D;/**
* Removes the specified material from the materials list.		*		* @param	material	The material to remove.		* @return	The material you have removed.
*/
public function removeMaterial (material:MaterialObject3D) : MaterialObject3D;/**
* Returns the material that exists with the specified name.		* </p>		* @param	name	The name of the material to return.		* @return	The material with the specified name.
*/
public function getMaterialByName (name:String) : MaterialObject3D;/**
* Removes the material that exists with the specified name.		* </p>		* The material object is garbage collected if no other references to the material exist.		* </p>		* The garbage collector is the process by which Flash Player reallocates unused memory space. When a variable or object is no longer actively referenced or stored somewhere, the garbage collector sweeps through and wipes out the memory space it used to occupy if no other references to it exist.		* </p>		* @param	name	The name of the material to remove.		* @return	The material object that was removed.
*/
public function removeMaterialByName (name:String) : MaterialObject3D;/**
* Creates a copy of the materials list.		*		* @return	A newly created materials list that contains a duplicate of each of its materials.
*/
public function clone () : MaterialsList;/**
* Returns a string with the names of the materials in the list.		*		* @return	A string.
*/
public function toString () : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\utils\PrecisionMode.as
package org.papervision3d.materials.utils{/**
* @Author Ralph Hauwert
*/
public class PrecisionMode{/**
* Original precision mode.
*/
public static var ORIGINAL : int;public static var STABLE : int;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\materials\utils\RenderRecStorage.as
package org.papervision3d.materials.utils{import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Vertex3DInstance;public class RenderRecStorage{public var v0 : Vertex3DInstance;public var v1 : Vertex3DInstance;public var v2 : Vertex3DInstance;public var mat : Matrix;public function RenderRecStorage ();}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\DisplayObject3D.as
package org.papervision3d.objects{import flash.display.BlendMode;import org.papervision3d.Papervision3D;import org.papervision3d.core.culling.FrustumTestMethod;import org.papervision3d.core.data.UserData;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.material.AbstractLightShadeMaterial;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.Quaternion;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.proto.DisplayObjectContainer3D;import org.papervision3d.core.proto.GeometryObject3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.proto.SceneObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.shaders.ShadedMaterial;import org.papervision3d.materials.utils.MaterialsList;import org.papervision3d.view.Viewport3D;import org.papervision3d.view.layer.ViewportLayer;/**
* The DisplayObject class represents instances of 3D objects that are contained in the scene.	* <p/>	* That includes all objects in the scene, not only those that can be rendered, but also the camera and its target.	* <p/>	* The DisplayObject3D class supports basic functionality like the x, y and z position of an object, as well as rotationX, rotationY, rotationZ, scaleX, scaleY and scaleZ and visible. It also supports more advanced properties of the object such as its transform Matrix3D.	* <p/>	* <p/>	* DisplayObject3D is not an abstract base class; therefore, you can call DisplayObject3D directly. Invoking new DisplayObject() creates a new empty object in 3D space, like when you used createEmptyMovieClip().	*
*/
public class DisplayObject3D extends DisplayObjectContainer3D{/**
* tells Mesh3D's render() method to sort by measuring from the center of a triangle
*/
public static const MESH_SORT_CENTER : uint;/**
* tells Mesh3D's render() method to sort by measuring from the farthest point of a triangle
*/
public static const MESH_SORT_FAR : uint;/**
* tells Mesh3D's render() method to sort by measuring from the closest point of a triangle
*/
public static const MESH_SORT_CLOSE : uint;/**
* A Matrix3D object containing values that affect the scaling, rotation, and translation of the display object.
*/
public var transform : Matrix3D;/**
* [internal-use] A camera transformed Matrix3D object.
*/
public var view : Matrix3D;/**
* World transformation.
*/
public var world : Matrix3D;/**
* [internal-use]
*/
public var faces : Array;/**
* This allows objects faces to have their own containers.
*/
public static var faceLevelMode : Boolean;public static var sortedArray : Array;/**
* The GeometryObject3D object that contains the 3D definition of this instance.		* <p/>		* When different objects share the same geometry, they become instances. They are the same object, displayed multiple times. Changing the shape of this object changes the shape of all of its instances.		* <p/>		* Instancing an object saves system memory, and is useful to display an object multiple times while maintaining its shape.		* <p/>		* For example, you could create armies and forests full of duplicate objects without needing the memory to handle that much actual geometry. Each instance has its own transform node so it can have its own position, rotation, and scaling.
*/
public var geometry : GeometryObject3D;/**
* [internal-use] The average depth of the object faces center. Used internally for z-sorting.
*/
public var screenZ : Number;/**
* [internal use] Is this object culled by camera frustum?
*/
public var culled : Boolean;/**
* The list of materials for this instance.
*/
public var materials : MaterialsList;/**
* tells Mesh3D's render() method to compare the measurement choice of the user for a triangle's sorting
*/
public var meshSort : uint;public var container : ViewportLayer;public var alpha : Number;public var blendMode : String;public var filters : Array;public var parentContainer : DisplayObject3D;public var flipLightDirection : Boolean;public var frustumTestMethod : int;/**
* [read-only] Indicates the DisplayObjectContainer3D object that contains this display object.
*/
public var parent : DisplayObjectContainer3D;/**
* [read-only] The coordinate of the object on screen.
*/
public var screen : Number3D;/**
* Whether or not the display object is visible.		* <p/>		* A Boolean value that indicates whether the object is projected, transformed and rendered. A value of false will effectively ignore the object. The default value is true.
*/
public var visible : Boolean;/**
* An optional object name.
*/
public var name : String;/**
* [read-only] Unique id of this instance.
*/
public var id : int;/**
* An object that contains user defined properties.		* <p/>		* All properties of the extra field are copied into the new instance. The properties specified with extra are publicly available.
*/
public var extra : Object;public var cullTest : Number;public var useClipping : Boolean;public var testQuad : Boolean;/**
* Relative directions.
*/
private static const FORWARD : Number3D;private static const BACKWARD : Number3D;private static const LEFT : Number3D;private static const RIGHT : Number3D;private static const UP : Number3D;private static const DOWN : Number3D;private static var _tempMatrix : Matrix3D;private static var _tempQuat : Quaternion;private static var _newID : int;private static var toDEGREES : Number;private static var toRADIANS : Number;private static var entry_count : uint;/**
* [internal-use]
*/
protected var _transformDirty : Boolean;protected var _sorted : Array;protected var _useOwnContainer : Boolean;protected var _userData : UserData;/**
* The scene where the object belongs.
*/
protected var _scene : SceneObject3D;/**
* pre-made Number3Ds and Matrix3Ds for use in the lookAt function		 * and others		 *
*/
private var _position : Number3D;private var _lookatTarget : Number3D;private var _zAxis : Number3D;private var _xAxis : Number3D;private var _yAxis : Number3D;private var _rotation : Number3D;private var _rotationDirty : Boolean;private var _rotationX : Number;private var _rotationY : Number;private var _rotationZ : Number;private var _scaleX : Number;private var _scaleY : Number;private var _scaleZ : Number;private var _scaleDirty : Boolean;private var _tempScale : Number3D;private var _numClones : uint;private var _material : MaterialObject3D;private var _rot : Quaternion;private var _qPitch : Quaternion;private var _qYaw : Quaternion;private var _qRoll : Quaternion;private var _localRotationX : Number;private var _localRotationY : Number;private var _localRotationZ : Number;private var _autoCalcScreenCoords : Boolean;/**
* Returns an empty DiplayObject3D object positioned in the center of the 3D coordinate system (0, 0 ,0).
*/
public static function get ZERO () : DisplayObject3D;public function set useOwnContainer (value:Boolean) : Void;public function get useOwnContainer () : Boolean;public function set userData (userData:UserData) : Void;public function get userData () : UserData;/**
* An Number that sets the X coordinate of a object relative to the origin of its parent.
*/
public function get x () : Number;public function set x (value:Number) : Void;/**
* An Number that sets the Y coordinate of a object relative to the origin of its parent.
*/
public function get y () : Number;public function set y (value:Number) : Void;/**
* An Number that sets the Z coordinate of a object relative to the origin of its parent.
*/
public function get z () : Number;public function set z (value:Number) : Void;/**
* A Number3D containing the current x, y, and z of the DisplayObject3D
*/
public function get position () : Number3D;public function set position (n:Number3D) : Void;/**
* Specifies the rotation around the X axis from its original orientation.
*/
public function get rotationX () : Number;public function set rotationX (rot:Number) : Void;/**
* Specifies the rotation around the Y axis from its original orientation.
*/
public function get rotationY () : Number;public function set rotationY (rot:Number) : Void;/**
* Specifies the rotation around the Z axis from its original orientation.
*/
public function get rotationZ () : Number;public function set rotationZ (rot:Number) : Void;/**
* Sets the 3D scale as applied from the registration point of the object.
*/
public function get scale () : Number;public function set scale (scale:Number) : Void;/**
* Sets the scale along the local X axis as applied from the registration point of the object.
*/
public function get scaleX () : Number;public function set scaleX (scale:Number) : Void;/**
* Sets the scale along the local Y axis as applied from the registration point of the object.
*/
public function get scaleY () : Number;public function set scaleY (scale:Number) : Void;/**
* Sets the scale along the local Z axis as applied from the registration point of the object.
*/
public function get scaleZ () : Number;public function set scaleZ (scale:Number) : Void;/**
* The X coordinate of a object relative to the scene coordinate system.
*/
public function get sceneX () : Number;/**
* The Y coordinate of a object relative to the scene coordinate system.
*/
public function get sceneY () : Number;/**
* The Z coordinate of a object relative to the scene coordinate system.
*/
public function get sceneZ () : Number;/**
* The default material for the object instance. Materials collect data about how objects appear when rendered.
*/
public function set material (material:MaterialObject3D) : Void;public function get material () : MaterialObject3D;public function set scene (p_scene:SceneObject3D) : Void;public function get scene () : SceneObject3D;public function set autoCalcScreenCoords (autoCalculateScreenCoords:Boolean) : Void;public function get autoCalcScreenCoords () : Boolean;/**
* Rotate the display object around its lateral or transverse axis —an axis running from the pilot's left to right in piloted aircraft, and parallel to the wings of a winged aircraft; thus the nose pitches up and the tail down, or vice-versa.		*		* @param	angle	The angle to rotate.
*/
public function set localRotationX (angle:Number) : Void;public function get localRotationX () : Number;/**
* Rotate the display object around about the vertical axis —an axis drawn from top to bottom.		*		* @param	angle	The angle to rotate.
*/
public function set localRotationY (angle:Number) : Void;public function get localRotationY () : Number;/**
* Rotate the display object around the longitudinal axis —an axis drawn through the body of the vehicle from tail to nose in the normal direction of flight, or the direction the object is facing.		*		* @param	angle
*/
public function set localRotationZ (angle:Number) : Void;public function get localRotationZ () : Number;/**
* Creates a new DisplayObject3D instance. After creating the instance, call the addChild() method of a DisplayObjectContainer3D.		*		* @param	name		[optional] - The name of the newly created object.		* @param	geometry	[optional] - The geometry of the newly created object.		*		* <ul>		* <li><b>x</b></b>: An Number that sets the X coordinate of a object relative to the scene coordinate system.</li>		* <p/>		* <li><b>y</b>: An Number that sets the Y coordinate of a object relative to the scene coordinate system.</li>		* <p/>		* <li><b>z</b>: An Number that sets the Z coordinate of a object relative to the scene coordinate system.</li>		* <p/>		* <li><b>rotationX</b>: Specifies the rotation around the X axis from its original orientation.</li>		* <p/>		* <li><b>rotationY</b>: Specifies the rotation around the Y axis from its original orientation.</li>		* <p/>		* <li><b>rotationZ</b>: Specifies the rotation around the Z axis from its original orientation.</li>		* <p/>		* <li><b>scaleX</b>: Sets the scale along the local X axis as applied from the registration point of the object.</li>		* <p/>		* <li><b>scaleY</b>: Sets the scale along the local Y axis as applied from the registration point of the object.</li>		* <p/>		* <li><b>scaleZ</b>: Sets the scale along the local Z axis as applied from the registration point of the object.</li>		* <p/>		* <li><b>visible</b>: Whether or not the display object is visible.		* <p/>		* A Boolean value that indicates whether the object is projected, transformed and rendered. A value of false will effectively ignore the object. The default value is true.</li>		* <p/>		* <li><b>container</b>: The MovieClip that you draw into when rendering. Use only when the object is rendered in its own unique MovieClip.		* <p/>		* It's Boolean value determines whether the container MovieClip should be cleared before rendering.</li>		* <p/>		* <li><b>extra</b>: An object that contains user defined properties.		* <p/>		* All properties of the extra field are copied i
*/
public function DisplayObject3D (name:String = null, geometry:GeometryObject3D = null);/**
* Adds a child DisplayObject3D instance to this DisplayObjectContainer instance.		*		* [TODO: If you add a child object that already has a different display object container as a parent, the object is removed from the child list of the other display object container.]		*		* @param	child	The DisplayObject3D instance to add as a child of this DisplayObjectContainer3D instance.		* @param	name	An optional name of the child to add or create. If no name is provided, the child name will be used.		* @return	The DisplayObject3D instance that you have added or created.
*/
public function addChild (child:DisplayObject3D, name:String = null) : DisplayObject3D;/**
* Adds a geometry definition to the instance.		*		* A geometry describes the visual shape and appearance of an object in a scene.		*		* @param	geometry	A geometry definition.
*/
public function addGeometry (geometry:GeometryObject3D = null) : void;/**
* Clones this object.		 * 		 * @return	The cloned DisplayObject3D.
*/
public function clone () : DisplayObject3D;/**
* Gets the distance to the position of the given object.		*		* @param	obj		The display object to measure the distance to.		* @return	The distance to the registration point of the given object.
*/
public function distanceTo (obj:DisplayObject3D) : Number;/**
* Evaluates the display object to see if it overlaps or intersects with the point specified by the x, y and z parameters.		* <p/>		* The x, y and z parameters specify a point in the coordinate space of the instance parent object, not the scene (unless that parent object is the scene).		*		* @param	x	The x coordinate to test against this object.		* @param	y	The y coordinate to test against this object.		* @param	z	The z coordinate to test against this object.		* @return	true if the display object overlaps or intersects with the specified point; false otherwise.
*/
public function hitTestPoint (x:Number, y:Number, z:Number) : Boolean;/**
* Evaluates the display object to see if it overlaps or intersects with the obj display object.		*		* @param	obj	 The display object to test against.		* @return	true if the display objects intersect; false if not.
*/
public function hitTestObject (obj:DisplayObject3D, multiplier:Number = 1) : Boolean;/**
* Returns the material that exists with the specified name in the materials list.		* </p>		* If more that one material object has the specified name, the method returns the first material object in the materials list.		* </p>		* @param	name	The name of the material to return.		* @return	The material object with the specified name.
*/
public function getMaterialByName (name:String) : MaterialObject3D;/**
* Returns a string value with the list of material names of the materials list.		*		* @return	A string.
*/
public function materialsList () : String;/**
* Replaces a material by its name.		 * 		 * @param	material		 * @param	name		 * @return
*/
public function replaceMaterialByName (material:MaterialObject3D, name:String) : void;/**
* Sets the material for a child DisplayObject3D.		 * 		 * @param child		A child DisplayObject3D of this DAE.		 * @param material	The new material for the child.		 * @param existingMaterial Optional existing material to be replaced.
*/
public function setChildMaterial (child:DisplayObject3D, material:MaterialObject3D, existingMaterial:MaterialObject3D = null) : void;/**
* Sets the material for a child DisplayObject3D by the child's name.		 * 		 * @param childName The name of the DisplayObject3D.		 * @param material	The new material for the child.
*/
public function setChildMaterialByName (childName:String, material:MaterialObject3D) : void;/**
* 		 * @param	do3d		 * @param	existingMaterial		 * @param	newMaterial
*/
private function updateMaterials (do3d:DisplayObject3D, existingMaterial:MaterialObject3D, newMaterial:MaterialObject3D) : void;/**
* [internal-use] Projects three dimensional coordinates onto a two dimensional plane to simulate the relationship of the camera to subject.		* <p/>		* This is the first step in the process of representing three dimensional shapes two dimensionally.		*	 	* @param	parent	The DisplayObject3D object that contains this display object.		* @param	renderSessionData Data for the current render.
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
*
*/
public function calculateScreenCoords (camera:CameraObject3D) : void;/**
* Translate the display object in the direction it is facing, i.e. it's positive Z axis.		*		* @param	distance	The distance that the object should move forward.
*/
public function moveForward (distance:Number) : void;/**
* Translate the display object in the opposite direction it is facing, i.e. it's negative Z axis.		*		* @param	distance	The distance that the object should move backward.
*/
public function moveBackward (distance:Number) : void;/**
* Translate the display object lateraly, to the left of the direction it is facing, i.e. it's negative X axis.		*		* @param	distance	The distance that the object should move left.
*/
public function moveLeft (distance:Number) : void;/**
* Translate the display object lateraly, to the right of the direction it is facing, i.e. it's positive X axis.		*		* @param	distance	The distance that the object should move right.
*/
public function moveRight (distance:Number) : void;/**
* Translate the display object upwards, with respect to the direction it is facing, i.e. it's positive Y axis.		*		* @param	distance	The distance that the object should move up.
*/
public function moveUp (distance:Number) : void;/**
* Translate the display object downwards, with respect to the direction it is facing, i.e. it's negative Y axis.		*		* @param	distance	The distance that the object should move down.
*/
public function moveDown (distance:Number) : void;/**
* Move the object along a given direction.		*		* @param	distance	The distance that the object should travel.		* @param	axis		The direction that the object should move towards.
*/
public function translate (distance:Number, axis:Number3D) : void;/**
* Rotate the display object around its lateral or transverse axis —an axis running from the pilot's left to right in piloted aircraft, and parallel to the wings of a winged aircraft; thus the nose pitches up and the tail down, or vice-versa.		*		* @param	angle	The angle to rotate.
*/
public function pitch (angle:Number) : void;/**
* Rotate the display object around about the vertical axis —an axis drawn from top to bottom.		*		* @param	angle	The angle to rotate.
*/
public function yaw (angle:Number) : void;/**
* Rotate the display object around the longitudinal axis —an axis drawn through the body of the vehicle from tail to nose in the normal direction of flight, or the direction the object is facing.		*		* @param	angle
*/
public function roll (angle:Number) : void;/**
* Make the object look at a specific position.		*		* @param	targetObject	Object to look at.		* @param	upAxis			The vertical axis of the universe. Normally the positive Y axis.
*/
public function lookAt (targetObject:DisplayObject3D, upAxis:Number3D = null) : void;/**
* Copies the position information (x, y and z coordinates) from another object or Matrix3D.		*		* @param	reference	A DisplayObject3D or Matrix3D object to copy the position from.
*/
public function copyPosition (reference:*) : void;/**
* Copies the transformation information (position, rotation and scale) from another object or Matrix3D.		*		* @param	reference	A DisplayObject3D or Matrix3D object to copy the position from.
*/
public function copyTransform (reference:*) : void;/**
* Returns a string value representing the three-dimensional position values of the display object instance.		*		* @return	A string.
*/
public function toString () : String;public function createViewportLayer (viewport:Viewport3D, recurse:Boolean = true) : ViewportLayer;public function addChildrenToLayer (do3d:DisplayObject3D, layer:ViewportLayer) : void;protected function setParentContainer (parent:DisplayObject3D, assign:Boolean = true) : void;/**
* [internal-use] Updates the transform Matrix3D with the current rotation and scale values.
*/
public function updateTransform () : void;private function updateRotation () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\Ase.as
package org.papervision3d.objects.parsers{import flash.events.*;import flash.net.URLLoader;import flash.net.URLRequest;import org.papervision3d.core.geom.*;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.*;import org.papervision3d.events.FileLoadEvent;/**
* The Ase class lets you load and parse ASE format objects exported from 3DS Max.	* <p/>	* Only the geometry and mapping of one mesh is currently parsed.	* <p/>	* For more complex objects, it is recommended to import Collada scenes with addCollada method.
*/
public class Ase extends TriangleMesh3D{/**
* Whether or not the scene has been loaded.
*/
public var loaded : Boolean;/**
* Default scaling value for constructor.
*/
public static var DEFAULT_SCALING : Number;/**
* Internal scaling value.
*/
public static var INTERNAL_SCALING : Number;private var _scaleAse : Number;private var _loaderAse : URLLoader;private var _filename : String;/**
* Creates a new Ase object that will load and parse a 3DS Max exported .ASE mesh.		* <p/>		* Only the geometry and mapping of one mesh is currently parsed.		* <p/>		* @param	material	A MaterialObject3D object that contains the material properties of the object.		* <p/>		* @param	filename	Filename of the .ASE object to parse.		* <p/>		* @param	scale		Scaling factor.		* <p/>
*/
public function Ase (material:MaterialObject3D, filename:String, scale:Number = 1);private function loadAse (filename:String) : void;/**
* Taken from w3d at http://blog.andre-michelle.com/2005/flash8-sourcecodes		* By Andre Michelle, with much respect
*/
private function parseAse (e:Event) : void;private function ioErrorHandler (event:IOErrorEvent) : void;private function progressHandler (event:ProgressEvent) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\Collada.as
package org.papervision3d.objects.parsers{import flash.events.Event;import flash.events.IOErrorEvent;import flash.events.ProgressEvent;import flash.events.SecurityErrorEvent;import flash.net.URLLoader;import flash.net.URLRequest;import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.DisplayObjectContainer3D;import org.papervision3d.core.proto.GeometryObject3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.events.FileLoadEvent;import org.papervision3d.materials.BitmapFileMaterial;import org.papervision3d.materials.utils.MaterialsList;import org.papervision3d.objects.DisplayObject3D;/**
* The Collada class lets you load and parse Collada scenes.	* <p/>	* Recommended DCC Settings:	* <ul><li><b>Maya</b>:	* <ul><li>General Export Options	* <ul><li>Relative Paths, Triangulate.</li></ul>	* <li>Filter Export	* <ul><li>Polygon meshes, Normals, Texture Coordinates.</li></ul>	* </li></ul>	* <li><b>3DS Max</b>:	* <ul><li>Standard Options	* <ul><li>Relative Paths.</li></ul>	* <li>Geometry	* <ul><li>Normals, Triangulate.</li></ul>	* </li></ul>
*/
public class Collada extends DisplayObject3D{/**
* Default scaling value for constructor.
*/
public static var DEFAULT_SCALING : Number;/**
* Internal scaling value.
*/
private static var INTERNAL_SCALING : Number;/**
* Whether or not the scene has been loaded.
*/
public var loaded : Boolean;public var materialsToLoad : int;private static var COLLADASECTION : String;private static var LIBRARYSECTION : String;private static var ASSETSECTION : String;private static var SCENESECTION : String;private static var LIGHTPREFAB : String;private static var CAMERAPREFAB : String;private static var MATERIALSECTION : String;private static var GEOMETRYSECTION : String;private static var MESHSECTION : String;private static var SOURCESECTION : String;private static var ARRAYSECTION : String;private static var ACCESSORSECTION : String;private static var VERTICESSECTION : String;private static var INPUTTAG : String;private static var POLYGONSSECTION : String;private static var POLYGON : String;private static var NODESECTION : String;private static var LOOKATNODE : String;private static var MATRIXNODE : String;private static var PERSPECTIVENODE : String;private static var ROTATENODE : String;private static var SCALENODE : String;private static var TRANSLATENODE : String;private static var SKEWNODE : String;private static var INSTANCENODE : String;private static var INSTACESCENE : String;private static var PARAMTAG : String;private static var POSITIONINPUT : String;private static var VERTEXINPUT : String;private static var NORMALINPUT : String;private static var TEXCOORDINPUT : String;private static var UVINPUT : String;private static var TANGENTINPUT : String;private var COLLADA : XML;private var _container : DisplayObjectContainer3D;private var _geometries : Object;private var _loader : URLLoader;private var _filename : String;private var _materials : MaterialsList;private var _scaling : Number;private var _yUp : Boolean;private var _doubleSidedMaterials : Boolean;private static var toDEGREES : Number;private static var toRADIANS : Number;/**
* Creates a new Collada object.		* <p/>		* The Collada class lets you load and parse a Collada scene.		* <p/>		* COLLADA is a COLLAborative Design Activity for establishing an interchange file format for interactive 3D applications.		* <p/>		* COLLADA defines an open standard XML schema for exchanging digital assets among various container software applications that might otherwise store their assets in incompatible formats.		* <p/>		* COLLADA documents that describe digital assets are XML files, usually identified with a .dae (digital asset exchange) filename extension.		* <p/>		* @param	COLLADA		An XML COLLADA object or the filename of the .dae scene to load.		* <p/>		* @param	materials	A MaterialsList object.		* <p/>		* @param	scale		Scaling factor.		* <p/>		* @param	doubleSided		Whether to make all materials doubleSided.		* <p/>
*/
public function Collada (COLLADA:* = null, materials:MaterialsList = null, scale:Number = 1, doubleSided:Boolean = false);/**
* Loads the COLLADA.		* 		* @param	COLLADA		An XML COLLADA object or the filename of the .dae scene to load.		* <p/>		* @param	materials	A MaterialsList object.		* <p/>		* @param	scale		Scaling factor.		* <p/>		* @param	doubleSided		Whether to make all materials doubleSided.
*/
public function load (COLLADA:*, materials:MaterialsList = null, scale:Number = 1, doubleSided:Boolean = false) : void;private function loadCollada () : void;private function handleLoadProgress (e:ProgressEvent) : void;private function handleIOError (e:IOErrorEvent) : void;private function handleSecurityLoadError (e:SecurityErrorEvent) : void;private function onComplete (evt:Event) : void;private function buildCollada () : void;private function parseScene (scene:XML) : void;private function parseNode (node:XML, parent:DisplayObjectContainer3D) : void;private function parseGeometry (geometry:XML, instance:DisplayObject3D, matrix2:Matrix3D = null, bindMaterial:Object = null) : void;private function buildObject (semantics:Object, instance:DisplayObject3D, matrix:Matrix3D = null) : void;private function getArray (spaced:String) : Array;private function addMaterial (instance:DisplayObject3D, name:String, bindMaterial:Object) : void;private function onMaterialLoadComplete (event:FileLoadEvent) : void;private function onMaterialLoadError (event:FileLoadEvent) : void;private function getTexture (name:String) : String;private function rotateMatrix (vector:Array) : Matrix3D;private function translateMatrix (vector:Array) : Matrix3D;private function scaleMatrix (vector:Array) : Matrix3D;private function bakedMatrix (matrix:Matrix3D) : Matrix3D;private function deserialize (input:XML, geo:XML) : Array;public function getMaterialsList () : MaterialsList;private function getId (url:String) : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\DAE.as
package org.papervision3d.objects.parsers{import org.papervision3d.core.animation.channel.Channel3D;import flash.events.Event;import flash.events.IOErrorEvent;import flash.events.ProgressEvent;import flash.system.Capabilities;import flash.utils.ByteArray;import flash.utils.Dictionary;import org.ascollada.ASCollada;import org.ascollada.core.*;import org.ascollada.fx.*;import org.ascollada.io.DaeReader;import org.ascollada.namespaces.*;import org.ascollada.types.*;import org.papervision3d.Papervision3D;import org.papervision3d.core.animation.IAnimatable;import org.papervision3d.core.animation.IAnimationProvider;import org.papervision3d.core.animation.channel.controller.MorphWeightChannel3D;import org.papervision3d.core.animation.channel.geometry.VertexChannel3D;import org.papervision3d.core.animation.channel.transform.*;import org.papervision3d.core.animation.clip.AnimationClip3D;import org.papervision3d.core.animation.key.LinearCurveKey3D;import org.papervision3d.core.animation.curve.Curve3D;import org.papervision3d.core.controller.*;import org.papervision3d.core.geom.*;import org.papervision3d.core.geom.renderables.*;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.material.AbstractLightShadeMaterial;import org.papervision3d.core.math.*;import org.papervision3d.core.proto.*;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.events.FileLoadEvent;import org.papervision3d.materials.*;import org.papervision3d.materials.shaders.ShadedMaterial;import org.papervision3d.materials.special.*;import org.papervision3d.materials.utils.*;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.objects.special.Skin3D;/**
* The DAE class represents a parsed COLLADA 1.4.1 file.	 * 	 * <p>Typical use case:</p>	 * <pre>	 * var dae :DAE = new DAE();	 * 	 * dae.addEventListener(FileLoadEvent.LOAD_COMPLETE, myOnLoadCompleteHandler);	 * 	 * dae.load( "path/to/collada" );	 * </pre>	 * 	 * <p>Its possible to pass you own materials via a MaterialsList:</p>	 * <pre>	 * var materials :MaterialsList = new MaterialsList();	 * 	 * materials.addMaterial( new ColorMaterial(), "MyMaterial" );	 * 	 * var dae :DAE = new DAE();	 * 	 * dae.addEventListener(FileLoadEvent.LOAD_COMPLETE, myOnLoadCompleteHandler);	 * 	 * dae.load( "path/to/collada", materials );	 * </pre>	 * <p>Note that in above case you need the material names as specified in your 3D modelling application.	 * The material names can also be found by looking at the COLLADA file: find the xml elements 	 * &lt;instance_material symbol="MyMaterialName" target="SomeTarget" /&gt;. The material names are specified	 * by the symbol attribute of this element.</p>	 * 	 * <p>A COLLADA file can contain animations. Animations take a long time to parse, hence 	 * animations are parsed asynchroniously. Listen for FileLoadEvent.ANIMATIONS_COMPLETE and 	 * FileLoadEvent.ANIMATIONS_PROGRESS:</p>	 * <pre>	 * var dae :DAE = new DAE();	 * 	 * dae.addEventListener(FileLoadEvent.LOAD_COMPLETE, myOnLoadCompleteHandler);	 * dae.addEventListener(FileLoadEvent.ANIMATIONS_COMPLETE, myOnAnimationsCompleteHandler);	 * dae.addEventListener(FileLoadEvent.ANIMATIONS_PROGRESS, myOnAnimationsProgressHandler);	 * 	 * dae.load( "path/to/collada" );	 * </pre>	 * 	 * @author Tim Knip
*/
public class DAE extends DisplayObject3D implements IAnimatable{public static const ROOTNODE_NAME : String;/**
Default line color for splines.
*/
public static var DEFAULT_LINE_COLOR : uint;/**
Default line width for splines
*/
public static var DEFAULT_LINE_WIDTH : Number;/**
change this to a value > 0 if you're DAE is picking the wrong coordinates
*/
public var forceCoordSet : int;/**
The loaded XML.
*/
public var COLLADA : XML;/**
The filename - if applicable.
*/
public var filename : String;/**
The filetitle - if applicable.
*/
public var fileTitle : String;/**
Base url.
*/
public var baseUrl : String;/**
The COLLADA parser.
*/
public var parser : DaeReader;/**
The DaeDocument. @see org.ascollada.core.DaeDocument
*/
public var document : DaeDocument;/**

*/
protected var _animation : AnimationController;/**

*/
protected var _colladaID : Dictionary;/**

*/
protected var _colladaSID : Dictionary;/**

*/
protected var _colladaIDToObject : Object;/**

*/
protected var _colladaSIDToObject : Object;/**

*/
protected var _objectToNode : Object;/**

*/
protected var _rootNode : DisplayObject3D;/**

*/
protected var _autoPlay : Boolean;/**

*/
protected var _rightHanded : Boolean;/**

*/
protected var _controllers : Array;protected var _playerType : String;protected var _loop : Boolean;protected var _fileSearchPaths : Array;private static var _numClone : int;/**
* Gets / sets the animation controller.		 * 		 * @see org.papervision3d.core.controller.AnimationController
*/
public function set animation (value:AnimationController) : Void;public function get animation () : AnimationController;/**
* Gets all controlllers.		 * 		 * @return	Array of controllers.		 * 		 * @see org.papervision3d.core.controller.IObjectController		 * @see org.papervision3d.core.controller.AnimationController		 * @see org.papervision3d.core.controller.MorphController		 * @see org.papervision3d.core.controller.SkinController
*/
public function get controllers () : Array;public function set controllers (value:Array) : Void;/**
* Whether the animation is playing. This property is read-only.		 * 		 * @return True when playing.
*/
public function get playing () : Boolean;/**
Whether the COLLADA uses Y-up, Z-up otherwise.
*/
public function get yUp () : Boolean;public function set rootNode (value:DisplayObject3D) : Void;public function get rootNode () : DisplayObject3D;/**
* Constructor.		 * 		 * @param	autoPlay	Whether to start the _animation automatically.		 * @param	name	Optional name for the DAE.
*/
public function DAE (autoPlay:Boolean = true, name:String = null, loop:Boolean = false);/**
* Pauses the animation.
*/
public function pause () : void;/**
* Plays the animation.		 * 		 * @param 	clip	Clip to play. Default is "all"		 * @param 	loop	Whether the animation should loop. Default is true.
*/
public function play (clip:String = "all", loop:Boolean = true) : void;/**
* Resumes a paused animation.		 * 		 * @param loop 	Whether the animation should loop. Defaults is true.
*/
public function resume (loop:Boolean = true) : void;/**
* Stops the animation.
*/
public function stop () : void;/**
*
*/
public function addFileSearchPath (path:String) : void;/**
*
*/
public function clone () : DisplayObject3D;private function getObjectByTransform (object:DisplayObject3D, transform:Matrix3D) : DisplayObject3D;/**
* Loads the COLLADA.		 * 		 * @param	asset The url, an XML object or a ByteArray specifying the COLLADA file.		 * @param	materials	An optional materialsList.
*/
public function load (asset:*, materials:MaterialsList = null, asynchronousParsing:Boolean = false) : void;/**
* Removes a child.		 * 		 * @param	child	The child to remove		 * 		 * @return	The removed child
*/
public function removeChild (child:DisplayObject3D) : DisplayObject3D;/**
* Project.		 * 		 * @param	parent		 * @param	renderSessionData		 * 		 * @return	Number
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
*
*/
protected function buildAnimatedTransforms (object:DisplayObject3D, node:DaeNode, channels:Array, bakeChannels:Boolean = true) : void;/**
* Builds animated vertices if needed. 		 * NOTE: this is a Feeling specific feature. Its not part of the COLLADA 1.4.1 spec.		 * 		 * @param target		 * @param vertices
*/
protected function buildAnimatedVertices (target:TriangleMesh3D, vertices:DaeVertices) : void;/**
*
*/
protected function buildAnimationClips () : void;/**
* Builds the _animation for an object and its children.		 * 		 * @param object
*/
protected function buildAnimations (object:DisplayObject3D) : void;/**
* Links the controllers to the objects.		 * 		 * @param instance
*/
protected function buildControllers (instance:DisplayObject3D = null) : void;/**
* 		 * @param	asset		 * @return
*/
protected function buildFileInfo (asset:*) : void;/**
*
*/
protected function buildGeometry (target:TriangleMesh3D, daeGeometry:DaeGeometry, daeBindMaterial:DaeBindMaterial) : void;/**
*
*/
protected function buildGeometryLines (target:Lines3D, daeGeometry:DaeGeometry, daeBindMaterial:DaeBindMaterial) : void;/**
*
*/
protected function buildMaterialInstance (daeInstanceMaterial:DaeInstanceMaterial, outBVI:DaeBindVertexInput) : MaterialObject3D;/**
* Builds a Matrix3D from a node's transform array. @see org.ascollada.core.DaeNode#transforms		 * 		 * @param	node		 * 		 * @return
*/
protected function buildMatrix (node:DaeNode) : Matrix3D;/**
* 		 * @param	node		 * @return
*/
protected function buildMatrixFromTransform (transform:DaeTransform) : Matrix3D;/**
* 		 * @param	node		 * @return
*/
protected function buildMatrixStack (node:DaeNode) : Array;/**
*
*/
protected function buildMesh (node:DaeNode) : DisplayObject3D;/**
* Builds a morph controller.		 * 		 * @param instance		 * @param morph		 * @param bindMaterial		 * 		 * @return
*/
protected function buildMorphController (instance:TriangleMesh3D, morph:DaeMorph) : MorphController;/**
* Builds a DisplayObject3D from a node. @see org.ascollada.core.DaeNode		 * 		 * @param	node			 * 		 * @return	The created DisplayObject3D. @see org.papervision3d.objects.DisplayObject3D
*/
protected function buildNode (node:DaeNode, parent:DisplayObject3D) : void;/**
* Builds a primitive.		 * 		 * @param mesh		 * @param daePrimitive		 * @param daeInstanceMaterial		 * @param vertexStart
*/
protected function buildPrimitive (mesh:TriangleMesh3D, daePrimitive:DaePrimitive, daeInstanceMaterial:DaeInstanceMaterial, vertexStart:int) : void;/**
* Builds the scene.
*/
protected function buildScene () : void;/**
* Builds a skin controller.		 * 		 * @param instance		 * @param skin
*/
protected function buildSkinController (instance:DisplayObject3D, skin:DaeSkin) : SkinController;/**
* Builds vertices from a COLLADA mesh.		 * 		 * @param	mesh	The COLLADA mesh. @see org.ascollada.core.DaeMesh		 * 		 * @return	Array of Vertex3D
*/
protected function buildVertices (mesh:DaeMesh) : Array;/**
* Called when the parser completed parsing animations.		 * 		 * @param	event
*/
protected function onParseAnimationsComplete (event:Event = null) : void;/**
* Called on parse animations progress.		 * 		 * @param	event
*/
protected function onParseAnimationsProgress (event:ProgressEvent) : void;/**
* Called when the DaeReader completed parsing.		 * 		 * @param	event
*/
protected function onParseComplete (event:Event) : void;/**
* Called on parsing error (invalid file name)		 * 		 * @param	event
*/
protected function onParseError (event:IOErrorEvent) : void;/**
* Called on parsing progress.		 * 		 * @param	event
*/
protected function onParseProgress (event:ProgressEvent) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\KMZ.as
package org.papervision3d.objects.parsers{import nochump.util.zip.*;import org.ascollada.namespaces.*;import org.papervision3d.core.geom.*;import org.papervision3d.events.FileLoadEvent;import org.papervision3d.materials.*;import org.papervision3d.materials.utils.*;import flash.display.Bitmap;import flash.display.Loader;import flash.events.*;import flash.net.URLLoader;import flash.net.URLLoaderDataFormat;import flash.net.URLRequest;import flash.utils.*;/**
* @author Tim Knip
*/
public class KMZ extends TriangleMesh3D{/**
The DAE
*/
public var dae : DAE;/**

*/
private var _loadedTextures : uint;/**

*/
private var _totalTextures : uint;/**

*/
private var _loadedDAE : ByteArray;/**
* Constructor.
*/
public function KMZ (name:String = null);/**
* Loads a KMZ.
		 *
		 * @param	asset	URL or ByteArray.
*/
public function load (asset:*, materials:MaterialsList = null) : void;private function progressHandler (event:ProgressEvent) : void;private function securityErrorHandler (event:SecurityErrorEvent) : void;private function httpStatusHandler (event:HTTPStatusEvent) : void;private function ioErrorHandler (event:IOErrorEvent) : void;/**
* Gets the COLLADA from the zip.
		 *
		 * @param	zipFile
*/
private function getColladaFromZip (zipFile:ZipFile) : ByteArray;/**
* The KMZ was successfully loaded.
		 *
		 * @param 	event
*/
private function onLoadComplete (event:Event) : void;/**
* A texture was successfully loaded.
		 *
		 * @param 	event
*/
private function onTextureComplete (event:Event = null) : void;/**
*
*/
private function onColladaComplete (event:Event) : void;/**
* Parse the KMZ data.
		 *
		 * @param	data
*/
private function parse (data:ByteArray) : void;/**
* Gets the number of textures inside a zip.
		 *
		 * @param	zipFile
		 *
		 * @return	The number of textures.
*/
private function numTexturesInZip (zipFile:ZipFile) : uint;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\Max3DS.as
package org.papervision3d.objects.parsers{import flash.events.Event;import flash.events.IOErrorEvent;import flash.net.URLLoader;import flash.net.URLLoaderDataFormat;import flash.net.URLRequest;import flash.utils.ByteArray;import flash.utils.Endian;import org.papervision3d.Papervision3D;import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.events.FileLoadEvent;import org.papervision3d.materials.BitmapFileMaterial;import org.papervision3d.materials.ColorMaterial;import org.papervision3d.materials.utils.MaterialsList;import org.papervision3d.objects.DisplayObject3D;/**
* 3DS File parser.
	 * 
	 * @author Tim Knip (based on Away3D's Max3DS class : http://away3d.com)
*/
public class Max3DS extends DisplayObject3D{/**

*/
public var filename : String;public const AMBIENT : String;public const DIFFUSE : String;public const SPECULAR : String;public const PRIMARY : int;public const EDIT3DS : int;public const KEYF3DS : int;public const VERSION : int;public const MESH_VERSION : int;public const KFVERSION : int;public const COLOR_F : int;public const COLOR_RGB : int;public const LIN_COLOR_24 : int;public const LIN_COLOR_F : int;public const INT_PERCENTAGE : int;public const FLOAT_PERC : int;public const MASTER_SCALE : int;public const IMAGE_FILE : int;public const AMBIENT_LIGHT : int;public const MESH : int;public const MESH_OBJECT : int;public const MESH_VERTICES : int;public const VERTEX_FLAGS : int;public const MESH_FACES : int;public const MESH_MATER : int;public const MESH_TEX_VERT : int;public const MESH_XFMATRIX : int;public const MESH_COLOR_IND : int;public const MESH_TEX_INFO : int;public const HEIRARCHY : int;public const MATERIAL : int;public const MAT_NAME : int;public const MAT_AMBIENT : int;public const MAT_DIFFUSE : int;public const MAT_SPECULAR : int;public const MAT_SHININESS : int;public const MAT_FALLOFF : int;public const MAT_EMISSIVE : int;public const MAT_SHADER : int;public const MAT_TEXMAP : int;public const MAT_TEXFLNM : int;public const OBJ_LIGHT : int;public const OBJ_CAMERA : int;public const ANIM_HEADER : int;public const ANIM_OBJ : int;public const ANIM_NAME : int;public const ANIM_POS : int;public const ANIM_ROT : int;public const ANIM_SCALE : int;private var _data : ByteArray;private var _textureDir : String;private var _textureExtensionReplacements : Object;/**
* Constuctor
		 * 
		 * @param	name
*/
public function Max3DS (name:String = null);/**
* Load.
		 * 
		 * @param	asset
		 * @param	materials
		 * @param	textureDir
*/
public function load (asset:*, materials:MaterialsList = null, textureDir:String = "./image/") : void;/**
* Replaces a texture extension with an alternative extension.
		 * 
		 * @param	originalExtension	For example "bmp", "gif", etc
		 * @param	preferredExtension	For example "png"
*/
public function replaceTextureExtension (originalExtension:String, preferredExtension:String = "png") : void;/**
* Build a mesh
		 * 
		 * @param	meshData
*/
private function buildMesh (meshData:MeshData) : void;/**
* 
		 * @param	event
*/
private function onFileLoadComplete (event:Event = null) : void;/**
* 
		 * @param	event
*/
private function onFileLoadError (event:IOErrorEvent) : void;/**
* Parse.
		 * 
		 * @param	data
*/
private function parse (data:ByteArray) : void;/**
* Read the base 3DS object.
		 * 
		 * @param chunk
		 *
*/
private function parse3DS (chunk:Chunk3ds) : void;/**
* Read the Edit chunk
		 * 
		 * @param chunk
*/
private function parseEdit3DS (chunk:Chunk3ds) : void;/**
* Read a material chunk.
		 * 
		 * @param	chunk
*/
private function parseMaterial (chunk:Chunk3ds) : String;private function parseMesh (chunk:Chunk3ds, meshData:MeshData) : void;/**
* 
		 * @param	chunk
*/
private function readMeshFaces (chunk:Chunk3ds) : Array;/**
* Read the Mesh Material chunk
		 * 
		 * @param chunk
*/
private function readMeshMaterial (chunk:Chunk3ds, meshData:MeshData) : void;/**
* 
		 * @param	chunk
		 *
		 * @return
*/
private function readMeshTexVert (chunk:Chunk3ds) : Array;/**
* 
		 * @param	chunk
*/
private function readMeshVertices (chunk:Chunk3ds) : Array;/**
* Reads a null-terminated ascii string out of a byte array.
		 * 
		 * @param data The byte array to read from.
		 * 
		 * @return The string read, without the null-terminating character.
*/
private function readASCIIZString (data:ByteArray) : String;/**
*
*/
private function readColor (colorChunk:Chunk3ds) : int;/**
* Read Scaled Color
		 * 
		 * @param	chunk
*/
private function readColorScale (chunk:Chunk3ds) : int;/**
* Read RGB
		 * 
		 * @param	chunk
*/
private function readColorRGB (chunk:Chunk3ds) : int;/**
* Read id and length of 3ds chunk
		 * 
		 * @param chunk
*/
private function readChunk (chunk:Chunk3ds) : void;/**
* Skips past a chunk. If we don't understand the meaning of a chunk id,
		 * we just skip past it.
		 * 
		 * @param chunk
*/
private function skipChunk (chunk:Chunk3ds) : void;}internal class Chunk3ds{public var id : int;public var length : int;public var bytesRead : int;}internal class MeshData{public var name : String;public var vertices : Array;public var faces : Array;public var uvs : Array;public var materials : Array;}internal class MaterialData{public var name : String;public var faces : Array;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\MD2.as
package org.papervision3d.objects.parsers{import org.papervision3d.Papervision3D;import flash.events.Event;import flash.events.ProgressEvent;import flash.net.URLLoader;import flash.net.URLLoaderDataFormat;import flash.net.URLRequest;import flash.utils.ByteArray;import flash.utils.Endian;import org.papervision3d.core.animation.IAnimatable;import org.papervision3d.core.animation.IAnimationProvider;import org.papervision3d.core.animation.clip.AnimationClip3D;import org.papervision3d.core.controller.IControllerProvider;import org.papervision3d.core.controller.IObjectController;import org.papervision3d.core.animation.key.LinearCurveKey3D;import org.papervision3d.core.animation.curve.Curve3D;import org.papervision3d.core.animation.channel.geometry.VerticesChannel3D;import org.papervision3d.core.animation.channel.Channel3D;import org.papervision3d.core.controller.AnimationController;import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.*;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.events.FileLoadEvent;import org.papervision3d.objects.DisplayObject3D;/**
* Loads Quake 2 MD2 file with animation!	 * </p>Please feel free to use, but please mention me!</p>	 * 	 * @author Philippe Ajoux (philippe.ajoux@gmail.com) adapted by Tim Knip(tim.knip at gmail.com).	 * @website www.d3s.net	 * @version 04.11.07:11:56
*/
public class MD2 extends TriangleMesh3D implements IAnimatable{/**
*
*/
protected var _animation : AnimationController;/**
*
*/
protected var _controllers : Array;/**
* Variables used in the loading of the file
*/
protected var file : String;protected var loader : URLLoader;protected var loadScale : Number;/**
* MD2 Header data		 * These are all the variables found in the md2_header_t		 * C style struct that starts every MD2 file.
*/
protected var ident : int;protected var version : int;protected var skinwidth : int;protected var skinheight : int;protected var framesize : int;protected var num_skins : int;protected var num_vertices : int;protected var num_st : int;protected var num_tris : int;protected var num_glcmds : int;protected var num_frames : int;protected var offset_skins : int;protected var offset_st : int;protected var offset_tris : int;protected var offset_frames : int;protected var offset_glcmds : int;protected var offset_end : int;protected var _fps : int;protected var _autoPlay : Boolean;/**
* Gets / sets the animation controller.		 * 		 * @see org.papervision3d.core.controller.AnimationController
*/
public function set animation (value:AnimationController) : Void;public function get animation () : AnimationController;/**
* Gets / sets all controlllers.		 * 		 * @return	Array of controllers.		 * 		 * @see org.papervision3d.core.controller.IObjectController		 * @see org.papervision3d.core.controller.AnimationController		 * @see org.papervision3d.core.controller.MorphController		 * @see org.papervision3d.core.controller.SkinController
*/
public function set controllers (value:Array) : Void;public function get controllers () : Array;/**
* Whether the animation is playing. This property is read-only.		 * 		 * @return True when playing.
*/
public function get playing () : Boolean;/**
* Constructor.		 * 		 * @param	autoPlay	Whether to start the _animation automatically.
*/
public function MD2 (autoPlay:Boolean = true);/**
* Pauses the animation.
*/
public function pause () : void;/**
* Plays the animation.		 * 		 * @param 	clip	Clip to play. Default is "all"		 * @param 	loop	Whether the animation should loop. Default is true.
*/
public function play (clip:String = "all", loop:Boolean = true) : void;/**
* Resumes a paused animation.		 * 		 * @param loop 	Whether the animation should loop. Defaults is true.
*/
public function resume (loop:Boolean = true) : void;/**
* Stops the animation.
*/
public function stop () : void;/**
* Loads the MD2.		 * 		 * @param	asset	URL or ByteArray		 * @param	material	The material for the MD2		 * @param	fps		Frames per second		 * @param	scale	Scale
*/
public function load (asset:*, material:MaterialObject3D = null, fps:int = 6, scale:Number = 1) : void;/**
* Project.		 * 		 * @param	parent		 * @param	renderSessionData		 * 		 * @return	Number
*/
public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;/**
* <p>Parses the MD2 file. This is actually pretty straight forward.		 * Only complicated parts (bit convoluded) are the frame loading		 * and "metaface" loading. Hey, it works, use it =)</p>		 * 		 * @param	data	A ByteArray
*/
protected function parse (data:ByteArray) : void;/**
* Reads in all the frames
*/
protected function readFrames (data:ByteArray) : void;/**
* Reads in all that MD2 Header data that is declared as private variables.		 * I know its a lot, and it looks ugly, but only way to do it in Flash
*/
protected function readMd2Header (data:ByteArray) : void;/**
*
*/
protected function loadCompleteHandler (event:Event) : void;/**
* 		 * @param	event		 * @return
*/
protected function loadProgressHandler (event:ProgressEvent) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\Sketchup.as
package org.papervision3d.objects.parsers{import flash.display.Bitmap;import flash.display.Loader;import flash.events.Event;import flash.net.URLRequest;import flash.net.URLStream;import flash.utils.ByteArray;import nochump.util.zip.ZipEntry;import nochump.util.zip.ZipFile;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.materials.BitmapMaterial;import org.papervision3d.materials.utils.MaterialsList;import org.papervision3d.objects.DisplayObject3D;public class Sketchup extends DisplayObject3D{public var model : SketchupCollada;private var allMaterials : MaterialsList;private var count : Number;private var COLLADA : XML;private var totalMaterials : Number;private var _scale : Number;public function Sketchup (kmz:String);private function completeHandler (event:Event) : void;private function loadBitmapCompleteHandler (e:Event) : void;private function build () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\parsers\SketchupCollada.as
package org.papervision3d.objects.parsers{import flash.events.Event;import flash.events.IOErrorEvent;import flash.events.ProgressEvent;import flash.events.SecurityErrorEvent;import flash.net.URLLoader;import flash.net.URLRequest;import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.DisplayObjectContainer3D;import org.papervision3d.core.proto.GeometryObject3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.events.FileLoadEvent;import org.papervision3d.materials.BitmapFileMaterial;import org.papervision3d.materials.utils.MaterialsList;import org.papervision3d.objects.DisplayObject3D;/**
* The Collada class lets you load and parse Collada scenes.	* <p/>	* Recommended DCC Settings:	* <ul><li><b>Maya</b>:	* <ul><li>General Export Options	* <ul><li>Relative Paths, Triangulate.</li></ul>	* <li>Filter Export	* <ul><li>Polygon meshes, Normals, Texture Coordinates.</li></ul>	* </li></ul>	* <li><b>3DS Max</b>:	* <ul><li>Standard Options	* <ul><li>Relative Paths.</li></ul>	* <li>Geometry	* <ul><li>Normals, Triangulate.</li></ul>	* </li></ul>
*/
public class SketchupCollada extends DisplayObject3D{/**
* Default scaling value for constructor.
*/
public static var DEFAULT_SCALING : Number;/**
* Internal scaling value.
*/
private static var INTERNAL_SCALING : Number;/**
* Whether or not the scene has been loaded.
*/
public var loaded : Boolean;public var materialsToLoad : int;private static var COLLADASECTION : String;private static var LIBRARYSECTION : String;private static var ASSETSECTION : String;private static var SCENESECTION : String;private static var LIGHTPREFAB : String;private static var CAMERAPREFAB : String;private static var MATERIALSECTION : String;private static var GEOMETRYSECTION : String;private static var MESHSECTION : String;private static var SOURCESECTION : String;private static var ARRAYSECTION : String;private static var ACCESSORSECTION : String;private static var VERTICESSECTION : String;private static var INPUTTAG : String;private static var POLYGONSSECTION : String;private static var POLYGON : String;private static var NODESECTION : String;private static var LOOKATNODE : String;private static var MATRIXNODE : String;private static var PERSPECTIVENODE : String;private static var ROTATENODE : String;private static var SCALENODE : String;private static var TRANSLATENODE : String;private static var SKEWNODE : String;private static var INSTANCENODE : String;private static var INSTACESCENE : String;private static var PARAMTAG : String;private static var POSITIONINPUT : String;private static var VERTEXINPUT : String;private static var NORMALINPUT : String;private static var TEXCOORDINPUT : String;private static var UVINPUT : String;private static var TANGENTINPUT : String;private var COLLADA : XML;private var _container : DisplayObjectContainer3D;private var _geometries : Object;private var _loader : URLLoader;private var _filename : String;private var _materials : MaterialsList;private var _scaling : Number;private var _yUp : Boolean;private static var toDEGREES : Number;private static var toRADIANS : Number;/**
* Creates a new Collada object.		* <p/>		* The Collada class lets you load and parse a Collada scene.		* <p/>		* COLLADA is a COLLAborative Design Activity for establishing an interchange file format for interactive 3D applications.		* <p/>		* COLLADA defines an open standard XML schema for exchanging digital assets among various container software applications that might otherwise store their assets in incompatible formats.		* <p/>		* COLLADA documents that describe digital assets are XML files, usually identified with a .dae (digital asset exchange) filename extension.		* <p/>		* @param	COLLADA		An XML COLLADA object or the filename of the .dae scene to load.		* <p/>		* @param	materials	A MaterialsList object.		* <p/>		* @param	scale		Scaling factor.		* <p/>
*/
public function SketchupCollada (COLLADA:*, materials:MaterialsList = null, scale:Number = 1);private function loadCollada () : void;private function handleLoadProgress (e:ProgressEvent) : void;private function handleIOError (e:IOErrorEvent) : void;private function handleSecurityLoadError (e:SecurityErrorEvent) : void;private function onComplete (evt:Event) : void;private function buildCollada () : void;private function parseScene (scene:XML) : void;private function parseNode (node:XML, parent:DisplayObjectContainer3D) : void;private function parseGeometry (geometry:XML, instance:DisplayObject3D, matrix2:Matrix3D = null, bindMaterial:Object = null) : void;private function buildObject (semantics:Object, instance:DisplayObject3D, matrix:Matrix3D = null) : void;private function getArray (spaced:String) : Array;private function addMaterial (instance:DisplayObject3D, name:String, bindMaterial:Object) : void;private function onMaterialLoadComplete (event:FileLoadEvent) : void;private function onMaterialLoadError (event:FileLoadEvent) : void;private function getTexture (name:String) : String;private function rotateMatrix (vector:Array) : Matrix3D;private function translateMatrix (vector:Array) : Matrix3D;private function scaleMatrix (vector:Array) : Matrix3D;private function bakedMatrix (matrix:Matrix3D) : Matrix3D;private function deserialize (input:XML, geo:XML) : Array;public function getMaterialsList () : MaterialsList;private function getId (url:String) : String;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\primitives\Arrow.as
package org.papervision3d.objects.primitives{import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.MaterialObject3D;public class Arrow extends TriangleMesh3D{public var verts : Array;public var faceAr : Array;public var uvs : Array;private function v (x:Number, y:Number, z:Number) : void;private function uv (u:Number, v:Number) : void;private function f (vn0:int, vn1:int, vn2:int, uvn0:int, uvn1:int, uvn2:int) : void;public function Arrow (material:MaterialObject3D = null);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\primitives\Cone.as
package org.papervision3d.objects.primitives{import org.papervision3d.core.proto.*;/**
* The Cone class lets you create and display Cones.	* <p/>	* The Cone is divided in vertical and horizontal segment, the smallest combination is two vertical and three horizontal segments.
*/
public class Cone extends Cylinder{/**
* Create a new Cone object.		* <p/>		* @param	material	A MaterialObject3D object that contains the material properties of the object.		* <p/>		* @param	radius		[optional] - Desired radius.		* <p/>		* @param	height		[optional] - Desired height.		* <p/>		* @param	segmentsW	[optional] - Number of segments horizontally. Defaults to 8.		* <p/>		* @param	segmentsH	[optional] - Number of segments vertically. Defaults to 6.		* <p/>
*/
public function Cone (material:MaterialObject3D = null, radius:Number = 100, height:Number = 100, segmentsW:int = 8, segmentsH:int = 6);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\primitives\Cube.as
package org.papervision3d.objects.primitives{import org.papervision3d.Papervision3D;import org.papervision3d.core.geom.*;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.math.Number3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.*;import org.papervision3d.materials.utils.MaterialsList;/**
* The Cube class lets you create and display flat rectangle objects.	* <p/>	* The rectangle can be divided in smaller segments. This is usually done to reduce linear mapping artifacts.	* <p/>	* Dividing the Cube in the direction of the perspective or vanishing point, helps to reduce this problem. Perspective distortion dissapears when the Cube is facing straignt to the camera, i.e. it is perpendicular with the vanishing point of the scene.
*/
public class Cube extends TriangleMesh3D{/**
* Number of segments per axis. Defaults to 1.
*/
public var segments : Number3D;/**
* No faces selected.
*/
public static var NONE : int;/**
* Front face selection
*/
public static var FRONT : int;/**
* Back face selection
*/
public static var BACK : int;/**
* Right face selection
*/
public static var RIGHT : int;/**
* Left face selection
*/
public static var LEFT : int;/**
* Top face selection
*/
public static var TOP : int;/**
* Bottom face selection
*/
public static var BOTTOM : int;/**
* All faces selected.
*/
public static var ALL : int;private var insideFaces : int;private var excludeFaces : int;/**
* Create a new Cube object.		* <p/>		* @param	materials	A MaterialObject3D object that contains the material properties of the object.		* 		* Supported materials are: front, back, right, left, top, bottom & all, for example: 		* 		*	var materials:MaterialsList = new MaterialsList(		*	{		*		all:	new MovieAssetMaterial( "Front", true ), // This is the default material		*		front:  new MovieAssetMaterial( "Front", true ),		*		back:   new MovieAssetMaterial( "Back", true ),		*		right:  new MovieAssetMaterial( "Right", true ),		*		left:   new MovieAssetMaterial( "Left", true ),		*		top:    new MovieAssetMaterial( "Top", true ),		*		bottom: new MovieAssetMaterial( "Bottom", true )		*	} );		* 		* <p/>		* @param	width			[optional] - Desired width.		* <p/>		* @param	depth			[optional] - Desired depth.		* <p/>		* @param	height			[optional] - Desired height.		* <p/>		* @param	segmentsS		[optional] - Number of segments sagitally (plane perpendicular to width). Defaults to 1.		* <p/>		* @param	segmentsT		[optional] - Number of segments transversally (plane perpendicular to depth). Defaults to segmentsS.		* <p/>		* @param	segmentsH		[optional] - Number of segments horizontally (plane perpendicular to height). Defaults to segmentsS.		* <p/>		* @param	insideFaces		[optional] - Faces that are visible from the inside. Defaults to Cube.NONE.		*		* You can add or sustract faces to your selection. For examples: Cube.FRONT+Cube.BACK or Cube.ALL-Cube.Top.		* 		* <p/>		* @param	excludeFaces	[optional] - Faces that will not be created. Defaults to Cube.NONE.		* 		* You can add or sustract faces to your selection. For examples: Cube.FRONT+Cube.BACK or Cube.ALL-Cube.Top.		* 		* <p/>
*/
public function Cube (materials:MaterialsList, width:Number = 500, depth:Number = 500, height:Number = 500, segmentsS:int = 1, segmentsT:int = 1, segmentsH:int = 1, insideFaces:int = 0, excludeFaces:int = 0);protected function buildCube (width:Number, height:Number, depth:Number) : void;protected function buildPlane (mat:String, u:String, v:String, width:Number, height:Number, depth:Number, reverse:Boolean = false) : void;public function destroy () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\primitives\Cylinder.as
package org.papervision3d.objects.primitives{import org.papervision3d.Papervision3D;import org.papervision3d.core.geom.*;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.*;/**
* The Cylinder class lets you create and display Cylinders.	* <p/>	* The Cylinder is divided in vertical and horizontal segment, the smallest combination is two vertical and three horizontal segments.
*/
public class Cylinder extends TriangleMesh3D{/**
* Number of segments horizontally. Defaults to 8.
*/
public var segmentsW : Number;/**
* Number of segments vertically. Defaults to 6.
*/
public var segmentsH : Number;/**
* Default radius of Cylinder if not defined.
*/
public static const DEFAULT_RADIUS : Number;/**
* Default height if not defined.
*/
public static const DEFAULT_HEIGHT : Number;/**
* Default scale of Cylinder texture if not defined.
*/
public static const DEFAULT_SCALE : Number;/**
* Default value of gridX if not defined.
*/
public static const DEFAULT_SEGMENTSW : Number;/**
* Default value of gridY if not defined.
*/
public static const DEFAULT_SEGMENTSH : Number;/**
* Minimum value of gridX.
*/
public static const MIN_SEGMENTSW : Number;/**
* Minimum value of gridY.
*/
public static const MIN_SEGMENTSH : Number;/**
* Create a new Cylinder object.		* <p/>		* @param	material	A MaterialObject3D object that contains the material properties of the object.		* <p/>		* @param	radius		[optional] - Desired radius.		* <p/>		* @param	segmentsW	[optional] - Number of segments horizontally. Defaults to 8.		* <p/>		* @param	segmentsH	[optional] - Number of segments vertically. Defaults to 6.		* <p/>		* @param	topRadius	[optional] - An optional parameter for con- or diverging cylinders.		* <p/>		* @param	topFace		[optional] - An optional parameter specifying if the top face of the cylinder should be drawn.		* <p/>		* @param	bottomFace	[optional] - An optional parameter specifying if the bottom face of the cylinder should be drawn.		* <p/>
*/
public function Cylinder (material:MaterialObject3D = null, radius:Number = 100, height:Number = 100, segmentsW:int = 8, segmentsH:int = 6, topRadius:Number = -1, topFace:Boolean = true, bottomFace:Boolean = true);private function buildCylinder (fRadius:Number, fHeight:Number, fTopRadius:Number, fTopFace:Boolean, fBottomFace:Boolean) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\primitives\PaperPlane.as
package org.papervision3d.objects.primitives{import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.proto.MaterialObject3D;/**
* The PaperPlane class lets you create a paper plane object.	* <p/>	* Paper planes are useful for testing, when you want to know the direction an object is facing.
*/
public class PaperPlane extends TriangleMesh3D{/**
* Default value of segments.
*/
public static var DEFAULT_SCALE : Number;/**
* Creates a new PaperPlane object.		* <p/>		* @param	material	A Material3D object that contains the material properties of the object.		* <p/>		* @param	scale		[optional] - Scaling factor		* <p/>
*/
public function PaperPlane (material:MaterialObject3D = null, scale:Number = 0);private function buildPaperPlane (scale:Number) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\primitives\Plane.as
package org.papervision3d.objects.primitives{import org.papervision3d.Papervision3D;import org.papervision3d.core.geom.*;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.*;/**
* The Plane class lets you create and display flat rectangle objects.	* <p/>	* The rectangle can be divided in smaller segments. This is usually done to reduce linear mapping artifacts.	* <p/>	* Dividing the plane in the direction of the perspective or vanishing point, helps to reduce this problem. Perspective distortion dissapears when the plane is facing straignt to the camera, i.e. it is perpendicular with the vanishing point of the scene.
*/
public class Plane extends TriangleMesh3D{/**
* Number of segments horizontally. Defaults to 1.
*/
public var segmentsW : Number;/**
* Number of segments vertically. Defaults to 1.
*/
public var segmentsH : Number;/**
* Default size of Plane if not texture is defined.
*/
public static var DEFAULT_SIZE : Number;/**
* Default size of Plane if not texture is defined.
*/
public static var DEFAULT_SCALE : Number;/**
* Default value of gridX if not defined. The default value of gridY is gridX.
*/
public static var DEFAULT_SEGMENTS : Number;/**
* Create a new Plane object.		* <p/>		* @param	material	A MaterialObject3D object that contains the material properties of the object.		* <p/>		* @param	width		[optional] - Desired width or scaling factor if there's bitmap texture in material and no height is supplied.		* <p/>		* @param	height		[optional] - Desired height.		* <p/>		* @param	segmentsW	[optional] - Number of segments horizontally. Defaults to 1.		* <p/>		* @param	segmentsH	[optional] - Number of segments vertically. Defaults to segmentsW.		* <p/>
*/
public function Plane (material:MaterialObject3D = null, width:Number = 0, height:Number = 0, segmentsW:Number = 0, segmentsH:Number = 0);private function buildPlane (width:Number, height:Number) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\primitives\Sphere.as
package org.papervision3d.objects.primitives{import org.papervision3d.Papervision3D;import org.papervision3d.core.geom.*;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.math.NumberUV;import org.papervision3d.core.proto.*;/**
* The Sphere class lets you create and display spheres.	* <p/>	* The sphere is divided in vertical and horizontal segment, the smallest combination is two vertical and three horizontal segments.
*/
public class Sphere extends TriangleMesh3D{/**
* Number of segments horizontally. Defaults to 8.
*/
private var segmentsW : Number;/**
* Number of segments vertically. Defaults to 6.
*/
private var segmentsH : Number;/**
* Default radius of Sphere if not defined.
*/
public static var DEFAULT_RADIUS : Number;/**
* Default scale of Sphere texture if not defined.
*/
public static var DEFAULT_SCALE : Number;/**
* Default value of gridX if not defined.
*/
public static var DEFAULT_SEGMENTSW : Number;/**
* Default value of gridY if not defined.
*/
public static var DEFAULT_SEGMENTSH : Number;/**
* Minimum value of gridX.
*/
public static var MIN_SEGMENTSW : Number;/**
* Minimum value of gridY.
*/
public static var MIN_SEGMENTSH : Number;/**
* Create a new Sphere object.		* <p/>		* @param	material	A MaterialObject3D object that contains the material properties of the object.		* <p/>		* @param	radius		[optional] - Desired radius.		* <p/>		* @param	segmentsW	[optional] - Number of segments horizontally. Defaults to 8.		* <p/>		* @param	segmentsH	[optional] - Number of segments vertically. Defaults to 6.		* <p/>
*/
public function Sphere (material:MaterialObject3D = null, radius:Number = 100, segmentsW:int = 8, segmentsH:int = 6);private function buildSphere (fRadius:Number) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\Graphics3D.as
package org.papervision3d.objects.special{import org.papervision3d.core.proto.GeometryObject3D;import flash.display.BitmapData;import flash.geom.Matrix;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.objects.special.commands.BeginFill;import org.papervision3d.objects.special.commands.CurveTo;import org.papervision3d.objects.special.commands.EndFill;import org.papervision3d.objects.special.commands.LineStyle;import org.papervision3d.objects.special.commands.LineTo;import org.papervision3d.objects.special.commands.MoveTo;import org.papervision3d.objects.DisplayObject3D;/**
* @author Mark Barcinski
*/
public class Graphics3D{private var vectorshape : VectorShape3D;public function Graphics3D (vectorshape:VectorShape3D);public function beginFill (color:uint, alpha:Number = 1) : void;public function endFill () : void;public function curveTo (controlX:Number, controlY:Number, anchorX:Number, anchorY:Number) : void;public function lineTo (x:Number, y:Number) : void;public function moveTo (x:Number, y:Number) : void;public function lineStyle (thickness:Number = -1, color:uint = 0, alpha:Number = 1.0, pixelHinting:Boolean = false, scaleMode:String = "normal", caps:String = null, joints:String = null, miterLimit:Number = 3) : void;public function drawRect (x:Number, y:Number, width:Number, height:Number) : void;public function drawRoundRect (x:Number, y:Number, width:Number, height:Number, ellipseWidth:Number, ellipseHeight:Number) : void;public function clear () : void;public function drawCircle (x:Number, y:Number, radius:Number, numPoints:int = 8) : void;public function drawEllipse (x:Number, y:Number, width:Number, height:Number, numPoints:int = 8) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\ParticleField.as
package org.papervision3d.objects.special{import org.papervision3d.core.geom.Particles;import org.papervision3d.core.geom.renderables.Particle;import org.papervision3d.materials.special.ParticleMaterial;/**
* @Author Ralph Hauwert
*/
public class ParticleField extends Particles{private var fieldDepth : Number;private var fieldHeight : Number;private var fieldWidth : Number;private var quantity : int;private var color : int;/**
* The ParticleField class creates an object with an amount of particles randomly distributed over a specied 3d area.
		* @param	material 	The Material for the to be created particles
		* @param	quantity	The number of particles in the field
		* @param	particleSize	The size of the created particles
		* @param	fieldWidth 	The width of the area
		* @param 	fieldHeight The height of the area
		* @param	fieldDepth	The depth of the area
*/
public function ParticleField (mat:ParticleMaterial, quantity:int = 200, particleSize:Number = 4, fieldWidth:Number = 2000, fieldHeight:Number = 2000, fieldDepth:Number = 2000);private function createParticles (size:Number) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\SimpleLevelOfDetail.as
package org.papervision3d.objects.special{import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;public class SimpleLevelOfDetail extends DisplayObject3D{public var currentObject : DisplayObject3D;public var objects : Array;public var minDepth : Number;public var maxDepth : Number;public var distances : Array;public function SimpleLevelOfDetail (objects:Array, minDepth:Number = 1000, maxDepth:Number = 10000, distances:Array = null);public function updateLoD (index:Number = -1) : void;public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\Skin3D.as
package org.papervision3d.objects.special{import org.papervision3d.core.geom.TriangleMesh3D;import org.papervision3d.core.math.Matrix3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;/**
* @author Tim Knip
*/
public class Skin3D extends TriangleMesh3D{public function Skin3D (material:MaterialObject3D, vertices:Array, faces:Array, name:String = null);public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;public function clone () : DisplayObject3D;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\Sound3D.as
package org.papervision3d.objects.special{import flash.media.Sound;import flash.media.SoundChannel;import flash.media.SoundTransform;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.objects.DisplayObject3D;public class Sound3D extends DisplayObject3D{public var sound : Sound;public var soundChannel : SoundChannel;public var maxSoundDistance : Number;/**
* This is used to control the volume and could also be used to control the pitch and/or fader  		* if a sound engine that supports it is used. It puts out values from -1 to 1. Values from 0 to -1 is 		* when the object is behind the camera.
*/
public var soundDistance : Number;public var soundPan : Number;public function play (startTime:Number = 0, loops:int = 0, sndTransform:SoundTransform = null) : void;public function stop (startTime:Number = 0, loops:int = 0, sndTransform:SoundTransform = null) : void;private function setPan (pan:Number) : void;private function setVolume (volume:Number) : void;public function updateSound (camera:CameraObject3D) : void;public function Sound3D (soundObj:Sound = null);public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\UCS.as
package org.papervision3d.objects.special{import org.papervision3d.core.geom.Lines3D;import org.papervision3d.core.geom.renderables.Line3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.materials.special.LineMaterial;/**
* @author Tim Knip
*/
public class UCS extends Lines3D{/**
* 		 * @param	scale		 * @param	name		 * @return
*/
public function UCS (scale:Number = 500, name:String = null);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\VectorShape3D.as
package org.papervision3d.objects.special{import org.papervision3d.core.geom.Vertices3D;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.proto.GeometryObject3D;import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.core.render.command.RenderVectorShape;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.special.VectorShapeMaterial;import org.papervision3d.objects.DisplayObject3D;/**
* @author Mark Barcinski
*/
public class VectorShape3D extends Vertices3D{public var graphicsCommands : Array;public var renderCommand : RenderVectorShape;public var graphics : Graphics3D;public function set material (material:MaterialObject3D) : Void;public function VectorShape3D (material:MaterialObject3D, vertices:Array = null, name:String = null);public function project (parent:DisplayObject3D, renderSessionData:RenderSessionData) : Number;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\commands\BeginFill.as
package org.papervision3d.objects.special.commands{import org.papervision3d.objects.special.commands.IVectorShape;import flash.display.Graphics;/**
* @author Mark Barcinski
*/
public class BeginFill implements IVectorShape{public var fillColor : uint;public var fillAlpha : Number;public function BeginFill (fillColor:uint = 0x000000, fillAlpha:Number = 1);public function draw (graphics:Graphics, prevDrawn:Boolean) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\commands\CurveTo.as
package org.papervision3d.objects.special.commands{import flash.display.Graphics;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.geom.renderables.Vertex3DInstance;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.materials.special.VectorShapeMaterial;import org.papervision3d.objects.special.commands.IVectorShape;/**
* @author Mark Barcinski
*/
public class CurveTo implements IVectorShape{public var control : Vertex3D;public var anchor : Vertex3D;private static var halfPI : Number;public function CurveTo (control:Vertex3D, anchor:Vertex3D);public function draw (graphics:Graphics, prevDrawn:Boolean) : Boolean;public function drawScaledStroke (prevVertex:Vertex3D, graphics:Graphics, renderSessionData:RenderSessionData, material:VectorShapeMaterial) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\commands\EndFill.as
package org.papervision3d.objects.special.commands{import org.papervision3d.objects.special.commands.IVectorShape;import flash.display.Graphics;/**
* @author Mark Barcinski
*/
public class EndFill implements IVectorShape{public function draw (graphics:Graphics, prevDrawn:Boolean) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\commands\IVectorShape.as
package org.papervision3d.objects.special.commands{import flash.display.Graphics;/**
* @author Mark Barcinski
*/
public interface IVectorShape{public function draw (graphics:Graphics, prevDrawn:Boolean) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\commands\LineStyle.as
package org.papervision3d.objects.special.commands{import flash.display.Graphics;/**
* @author Mark Barcinski
*/
public class LineStyle implements IVectorShape{public var thickness : Number;public var color : uint;public var alpha : Number;public var pixelHinting : Boolean;public var scaleMode : String;public var caps : String;public var joints : String;public var miterLimit : Number;public function LineStyle (thickness:Number = -1, color:uint = 0, alpha:Number = 1.0, pixelHinting:Boolean = false, scaleMode:String = "normal", caps:String = null, joints:String = null, miterLimit:Number = 3);public function draw (graphics:Graphics, prevDrawn:Boolean) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\commands\LineTo.as
package org.papervision3d.objects.special.commands{import org.papervision3d.materials.special.VectorShapeMaterial;import flash.display.Graphics;import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.geom.renderables.Vertex3DInstance;/**
* @author Mark Barcinski
*/
public class LineTo implements IVectorShape{public var vertex : Vertex3D;private static const halfPI : Number;public function LineTo (vertex:Vertex3D);public function draw (graphics:Graphics, prevDrawn:Boolean) : Boolean;public function drawScaledStroke (prevVertex:Vertex3D, graphics:Graphics, renderSessionData:RenderSessionData, material:VectorShapeMaterial) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\objects\special\commands\MoveTo.as
package org.papervision3d.objects.special.commands{import flash.display.Graphics;import org.papervision3d.core.geom.renderables.Vertex3D;/**
* @author Mark Barcinski
*/
public class MoveTo implements IVectorShape{public var vertex : Vertex3D;public function MoveTo (vertex:Vertex3D);public function draw (graphics:Graphics, prevDrawn:Boolean) : Boolean;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\render\BasicRenderEngine.as
package org.papervision3d.render{import flash.geom.Point;import org.papervision3d.core.clipping.DefaultClipping;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.proto.SceneObject3D;import org.papervision3d.core.render.AbstractRenderEngine;import org.papervision3d.core.render.IRenderEngine;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.data.RenderStatistics;import org.papervision3d.core.render.filter.BasicRenderFilter;import org.papervision3d.core.render.filter.IRenderFilter;import org.papervision3d.core.render.material.MaterialManager;import org.papervision3d.core.render.project.BasicProjectionPipeline;import org.papervision3d.core.render.project.ProjectionPipeline;import org.papervision3d.core.render.sort.BasicRenderSorter;import org.papervision3d.core.render.sort.IRenderSorter;import org.papervision3d.core.utils.StopWatch;import org.papervision3d.events.RendererEvent;import org.papervision3d.view.Viewport3D;import org.papervision3d.view.layer.ViewportLayer;/**
* <code>BasicRenderEngine</code> links <code>Viewport3D</code>s, 
	 * <code>Scene3D</code>, and <code>Camera3D</code>s together
	 *  by gathering in all of their data, rendering the data, then calling the 
	 *  necessary functions to update from the rendered data
*/
public class BasicRenderEngine extends AbstractRenderEngine implements IRenderEngine{/**
* The type of projection pipeline used for projecting and culling. Defaults
		 * to BasicProjectionPipeline
		 * 
		 * @see org.papervision3d.core.render.project.BasicProjectionPipeline
*/
public var projectionPipeline : ProjectionPipeline;/**
* The type of z-sorting to be used with the rendered data based on 
		 * their respective screen depth. Defaults to <code>BasicRenderSorter</code>.
		 * 
		 * @see org.papervision3d.core.render.sort.BasicRenderSorter
*/
public var sorter : IRenderSorter;public var clipping : DefaultClipping;/**
* A filter (such as FogFilter) to be used in the renderList. Defaults to 
		 * <code>BasicRenderFilter</code>
		 * 
		 * @see org.papervision3d.core.render.filter.BasicRenderFilter
		 * @see org.papervision3d.core.render.filter.FogFilter
*/
public var filter : IRenderFilter;/**
@private
*/
protected var renderDoneEvent : RendererEvent;/**
@private
*/
protected var projectionDoneEvent : RendererEvent;/**
@private
*/
protected var renderStatistics : RenderStatistics;/**
@private
*/
protected var renderList : Array;/**
@private
*/
protected var renderSessionData : RenderSessionData;/**
@private
*/
protected var cleanRHD : RenderHitData;/**
@private
*/
protected var stopWatch : StopWatch;/**
* Creates and prepares all the objects and events needed for rendering
*/
public function BasicRenderEngine ();/**
* Destroys all of <code>BasicRenderEngine</code>'s objects for Garbage Collection purposes.
*/
public function destroy () : void;/**
@private
*/
protected function init () : void;/**
* Takes the data from the scene, camera, and viewport, renders it, then updates the viewport
		 * 
		 * @param camera			The <code>CameraObject3D</code> looking at the scene
		 * @param scene				The <code>Scene3D</code> holding the <code>DisplayObject3D</code>'s you want rendered
		 * @param viewPort			The <code>Viewport3D</code> that will display your scene
		 * 
		 * @return RenderStatistics		The <code>RenderStatistics</code> objectholds all the data from the last render
*/
public function renderScene (scene:SceneObject3D, camera:CameraObject3D, viewPort:Viewport3D) : RenderStatistics;/**
* Works similarly to <code>renderScene</code>, but also takes an array 
		 * of specific <code>ViewportLayer3D</code>'s to
		 * render
		 * 
		 * @param camera				The <code>CameraObject3D</code> looking at the scene
		 * @param scene					The <code>Scene3D</code> holding the <code>DisplayObject3D</code>'s you want rendered
		 * @param viewPort				The <code>Viewport3D</code> that will display your scene
		 * 
		 * @return RenderStatistics		The <code>RenderStatistics</code> objectholds all the data from the last render
		 * 
		 * @see #renderScene
*/
public function renderLayers (scene:SceneObject3D, camera:CameraObject3D, viewPort:Viewport3D, layers:Array = null) : RenderStatistics;/**
@private
*/
private function getLayerObjects (layers:Array) : Array;/**
@private
*/
protected function doRender (renderSessionData:RenderSessionData, layers:Array = null) : RenderStatistics;/**
* @private
*/
public function hitTestPoint2D (point:Point, viewPort3D:Viewport3D) : RenderHitData;/**
* Adds a <code>renderCommand</code> to the <code>renderList</code>
		 * 
		 * @param renderCommand		A command to be used in the <code>renderList</code>
		 * 
		 * @return int				An integer representing the length of the <code>renderList</code>
*/
public function addToRenderList (renderCommand:RenderableListItem) : int;/**
* Removes a <code>renderCommand</code> from the <code>renderList</code>
		 * 
		 * @param renderCommand		A command to be removed from the <code>renderList</code>
		 * 
		 * @return int				An integer representing the length of the <code>renderList</code>
*/
public function removeFromRenderList (renderCommand:IRenderListItem) : int;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\render\LazyRenderEngine.as
package org.papervision3d.render{import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.render.IRenderEngine;import org.papervision3d.core.render.data.RenderStatistics;import org.papervision3d.scenes.Scene3D;import org.papervision3d.view.Viewport3D;/**
* @Author Ralph Hauwert
*/
public class LazyRenderEngine extends BasicRenderEngine implements IRenderEngine{protected var _camera : CameraObject3D;protected var _scene : Scene3D;protected var _viewport : Viewport3D;public function set camera (camera:CameraObject3D) : Void;public function get camera () : CameraObject3D;public function set scene (scene:Scene3D) : Void;public function get scene () : Scene3D;public function set viewport (viewport:Viewport3D) : Void;public function get viewport () : Viewport3D;public function LazyRenderEngine (scene:Scene3D, camera:CameraObject3D, viewport:Viewport3D);public function render () : RenderStatistics;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\render\QuadrantRenderEngine.as
package org.papervision3d.render{import org.papervision3d.cameras.Camera3D;import org.papervision3d.core.clipping.draw.Clipping;import org.papervision3d.core.clipping.draw.RectangleClipping;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.proto.SceneObject3D;import org.papervision3d.core.render.IRenderEngine;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.QuadTree;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.data.RenderStatistics;import org.papervision3d.core.render.filter.AbstractQuadrantFilter;import org.papervision3d.core.render.filter.BasicRenderFilter;import org.papervision3d.core.render.filter.QuadrantFilter;import org.papervision3d.core.render.filter.QuadrantZFilter;import org.papervision3d.core.render.material.MaterialManager;import org.papervision3d.core.render.project.BasicProjectionPipeline;import org.papervision3d.core.render.sort.BasicRenderSorter;import org.papervision3d.core.utils.StopWatch;import org.papervision3d.events.RendererEvent;import org.papervision3d.scenes.Scene3D;import org.papervision3d.view.Viewport3D;import org.papervision3d.view.layer.ViewportLayer;/**
* <code>BasicRenderEngine</code> links <code>Viewport3D</code>s, 
	 * <code>Scene3D</code>, and <code>Camera3D</code>s together
	 *  by gathering in all of their data, rendering the data, then calling the 
	 *  necessary functions to update from the rendered data
*/
public class QuadrantRenderEngine extends BasicRenderEngine implements IRenderEngine{public var quadTree : QuadTree;private var clip : Clipping;public var quadFilters : Array;public static var CORRECT_Z_FILTER : Number;public static var QUAD_SPLIT_FILTER : Number;public static var ALL_FILTERS : Number;/**
* Creates and prepares all the objects and events needed for rendering
*/
public function QuadrantRenderEngine (type:Number = 3);/**
@private
*/
protected function init () : void;/**
* Takes the data from the scene, camera, and viewport, renders it, then updates the viewport
		 * 
		 * @param camera			The <code>CameraObject3D</code> looking at the scene
		 * @param scene				The <code>Scene3D</code> holding the <code>DisplayObject3D</code>'s you want rendered
		 * @param viewPort			The <code>Viewport3D</code> that will display your scene
		 * 
		 * @return RenderStatistics		The <code>RenderStatistics</code> objectholds all the data from the last render
*/
public function renderScene (scene:SceneObject3D, camera:CameraObject3D, viewPort:Viewport3D) : RenderStatistics;/**
@private
*/
private function getLayerObjects (layers:Array) : Array;/**
@private
*/
protected function doRender (renderSessionData:RenderSessionData, layers:Array = null) : RenderStatistics;public function addToRenderList (renderCommand:RenderableListItem) : int;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\scenes\Scene3D.as
package org.papervision3d.scenes{import org.papervision3d.core.proto.*;/**
* The Scene3D class lets you create a scene where all objects are rendered in the same container.	* <p/>	* A scene is the place where objects are placed, it contains the 3D environment.
*/
public class Scene3D extends SceneObject3D{/**
* The Scene3D class lets you create a scene where all objects are rendered in the same container.
*/
public function Scene3D ();}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\Font3D.as
package org.papervision3d.typography{/**
* @author Mark Barcinski
*/
public class Font3D{public function get motifs () : Object;public function get widths () : Object;public function get height () : Number;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\Letter3D.as
package org.papervision3d.typography{/**
* @author Mark Barcinski
*/
public interface Letter3D{public function get width () : Number;public function set width (value:Number) : Void;public function get height () : Number;public function set height (value:Number) : Void;public function get char () : String;public function set char (value:String) : Void;public function get font () : Font3D;public function set font (value:Font3D) : Void;public function get x () : Number;public function set x (value:Number) : Void;public function get y () : Number;public function set y (value:Number) : Void;public function get z () : Number;public function set z (value:Number) : Void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\Text3D.as
package org.papervision3d.typography{import org.papervision3d.core.proto.MaterialObject3D;import org.papervision3d.materials.special.Letter3DMaterial;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.objects.special.VectorShape3D;/**
* @author Mark Barcinski
*/
public class Text3D extends VectorShape3D{public var letters : Array;protected var _text : String;public var font : Font3D;public var lines : Array;private var _letterSpacing : Number;private var _lineSpacing : Number;private var _align : String;private var _lineHeight : Number;public function get letterSpacing () : Number;public function set letterSpacing (spacing:Number) : Void;public function get lineSpacing () : Number;public function set lineSpacing (lineSpacing:Number) : Void;public function get align () : String;public function set align (align:String) : Void;public function get text () : String;public function set text (text:String) : Void;public function Text3D (text:String, font:Font3D, material:MaterialObject3D, name:String = null);protected function createLetters (material:MaterialObject3D) : void;private function alignLetters () : void;private function removeLetters () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\VectorLetter3D.as
package org.papervision3d.typography{import org.papervision3d.core.geom.renderables.Vertex3D;import org.papervision3d.materials.special.Letter3DMaterial;import org.papervision3d.objects.special.VectorShape3D;/**
* @author Mark Barcinski
*/
public class VectorLetter3D extends VectorShape3D implements Letter3D{private var _width : Number;private var _height : Number;private var _char : String;private var _font : Font3D;public function get width () : Number;public function set width (value:Number) : Void;public function get height () : Number;public function set height (height:Number) : Void;public function get char () : String;public function set char (value:String) : Void;public function get font () : Font3D;public function set font (value:Font3D) : Void;public function VectorLetter3D (char:String, material:Letter3DMaterial, font:Font3D);protected function getLetterFromFont () : void;protected function createVertices (motif:Array) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\fonts\HelveticaBold.as
package org.papervision3d.typography.fonts{import org.papervision3d.typography.Font3D;public class HelveticaBold extends Font3D{public static var __motifs : Object;public static var __widths : Object;public static var __height : Number;public static var __initialized : Boolean;public function get motifs () : Object;public function get widths () : Object;public function get height () : Number;public static function initialize () : void;private static function initializeMotifsUppercase () : void;private static function initializeMotifsLowercase () : void;private static function initializeMotifsNumbers () : void;private static function initializeMotifsPunctuation () : void;private static function initializeWidthsUppercase () : void;private static function initializeWidthsLowercase () : void;private static function initializeWidthsNumbers () : void;private static function initializeWidthsPunctuation () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\fonts\HelveticaLight.as
package org.papervision3d.typography.fonts{import org.papervision3d.typography.Font3D;public class HelveticaLight extends Font3D{public static var __motifs : Object;public static var __widths : Object;public static var __height : Number;public static var __initialized : Boolean;public function get motifs () : Object;public function get widths () : Object;public function get height () : Number;public static function initialize () : void;private static function initializeMotifsUppercase () : void;private static function initializeMotifsLowercase () : void;private static function initializeMotifsNumbers () : void;private static function initializeMotifsPunctuation () : void;private static function initializeWidthsUppercase () : void;private static function initializeWidthsLowercase () : void;private static function initializeWidthsNumbers () : void;private static function initializeWidthsPunctuation () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\fonts\HelveticaMedium.as
package org.papervision3d.typography.fonts{import org.papervision3d.typography.Font3D;public class HelveticaMedium extends Font3D{public static var __motifs : Object;public static var __widths : Object;public static var __height : Number;public static var __initialized : Boolean;public function get motifs () : Object;public function get widths () : Object;public function get height () : Number;public static function initialize () : void;private static function initializeMotifsUppercase () : void;private static function initializeMotifsLowercase () : void;private static function initializeMotifsNumbers () : void;private static function initializeMotifsPunctuation () : void;private static function initializeWidthsUppercase () : void;private static function initializeWidthsLowercase () : void;private static function initializeWidthsNumbers () : void;private static function initializeWidthsPunctuation () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\typography\fonts\HelveticaRoman.as
package org.papervision3d.typography.fonts{import org.papervision3d.typography.Font3D;public class HelveticaRoman extends Font3D{public static var __motifs : Object;public static var __widths : Object;public static var __height : Number;public static var __initialized : Boolean;public function get motifs () : Object;public function get widths () : Object;public function get height () : Number;public static function initialize () : void;private static function initializeMotifsUppercase () : void;private static function initializeMotifsLowercase () : void;private static function initializeMotifsNumbers () : void;private static function initializeMotifsPunctuation () : void;private static function initializeWidthsUppercase () : void;private static function initializeWidthsLowercase () : void;private static function initializeWidthsNumbers () : void;private static function initializeWidthsPunctuation () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\AbstractView.as
package org.papervision3d.view{import flash.display.Sprite;import flash.events.Event;import org.papervision3d.core.proto.CameraObject3D;import org.papervision3d.core.view.IView;import org.papervision3d.render.BasicRenderEngine;import org.papervision3d.scenes.Scene3D;/**
* @Author Ralph Hauwert
*/
public class AbstractView extends Sprite implements IView{protected var _camera : CameraObject3D;protected var _height : Number;protected var _width : Number;public var scene : Scene3D;public var viewport : Viewport3D;public var renderer : BasicRenderEngine;public function get camera () : CameraObject3D;public function set viewportWidth (width:Number) : Void;public function get viewportWidth () : Number;public function set viewportHeight (height:Number) : Void;public function get viewportHeight () : Number;public function AbstractView ();public function startRendering () : void;public function stopRendering (reRender:Boolean = false, cacheAsBitmap:Boolean = false) : void;public function singleRender () : void;protected function onRenderTick (event:Event = null) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\BasicView.as
package org.papervision3d.view{import org.papervision3d.cameras.SpringCamera3D;import org.papervision3d.cameras.Camera3D;import org.papervision3d.cameras.CameraType;import org.papervision3d.cameras.DebugCamera3D;import org.papervision3d.core.view.IView;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.render.BasicRenderEngine;import org.papervision3d.scenes.Scene3D;/**
* <p>
	 * BasicView provides a simple template for quickly setting up
	 * basic Papervision3D projects by creating a viewport, scene,
	 * camera, and renderer for you. Because BasicView is a subclass of
	 * Sprite, it can be added to any DisplayObject.
	 * 
	 * </p>
	 * 
	 * <p>
	 * <p>
	 * Example:
	 * </p>
	 * <pre><code>
	 * var width:Number = 640;
	 * var heigth:Number = 480;
	 * var scaleToStage:Boolean = true;
	 * var interactive:Boolean = true;
	 * var cameraType:String = Camera3D.TYPE;
	 * 
	 * var myBasicView:BasicView = new BasicView(width, height, scaleToStage, interactive, cameraType);
	 * myDisplayObject.addChild(myBasicView);
	 * </code></pre>
	 * </p>
	 * @author Ralph Hauwert
*/
public class BasicView extends AbstractView implements IView{/**
* Exposes the camera as a <code>Camera3D</code>
*/
public function get cameraAsCamera3D () : Camera3D;/**
* Exposes the camera as a <code>DebugCamera3D</code>
*/
public function get cameraAsDebugCamera3D () : DebugCamera3D;/**
* @param viewportWidth		Width of the viewport 
		 * @param viewportHeight	Height of the viewport
		 * @param scaleToStage		Whether you viewport should scale with the stage
		 * @param interactive		Whether your scene should be interactive
		 * @param cameraType		A String for the type of camera. @see org.papervision3d.cameras.CameraType
		 *
*/
public function BasicView (viewportWidth:Number = 640, viewportHeight:Number = 480, scaleToStage:Boolean = true, interactive:Boolean = false, cameraType:String = "Target");}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\BitmapViewport3D.as
package org.papervision3d.view{import flash.display.Bitmap;import flash.display.BitmapData;import flash.events.Event;import flash.geom.Matrix;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.view.IViewport3D;/**
* @Author Ralph Hauwert
*/
public class BitmapViewport3D extends Viewport3D implements IViewport3D{public var bitmapData : BitmapData;public var _containerBitmap : Bitmap;protected var _fillBeforeRender : Boolean;protected var bgColor : int;protected var bitmapTransparent : Boolean;public function set fillBeforeRender (value:Boolean) : Void;public function get fillBeforeRender () : Boolean;public function set autoClipping (clip:Boolean) : Void;public function get autoClipping () : Boolean;public function BitmapViewport3D (viewportWidth:Number = 640, viewportHeight:Number = 480, autoScaleToStage:Boolean = false, bitmapTransparent:Boolean = false, bgColor:int = 0x000000, interactive:Boolean = false, autoCulling:Boolean = true);public function updateAfterRender (renderSessionData:RenderSessionData) : void;protected function onStageResize (event:Event = null) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\Viewport3D.as
package org.papervision3d.view{import flash.display.Sprite;import flash.display.StageAlign;import flash.display.StageScaleMode;import flash.events.Event;import flash.geom.Point;import flash.geom.Rectangle;import flash.utils.Dictionary;import org.papervision3d.core.culling.DefaultLineCuller;import org.papervision3d.core.culling.DefaultParticleCuller;import org.papervision3d.core.culling.DefaultTriangleCuller;import org.papervision3d.core.culling.ILineCuller;import org.papervision3d.core.culling.IParticleCuller;import org.papervision3d.core.culling.ITriangleCuller;import org.papervision3d.core.culling.RectangleLineCuller;import org.papervision3d.core.culling.RectangleParticleCuller;import org.papervision3d.core.culling.RectangleTriangleCuller;import org.papervision3d.core.culling.ViewportObjectFilter;import org.papervision3d.core.geom.renderables.Triangle3D;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.render.IRenderEngine;import org.papervision3d.core.render.command.IRenderListItem;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.core.render.data.RenderHitData;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.utils.InteractiveSceneManager;import org.papervision3d.core.view.IViewport3D;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.layer.ViewportBaseLayer;import org.papervision3d.view.layer.ViewportLayer;/**
Added LineCulling on 22 May 08 by Seb Lee-Delisle
*/
public class Viewport3D extends Sprite implements IViewport3D{/**
@private
*/
protected var _width : Number;/**
@private
*/
protected var _hWidth : Number;/**
@private
*/
protected var _height : Number;/**
@private
*/
protected var _hHeight : Number;/**
@private
*/
protected var _autoClipping : Boolean;/**
@private
*/
protected var _autoCulling : Boolean;/**
@private
*/
protected var _autoScaleToStage : Boolean;/**
@private
*/
protected var _interactive : Boolean;/**
@private
*/
protected var _lastRenderer : IRenderEngine;/**
@private
*/
protected var _viewportObjectFilter : ViewportObjectFilter;/**
@private
*/
protected var _containerSprite : ViewportBaseLayer;/**
@private
*/
protected var _layerInstances : Dictionary;/**
* sizeRectangle stores the width and the height of the Viewport3D sprite
		 * @see #viewportWidth
		 * @see #viewportHeight
*/
public var sizeRectangle : Rectangle;/**
* cullingRectangle stores the width, height, x, y of the culling rectangle. It's used to determine the bounds in which the triangles are drawn.
		 * @see #autoCulling
*/
public var cullingRectangle : Rectangle;/**
* triangleCuller uses the cullingRectangle to determine which triangles will not be rendered in BasicRenderEngine
		 * @see #autoCulling
*/
public var triangleCuller : ITriangleCuller;/**
* particleCuller uses the cullingRectangle to determine which particles will not be rendered in BasicRenderEngine
		 * @see #autoCulling
*/
public var particleCuller : IParticleCuller;/**
* lineCuller uses the culling Rectangle to determine which particles will not be rendered in BasicRenderEngine
		 * @see #autoCulling
*/
public var lineCuller : ILineCuller;/**
* lastRenderList stores RenderableListItems (Triangles, Lines, Pixels, Particles, Fog) of everything that was rendered in the last pass. This list is used to determine hitTests in hitTestPoint2D.
		 * @see #hitTestPoint2D()
*/
public var lastRenderList : Array;/**
* interactiveSceneManager manages the interaction between the user's mouse and the Papervision3D scene. This is done by checking the mouse against renderHitData. renderHitData is generated from hitTestPoint2D and passed into the interactiveSceneManager to check agains the various mouse actions.
		 * @see #hitTestPoint2D()
		 * @see org.papervision3d.core.utils.InteractiveSceneManager#renderHitData
*/
public var interactiveSceneManager : InteractiveSceneManager;/**
@private
*/
protected var renderHitData : RenderHitData;private var stageScaleModeSet : Boolean;/**
* Sets the viewport width
		 * @param width		A number designating the width of the viewport
*/
public function set viewportWidth (width:Number) : Void;/**
* Width of the <code>Viewport3D</code>
*/
public function get viewportWidth () : Number;/**
* Sets the the height of the <code>Viewport3D</code>
		 * @param height 	A number designating the height of the <code>Viewport3D</code>
*/
public function set viewportHeight (height:Number) : Void;/**
* Height of the Viewport
*/
public function get viewportHeight () : Number;/**
* The <code>Sprite</code> holding the <code>Viewport3D</code>
*/
public function get containerSprite () : ViewportLayer;/**
* Whether clipping is enabled (not rendering bitmap data outside the rectangle of the viewport by making use of the <code>Sprite.scrollRect</code>)
		 * @see flash.display.Sprite#scrollRect
		 * @see http://www.gskinner.com/blog/archives/2006/11/understanding_d.html
*/
public function get autoClipping () : Boolean;public function set autoClipping (clip:Boolean) : Void;/**
* Whether culling is enabled (not rendering triangles hidden behind other triangles)
		 * @see #lineCuller
		 * @see #particleCuller
		 * @see #triangleCuller
*/
public function get autoCulling () : Boolean;public function set autoCulling (culling:Boolean) : Void;/**
* Whether the <code>Viewport3D</code> should scale with the <code>Stage</code>
*/
public function set autoScaleToStage (scale:Boolean) : Void;/**
* The auto scale to stage boolean flag
*/
public function get autoScaleToStage () : Boolean;/**
* Whether the <code>Viewport3D</code> should listen for <code>Mouse</code> events and create an <code>InteractiveSceneManager</code>
*/
public function set interactive (b:Boolean) : Void;/**
* The interactive boolean flag
*/
public function get interactive () : Boolean;/**
* Sets the <code>ViewportObjectFilter</code> of the <code>Viewport3D</code>
		 * @param vof		The <code>ViewportObjectFilter</code> you want applied
*/
public function set viewportObjectFilter (vof:ViewportObjectFilter) : Void;/**
* The <code>ViewportObjectFilter</code>
*/
public function get viewportObjectFilter () : ViewportObjectFilter;/**
* @param viewportWidth 	Width of the viewport
		 * @param viewportHeight 	Height of the viewport
		 * @param autoScaleToStage 	Determines whether the viewport should resize when the stage resizes
		 * @param interactive 		Determines whether the viewport should listen for Mouse events by creating an <code>InteractiveSceneManager</code>
		 * @param autoClipping 		Determines whether DisplayObject3Ds outside the rectangle of the viewport should be rendered
		 * @param autoCulling 		Detemines whether only the objects in front of the camera should be rendered. In other words, if a triangle is hidden by another triangle from the camera, it will not be rendered.
*/
public function Viewport3D (viewportWidth:Number = 640, viewportHeight:Number = 480, autoScaleToStage:Boolean = false, interactive:Boolean = false, autoClipping:Boolean = true, autoCulling:Boolean = true);/**
* Removes all references and sets the viewport's
		 * InteractiveSceneManager to null for a future
		 * garbage collection sweep
*/
public function destroy () : void;/**
* @private
*/
protected function init () : void;/**
* Checks the Mouse x and y against the <code>RenderHitData</code>
		 * @return RenderHitData of the current mouse location
*/
public function hitTestMouse () : RenderHitData;/**
* Checks a <code>Point</code> against the <code>RenderHitData</code>
		 * of the viewport
		 * @param point		a 2d <code>Point</code> you want to analyze into 3d space
		 * @return <code>RenderHitData</code> of the given <code>Point</code>
*/
public function hitTestPoint2D (point:Point) : RenderHitData;public function hitTestPointObject (point:Point, object:DisplayObject3D) : RenderHitData;/**
* Creates or receives a <code>ViewportLayer</code> of the given <code>DisplayObject3D</code>
		 * @param do3d			A <code>DisplayObject3D</code> used to either find the layer or create a new one
		 * @param createNew		Forces the creation of a new layer
		 * @param recurse		Adds the <code>DisplayObject3D</code> as well as all of its children to a new layer
		 * @return <code>ViewportLayer</code> of the given <code>DisplayObject3D</code>
*/
public function getChildLayer (do3d:DisplayObject3D, createNew:Boolean = true, recurse:Boolean = true) : ViewportLayer;/**
* Gets the layer of the RenderListItem. Most-likely internal use.
		 * @param rc			A RenderableListItem to look for
		 * @param setInstance	sets the container to the layer
		 * @return 				The found <code>ViewportLayer</code>
*/
public function accessLayerFor (rc:RenderableListItem, setInstance:Boolean = false) : ViewportLayer;/**
* Triggered when added to the stage to start listening to stage resizing
*/
protected function onAddedToStage (event:Event) : void;/**
* Triggered when removed from the stage to remove the stage resizing listener
*/
protected function onRemovedFromStage (event:Event) : void;/**
* Resizes the viewport when the stage is resized (if autoScaleToStage == true)
*/
protected function onStageResize (event:Event = null) : void;protected function setStageScaleMode () : void;/**
* Updates a <code>ViewportLayer</code> prior to the 3d data being rendered into the 2d scene
		 * @param renderSessionData		All the information regarding the current renderSession packed into one class
*/
public function updateBeforeRender (renderSessionData:RenderSessionData) : void;/**
* Updates a <code>ViewportLayer</code> after the 3d data is rendered into the 2d scene
		 * @param renderSessionData		All the information regarding the current renderSession packed into one class
*/
public function updateAfterRender (renderSessionData:RenderSessionData) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\layer\BitmapEffectLayer.as
package org.papervision3d.view.layer{import flash.display.Bitmap;import flash.display.BitmapData;import flash.display.DisplayObject;import flash.display.Sprite;import flash.geom.Matrix;import flash.geom.Point;import flash.geom.Rectangle;import org.papervision3d.core.effects.AbstractEffect;import org.papervision3d.core.effects.utils.BitmapClearMode;import org.papervision3d.core.effects.utils.BitmapDrawCommand;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.Viewport3D;public class BitmapEffectLayer extends ViewportLayer{public var canvas : BitmapData;private var transMat : Matrix;public var clearMode : String;public var clippingRect : Rectangle;public var clippingPoint : Point;public var drawCommand : BitmapDrawCommand;public var clearBeforeRender : Boolean;public var bitmapContainer : Bitmap;private var _width : Number;private var _height : Number;public var trackingObject : DisplayObject3D;public var trackingOffset : Point;public var scrollX : Number;public var scrollY : Number;public var effects : Array;public var drawLayer : Sprite;public var renderAbove : Boolean;public function BitmapEffectLayer (viewport:Viewport3D, w:Number = 640, h:Number = 480, transparent:Boolean = true, fillColor:uint = 0, clearMode:String = "clear_pre", renderAbove:Boolean = false, clearBeforeRender:Boolean = false);public function setBitmapOffset (x:Number, y:Number) : void;public function setTracking (object:DisplayObject3D, offset:Point = null) : void;public function setScroll (x:Number = 0, y:Number = 0) : void;public function fillCanvas (color:uint) : void;public function renderEffects () : void;public function removeEffect (fx:AbstractEffect) : void;public function setClipping (rect:Rectangle, point:Point) : void;public function addEffect (fx:AbstractEffect) : void;public function updateBeforeRender () : void;public function updateAfterRender () : void;public function getTranslationMatrix () : Matrix;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\layer\ViewportBaseLayer.as
package org.papervision3d.view.layer{import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.Viewport3D;/**
* @Author Ralph Hauwert
*/
public class ViewportBaseLayer extends ViewportLayer{public function ViewportBaseLayer (viewport:Viewport3D);public function getChildLayer (do3d:DisplayObject3D, createNew:Boolean = true, recurse:Boolean = false) : ViewportLayer;public function updateBeforeRender () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\layer\ViewportLayer.as
package org.papervision3d.view.layer{import flash.display.Graphics;import flash.display.Sprite;import flash.utils.Dictionary;import org.papervision3d.core.log.PaperLogger;import org.papervision3d.core.ns.pv3dview;import org.papervision3d.core.render.command.RenderableListItem;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.view.Viewport3D;import org.papervision3d.view.layer.util.ViewportLayerSortMode;/**
* @Author Ralph Hauwert
*/
public class ViewportLayer extends Sprite{public var childLayers : Array;public var layers : Dictionary;public var displayObject3D : DisplayObject3D;public var displayObjects : Dictionary;public var layerIndex : Number;public var forceDepth : Boolean;public var screenDepth : Number;public var originDepth : Number;public var weight : Number;public var sortMode : String;public var dynamicLayer : Boolean;public var graphicsChannel : Graphics;protected var viewport : Viewport3D;public function ViewportLayer (viewport:Viewport3D, do3d:DisplayObject3D, isDynamic:Boolean = false);public function addDisplayObject3D (do3d:DisplayObject3D, recurse:Boolean = false) : void;public function removeDisplayObject3D (do3d:DisplayObject3D) : void;public function hasDisplayObject3D (do3d:DisplayObject3D) : Boolean;protected function init () : void;public function getChildLayer (do3d:DisplayObject3D, createNew:Boolean = true, recurse:Boolean = false) : ViewportLayer;protected function getChildLayerFor (displayObject3D:DisplayObject3D, recurse:Boolean = false) : ViewportLayer;public function childLayerIndex (do3d:DisplayObject3D) : Number;public function addLayer (vpl:ViewportLayer) : void;private function linkChild (do3d:DisplayObject3D, vpl:ViewportLayer, e:ViewportLayerEvent = null) : void;private function unlinkChild (do3d:DisplayObject3D, e:ViewportLayerEvent = null) : void;private function onChildAdded (e:ViewportLayerEvent) : void;private function onChildRemoved (e:ViewportLayerEvent) : void;public function updateBeforeRender () : void;public function updateAfterRender () : void;public function removeLayer (vpl:ViewportLayer) : void;public function removeLayerAt (index:Number) : void;public function getLayerObjects (ar:Array = null) : Array;public function clear () : void;protected function reset () : void;public function sortChildLayers () : void;protected function orderLayers () : void;public function processRenderItem (rc:RenderableListItem) : void;public function updateInfo () : void;public function removeAllLayers () : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\layer\ViewportLayerEvent.as
package org.papervision3d.view.layer{import flash.events.Event;import org.papervision3d.objects.DisplayObject3D;public class ViewportLayerEvent extends Event{public var do3d : DisplayObject3D;public var layer : ViewportLayer;public static const CHILD_ADDED : String;public static const CHILD_REMOVED : String;public function ViewportLayerEvent (type:String, do3d:DisplayObject3D = null, layer:ViewportLayer = null);}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\layer\util\ViewportLayerSortMode.as
package org.papervision3d.view.layer.util{public class ViewportLayerSortMode{public static var Z_SORT : String;public static var INDEX_SORT : String;public static var ORIGIN_SORT : String;public function ViewportLayerSortMode ();}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\stats\AbstractStatsView.as
package org.papervision3d.view.stats{import flash.display.MovieClip;import flash.events.Event;import flash.utils.getTimer;import org.papervision3d.core.render.AbstractRenderEngine;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.events.RendererEvent;public class AbstractStatsView extends MovieClip{protected var _renderEngine : AbstractRenderEngine;protected var _renderSessionData : RenderSessionData;protected var _fps : int;protected var lastFrameTime : int;protected var currentFrameTime : int;public function set renderEngine (renderEngine:AbstractRenderEngine) : Void;public function get renderEngine () : AbstractRenderEngine;public function set renderSessionData (renderSessionData:RenderSessionData) : Void;public function get renderSessionData () : RenderSessionData;public function set fps (fps:int) : Void;public function get fps () : int;public function AbstractStatsView ();protected function setupListeners () : void;protected function onRenderDone (event:RendererEvent) : void;protected function onFrame (event:Event) : void;}}
#file-cache D:\Kuliah\Tugas Kuliah\Semester 7\Sistem Multimedia\collada01_2009-07\collada01\lib\papervision\org\papervision3d\view\stats\StatsView.as
package org.papervision3d.view.stats{import flash.system.System;import flash.text.TextField;import flash.text.TextFieldAutoSize;import flash.text.TextFormat;import org.papervision3d.core.render.AbstractRenderEngine;import org.papervision3d.core.render.data.RenderSessionData;import org.papervision3d.core.render.data.RenderStatistics;import org.papervision3d.objects.DisplayObject3D;import org.papervision3d.scenes.Scene3D;public class StatsView extends AbstractStatsView{protected var statsFormat : TextFormat;public var totalPolyCount : Number;protected var polyCountField : TextField;protected var memInfoTestField : TextField;protected var fpsInfoTextField : TextField;protected var objectInfoTextField : TextField;protected var renderInfoTextField : TextField;protected var cullingInfoTextField : TextField;public function set renderSessionData (renderSessionData:RenderSessionData) : Void;public function set fps (fps:int) : Void;public static function countPolys (obj:DisplayObject3D) : Number;protected static function recurseDisplayObject (obj:DisplayObject3D, polygonCount:Number) : Number;public function StatsView (renderEngine:AbstractRenderEngine);protected function init () : void;protected function setupView () : void;public function updatePolyCount (scene:Scene3D) : void;}}